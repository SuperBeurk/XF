
ide-cubeide-test2-idf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000478c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c0  0800495c  0800495c  0001495c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08004e1c  08004e1c  00014e1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  08004e24  08004e24  00014e24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000008  08004e2c  08004e2c  00014e2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000007c  20000000  08004e34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000378  2000007c  08004eb0  0002007c  2**2
                  ALLOC
  8 ._user_heap_stack 00002004  200003f4  08004eb0  000203f4  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00040d4f  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000880e  00000000  00000000  00060dfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000bc8  00000000  00000000  00069610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000d90  00000000  00000000  0006a1d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0002dee8  00000000  00000000  0006af68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001e792  00000000  00000000  00098e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000ffeea  00000000  00000000  000b75e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001b74cc  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002d40  00000000  00000000  001b7520  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loc    00008afc  00000000  00000000  001ba260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .stab         000000cc  00000000  00000000  001c2d5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stabstr      000001b9  00000000  00000000  001c2e28  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004944 	.word	0x08004944

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000080 	.word	0x20000080
 800020c:	08004944 	.word	0x08004944

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96e 	b.w	80005b4 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468c      	mov	ip, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8083 	bne.w	8000406 <__udivmoddi4+0x116>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d947      	bls.n	8000396 <__udivmoddi4+0xa6>
 8000306:	fab2 f282 	clz	r2, r2
 800030a:	b142      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030c:	f1c2 0020 	rsb	r0, r2, #32
 8000310:	fa24 f000 	lsr.w	r0, r4, r0
 8000314:	4091      	lsls	r1, r2
 8000316:	4097      	lsls	r7, r2
 8000318:	ea40 0c01 	orr.w	ip, r0, r1
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbbc f6f8 	udiv	r6, ip, r8
 8000328:	fa1f fe87 	uxth.w	lr, r7
 800032c:	fb08 c116 	mls	r1, r8, r6, ip
 8000330:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000334:	fb06 f10e 	mul.w	r1, r6, lr
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000342:	f080 8119 	bcs.w	8000578 <__udivmoddi4+0x288>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8116 	bls.w	8000578 <__udivmoddi4+0x288>
 800034c:	3e02      	subs	r6, #2
 800034e:	443b      	add	r3, r7
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0f8 	udiv	r0, r3, r8
 8000358:	fb08 3310 	mls	r3, r8, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fe0e 	mul.w	lr, r0, lr
 8000364:	45a6      	cmp	lr, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	193c      	adds	r4, r7, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8105 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f240 8102 	bls.w	800057c <__udivmoddi4+0x28c>
 8000378:	3802      	subs	r0, #2
 800037a:	443c      	add	r4, r7
 800037c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000380:	eba4 040e 	sub.w	r4, r4, lr
 8000384:	2600      	movs	r6, #0
 8000386:	b11d      	cbz	r5, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c5 4300 	strd	r4, r3, [r5]
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	b902      	cbnz	r2, 800039a <__udivmoddi4+0xaa>
 8000398:	deff      	udf	#255	; 0xff
 800039a:	fab2 f282 	clz	r2, r2
 800039e:	2a00      	cmp	r2, #0
 80003a0:	d150      	bne.n	8000444 <__udivmoddi4+0x154>
 80003a2:	1bcb      	subs	r3, r1, r7
 80003a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	2601      	movs	r6, #1
 80003ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80003b2:	0c21      	lsrs	r1, r4, #16
 80003b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb08 f30c 	mul.w	r3, r8, ip
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0xe4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0xe2>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	f200 80e9 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1ac9      	subs	r1, r1, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x10c>
 80003ec:	193c      	adds	r4, r7, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x10a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80d9 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e7bf      	b.n	8000386 <__udivmoddi4+0x96>
 8000406:	428b      	cmp	r3, r1
 8000408:	d909      	bls.n	800041e <__udivmoddi4+0x12e>
 800040a:	2d00      	cmp	r5, #0
 800040c:	f000 80b1 	beq.w	8000572 <__udivmoddi4+0x282>
 8000410:	2600      	movs	r6, #0
 8000412:	e9c5 0100 	strd	r0, r1, [r5]
 8000416:	4630      	mov	r0, r6
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	fab3 f683 	clz	r6, r3
 8000422:	2e00      	cmp	r6, #0
 8000424:	d14a      	bne.n	80004bc <__udivmoddi4+0x1cc>
 8000426:	428b      	cmp	r3, r1
 8000428:	d302      	bcc.n	8000430 <__udivmoddi4+0x140>
 800042a:	4282      	cmp	r2, r0
 800042c:	f200 80b8 	bhi.w	80005a0 <__udivmoddi4+0x2b0>
 8000430:	1a84      	subs	r4, r0, r2
 8000432:	eb61 0103 	sbc.w	r1, r1, r3
 8000436:	2001      	movs	r0, #1
 8000438:	468c      	mov	ip, r1
 800043a:	2d00      	cmp	r5, #0
 800043c:	d0a8      	beq.n	8000390 <__udivmoddi4+0xa0>
 800043e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000442:	e7a5      	b.n	8000390 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f603 	lsr.w	r6, r0, r3
 800044c:	4097      	lsls	r7, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000456:	40d9      	lsrs	r1, r3
 8000458:	4330      	orrs	r0, r6
 800045a:	0c03      	lsrs	r3, r0, #16
 800045c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000460:	fa1f f887 	uxth.w	r8, r7
 8000464:	fb0e 1116 	mls	r1, lr, r6, r1
 8000468:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046c:	fb06 f108 	mul.w	r1, r6, r8
 8000470:	4299      	cmp	r1, r3
 8000472:	fa04 f402 	lsl.w	r4, r4, r2
 8000476:	d909      	bls.n	800048c <__udivmoddi4+0x19c>
 8000478:	18fb      	adds	r3, r7, r3
 800047a:	f106 3cff 	add.w	ip, r6, #4294967295
 800047e:	f080 808d 	bcs.w	800059c <__udivmoddi4+0x2ac>
 8000482:	4299      	cmp	r1, r3
 8000484:	f240 808a 	bls.w	800059c <__udivmoddi4+0x2ac>
 8000488:	3e02      	subs	r6, #2
 800048a:	443b      	add	r3, r7
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b281      	uxth	r1, r0
 8000490:	fbb3 f0fe 	udiv	r0, r3, lr
 8000494:	fb0e 3310 	mls	r3, lr, r0, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb00 f308 	mul.w	r3, r0, r8
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d907      	bls.n	80004b4 <__udivmoddi4+0x1c4>
 80004a4:	1879      	adds	r1, r7, r1
 80004a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004aa:	d273      	bcs.n	8000594 <__udivmoddi4+0x2a4>
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d971      	bls.n	8000594 <__udivmoddi4+0x2a4>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4439      	add	r1, r7
 80004b4:	1acb      	subs	r3, r1, r3
 80004b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ba:	e778      	b.n	80003ae <__udivmoddi4+0xbe>
 80004bc:	f1c6 0c20 	rsb	ip, r6, #32
 80004c0:	fa03 f406 	lsl.w	r4, r3, r6
 80004c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004c8:	431c      	orrs	r4, r3
 80004ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ce:	fa01 f306 	lsl.w	r3, r1, r6
 80004d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004da:	431f      	orrs	r7, r3
 80004dc:	0c3b      	lsrs	r3, r7, #16
 80004de:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e2:	fa1f f884 	uxth.w	r8, r4
 80004e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ee:	fb09 fa08 	mul.w	sl, r9, r8
 80004f2:	458a      	cmp	sl, r1
 80004f4:	fa02 f206 	lsl.w	r2, r2, r6
 80004f8:	fa00 f306 	lsl.w	r3, r0, r6
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x220>
 80004fe:	1861      	adds	r1, r4, r1
 8000500:	f109 30ff 	add.w	r0, r9, #4294967295
 8000504:	d248      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 8000506:	458a      	cmp	sl, r1
 8000508:	d946      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800050a:	f1a9 0902 	sub.w	r9, r9, #2
 800050e:	4421      	add	r1, r4
 8000510:	eba1 010a 	sub.w	r1, r1, sl
 8000514:	b2bf      	uxth	r7, r7
 8000516:	fbb1 f0fe 	udiv	r0, r1, lr
 800051a:	fb0e 1110 	mls	r1, lr, r0, r1
 800051e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000522:	fb00 f808 	mul.w	r8, r0, r8
 8000526:	45b8      	cmp	r8, r7
 8000528:	d907      	bls.n	800053a <__udivmoddi4+0x24a>
 800052a:	19e7      	adds	r7, r4, r7
 800052c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000530:	d22e      	bcs.n	8000590 <__udivmoddi4+0x2a0>
 8000532:	45b8      	cmp	r8, r7
 8000534:	d92c      	bls.n	8000590 <__udivmoddi4+0x2a0>
 8000536:	3802      	subs	r0, #2
 8000538:	4427      	add	r7, r4
 800053a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800053e:	eba7 0708 	sub.w	r7, r7, r8
 8000542:	fba0 8902 	umull	r8, r9, r0, r2
 8000546:	454f      	cmp	r7, r9
 8000548:	46c6      	mov	lr, r8
 800054a:	4649      	mov	r1, r9
 800054c:	d31a      	bcc.n	8000584 <__udivmoddi4+0x294>
 800054e:	d017      	beq.n	8000580 <__udivmoddi4+0x290>
 8000550:	b15d      	cbz	r5, 800056a <__udivmoddi4+0x27a>
 8000552:	ebb3 020e 	subs.w	r2, r3, lr
 8000556:	eb67 0701 	sbc.w	r7, r7, r1
 800055a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800055e:	40f2      	lsrs	r2, r6
 8000560:	ea4c 0202 	orr.w	r2, ip, r2
 8000564:	40f7      	lsrs	r7, r6
 8000566:	e9c5 2700 	strd	r2, r7, [r5]
 800056a:	2600      	movs	r6, #0
 800056c:	4631      	mov	r1, r6
 800056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e70b      	b.n	8000390 <__udivmoddi4+0xa0>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0x60>
 800057c:	4618      	mov	r0, r3
 800057e:	e6fd      	b.n	800037c <__udivmoddi4+0x8c>
 8000580:	4543      	cmp	r3, r8
 8000582:	d2e5      	bcs.n	8000550 <__udivmoddi4+0x260>
 8000584:	ebb8 0e02 	subs.w	lr, r8, r2
 8000588:	eb69 0104 	sbc.w	r1, r9, r4
 800058c:	3801      	subs	r0, #1
 800058e:	e7df      	b.n	8000550 <__udivmoddi4+0x260>
 8000590:	4608      	mov	r0, r1
 8000592:	e7d2      	b.n	800053a <__udivmoddi4+0x24a>
 8000594:	4660      	mov	r0, ip
 8000596:	e78d      	b.n	80004b4 <__udivmoddi4+0x1c4>
 8000598:	4681      	mov	r9, r0
 800059a:	e7b9      	b.n	8000510 <__udivmoddi4+0x220>
 800059c:	4666      	mov	r6, ip
 800059e:	e775      	b.n	800048c <__udivmoddi4+0x19c>
 80005a0:	4630      	mov	r0, r6
 80005a2:	e74a      	b.n	800043a <__udivmoddi4+0x14a>
 80005a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a8:	4439      	add	r1, r7
 80005aa:	e713      	b.n	80003d4 <__udivmoddi4+0xe4>
 80005ac:	3802      	subs	r0, #2
 80005ae:	443c      	add	r4, r7
 80005b0:	e724      	b.n	80003fc <__udivmoddi4+0x10c>
 80005b2:	bf00      	nop

080005b4 <__aeabi_idiv0>:
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop

080005b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80005bc:	b091      	sub	sp, #68	; 0x44
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005be:	2400      	movs	r4, #0
 80005c0:	940b      	str	r4, [sp, #44]	; 0x2c
 80005c2:	940c      	str	r4, [sp, #48]	; 0x30
 80005c4:	940d      	str	r4, [sp, #52]	; 0x34
 80005c6:	940e      	str	r4, [sp, #56]	; 0x38
 80005c8:	940f      	str	r4, [sp, #60]	; 0x3c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005ca:	4bac      	ldr	r3, [pc, #688]	; (800087c <MX_GPIO_Init+0x2c4>)
 80005cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005ce:	f042 0210 	orr.w	r2, r2, #16
 80005d2:	631a      	str	r2, [r3, #48]	; 0x30
 80005d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005d6:	f002 0210 	and.w	r2, r2, #16
 80005da:	9200      	str	r2, [sp, #0]
 80005dc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80005de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80005e4:	631a      	str	r2, [r3, #48]	; 0x30
 80005e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005e8:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80005ec:	9201      	str	r2, [sp, #4]
 80005ee:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005f2:	f042 0202 	orr.w	r2, r2, #2
 80005f6:	631a      	str	r2, [r3, #48]	; 0x30
 80005f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005fa:	f002 0202 	and.w	r2, r2, #2
 80005fe:	9202      	str	r2, [sp, #8]
 8000600:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000602:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000604:	f042 0208 	orr.w	r2, r2, #8
 8000608:	631a      	str	r2, [r3, #48]	; 0x30
 800060a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800060c:	f002 0208 	and.w	r2, r2, #8
 8000610:	9203      	str	r2, [sp, #12]
 8000612:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000614:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000616:	f042 0204 	orr.w	r2, r2, #4
 800061a:	631a      	str	r2, [r3, #48]	; 0x30
 800061c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800061e:	f002 0204 	and.w	r2, r2, #4
 8000622:	9204      	str	r2, [sp, #16]
 8000624:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000626:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000628:	f042 0201 	orr.w	r2, r2, #1
 800062c:	631a      	str	r2, [r3, #48]	; 0x30
 800062e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000630:	f002 0201 	and.w	r2, r2, #1
 8000634:	9205      	str	r2, [sp, #20]
 8000636:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000638:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800063a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800063e:	631a      	str	r2, [r3, #48]	; 0x30
 8000640:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000642:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8000646:	9206      	str	r2, [sp, #24]
 8000648:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800064a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800064c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000650:	631a      	str	r2, [r3, #48]	; 0x30
 8000652:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000654:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8000658:	9207      	str	r2, [sp, #28]
 800065a:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800065c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800065e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000662:	631a      	str	r2, [r3, #48]	; 0x30
 8000664:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000666:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 800066a:	9208      	str	r2, [sp, #32]
 800066c:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800066e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000670:	f042 0220 	orr.w	r2, r2, #32
 8000674:	631a      	str	r2, [r3, #48]	; 0x30
 8000676:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000678:	f002 0220 	and.w	r2, r2, #32
 800067c:	9209      	str	r2, [sp, #36]	; 0x24
 800067e:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000680:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000682:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000686:	631a      	str	r2, [r3, #48]	; 0x30
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800068e:	930a      	str	r3, [sp, #40]	; 0x28
 8000690:	9b0a      	ldr	r3, [sp, #40]	; 0x28

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8000692:	4622      	mov	r2, r4
 8000694:	2110      	movs	r1, #16
 8000696:	487a      	ldr	r0, [pc, #488]	; (8000880 <MX_GPIO_Init+0x2c8>)
 8000698:	f000 fdb6 	bl	8001208 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED0_Pin|LED2_Pin, GPIO_PIN_RESET);
 800069c:	4622      	mov	r2, r4
 800069e:	f44f 4101 	mov.w	r1, #33024	; 0x8100
 80006a2:	4878      	ldr	r0, [pc, #480]	; (8000884 <MX_GPIO_Init+0x2cc>)
 80006a4:	f000 fdb0 	bl	8001208 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80006a8:	f8df a1f8 	ldr.w	sl, [pc, #504]	; 80008a4 <MX_GPIO_Init+0x2ec>
 80006ac:	2201      	movs	r2, #1
 80006ae:	2120      	movs	r1, #32
 80006b0:	4650      	mov	r0, sl
 80006b2:	f000 fda9 	bl	8001208 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, BUTTON1_Pin|BUTTON0_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 80006b6:	4622      	mov	r2, r4
 80006b8:	f241 010c 	movw	r1, #4108	; 0x100c
 80006bc:	4872      	ldr	r0, [pc, #456]	; (8000888 <MX_GPIO_Init+0x2d0>)
 80006be:	f000 fda3 	bl	8001208 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 80006c2:	4622      	mov	r2, r4
 80006c4:	2108      	movs	r1, #8
 80006c6:	4871      	ldr	r0, [pc, #452]	; (800088c <MX_GPIO_Init+0x2d4>)
 80006c8:	f000 fd9e 	bl	8001208 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, DCMI_PWR_EN_Pin|LED1_Pin, GPIO_PIN_RESET);
 80006cc:	4622      	mov	r2, r4
 80006ce:	f44f 5101 	mov.w	r1, #8256	; 0x2040
 80006d2:	486f      	ldr	r0, [pc, #444]	; (8000890 <MX_GPIO_Init+0x2d8>)
 80006d4:	f000 fd98 	bl	8001208 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, BUTTON2_Pin|BUTTON3_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 80006d8:	4622      	mov	r2, r4
 80006da:	21c8      	movs	r1, #200	; 0xc8
 80006dc:	486d      	ldr	r0, [pc, #436]	; (8000894 <MX_GPIO_Init+0x2dc>)
 80006de:	f000 fd93 	bl	8001208 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_B0_Pin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 80006e2:	2310      	movs	r3, #16
 80006e4:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006e6:	2502      	movs	r5, #2
 80006e8:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ea:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ec:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80006ee:	230e      	movs	r3, #14
 80006f0:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80006f2:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 80008a8 <MX_GPIO_Init+0x2f0>
 80006f6:	a90b      	add	r1, sp, #44	; 0x2c
 80006f8:	4648      	mov	r0, r9
 80006fa:	f000 fc95 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 80006fe:	2308      	movs	r3, #8
 8000700:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000702:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000704:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000706:	a90b      	add	r1, sp, #44	; 0x2c
 8000708:	4648      	mov	r0, r9
 800070a:	f000 fc8d 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 800070e:	2304      	movs	r3, #4
 8000710:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000712:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000714:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000716:	2603      	movs	r6, #3
 8000718:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800071a:	2309      	movs	r3, #9
 800071c:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 800071e:	a90b      	add	r1, sp, #44	; 0x2c
 8000720:	4648      	mov	r0, r9
 8000722:	f000 fc81 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8000726:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 800072a:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800072c:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072e:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000730:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000732:	230b      	movs	r3, #11
 8000734:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000736:	a90b      	add	r1, sp, #44	; 0x2c
 8000738:	4856      	ldr	r0, [pc, #344]	; (8000894 <MX_GPIO_Init+0x2dc>)
 800073a:	f000 fc75 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin FMC_D5_Pin FMC_D6_Pin
                           FMC_D8_Pin FMC_D11_Pin FMC_D4_Pin FMC_D7_Pin
                           FMC_D9_Pin FMC_D12_Pin FMC_D10_Pin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 800073e:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000742:	930b      	str	r3, [sp, #44]	; 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000744:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000746:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000748:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800074a:	f04f 080c 	mov.w	r8, #12
 800074e:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000752:	a90b      	add	r1, sp, #44	; 0x2c
 8000754:	4648      	mov	r0, r9
 8000756:	f000 fc67 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 800075a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800075e:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000760:	2312      	movs	r3, #18
 8000762:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000764:	2701      	movs	r7, #1
 8000766:	970d      	str	r7, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000768:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800076a:	2304      	movs	r3, #4
 800076c:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800076e:	a90b      	add	r1, sp, #44	; 0x2c
 8000770:	4843      	ldr	r0, [pc, #268]	; (8000880 <MX_GPIO_Init+0x2c8>)
 8000772:	f000 fc59 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8000776:	f643 4323 	movw	r3, #15395	; 0x3c23
 800077a:	930b      	str	r3, [sp, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800077c:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077e:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000780:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000782:	f04f 0b0a 	mov.w	fp, #10
 8000786:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800078a:	a90b      	add	r1, sp, #44	; 0x2c
 800078c:	483c      	ldr	r0, [pc, #240]	; (8000880 <MX_GPIO_Init+0x2c8>)
 800078e:	f000 fc4b 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED3_Pin */
  GPIO_InitStruct.Pin = LED3_Pin;
 8000792:	2310      	movs	r3, #16
 8000794:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000796:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000798:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079a:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(LED3_GPIO_Port, &GPIO_InitStruct);
 800079c:	a90b      	add	r1, sp, #44	; 0x2c
 800079e:	4838      	ldr	r0, [pc, #224]	; (8000880 <MX_GPIO_Init+0x2c8>)
 80007a0:	f000 fc42 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 80007a4:	2380      	movs	r3, #128	; 0x80
 80007a6:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a8:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007aa:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ac:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 80007ae:	2308      	movs	r3, #8
 80007b0:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 80007b2:	a90b      	add	r1, sp, #44	; 0x2c
 80007b4:	4650      	mov	r0, sl
 80007b6:	f000 fc37 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 80007ba:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80007be:	930b      	str	r3, [sp, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c0:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c2:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007c4:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80007c6:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007ca:	a90b      	add	r1, sp, #44	; 0x2c
 80007cc:	4832      	ldr	r0, [pc, #200]	; (8000898 <MX_GPIO_Init+0x2e0>)
 80007ce:	f000 fc2b 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED0_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED2_Pin;
 80007d2:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 80007d6:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d8:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007da:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007dc:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007de:	a90b      	add	r1, sp, #44	; 0x2c
 80007e0:	4828      	ldr	r0, [pc, #160]	; (8000884 <MX_GPIO_Init+0x2cc>)
 80007e2:	f000 fc21 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 80007e6:	2360      	movs	r3, #96	; 0x60
 80007e8:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ea:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ec:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ee:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80007f0:	230d      	movs	r3, #13
 80007f2:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007f4:	a90b      	add	r1, sp, #44	; 0x2c
 80007f6:	4648      	mov	r0, r9
 80007f8:	f000 fc16 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 80007fc:	2340      	movs	r3, #64	; 0x40
 80007fe:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000800:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000802:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000804:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000806:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800080a:	a90b      	add	r1, sp, #44	; 0x2c
 800080c:	481c      	ldr	r0, [pc, #112]	; (8000880 <MX_GPIO_Init+0x2c8>)
 800080e:	f000 fc0b 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNCAS_Pin FMC_SDCLK_Pin FMC_A11_Pin FMC_A10_Pin
                           FMC_BA1_Pin FMC_BA0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8000812:	f248 1333 	movw	r3, #33075	; 0x8133
 8000816:	930b      	str	r3, [sp, #44]	; 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000818:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081a:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800081c:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800081e:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000822:	a90b      	add	r1, sp, #44	; 0x2c
 8000824:	481b      	ldr	r0, [pc, #108]	; (8000894 <MX_GPIO_Init+0x2dc>)
 8000826:	f000 fbff 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B1_Pin LCD_B2_Pin LCD_B3_Pin LCD_G4_Pin
                           LCD_G1_Pin LCD_G3_Pin LCD_G0_Pin LCD_G2_Pin
                           LCD_R7_Pin LCD_R5_Pin LCD_R6_Pin LCD_R4_Pin
                           LCD_R3_Pin LCD_R1_Pin LCD_R2_Pin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 800082a:	f64e 73ff 	movw	r3, #61439	; 0xefff
 800082e:	930b      	str	r3, [sp, #44]	; 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000830:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000832:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000834:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000836:	230e      	movs	r3, #14
 8000838:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800083a:	a90b      	add	r1, sp, #44	; 0x2c
 800083c:	4817      	ldr	r0, [pc, #92]	; (800089c <MX_GPIO_Init+0x2e4>)
 800083e:	f000 fbf3 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8000842:	f44f 5980 	mov.w	r9, #4096	; 0x1000
 8000846:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800084a:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084c:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800084e:	a90b      	add	r1, sp, #44	; 0x2c
 8000850:	4812      	ldr	r0, [pc, #72]	; (800089c <MX_GPIO_Init+0x2e4>)
 8000852:	f000 fbe9 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8000856:	2340      	movs	r3, #64	; 0x40
 8000858:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800085a:	4b11      	ldr	r3, [pc, #68]	; (80008a0 <MX_GPIO_Init+0x2e8>)
 800085c:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8000860:	a90b      	add	r1, sp, #44	; 0x2c
 8000862:	4650      	mov	r0, sl
 8000864:	f000 fbe0 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_D2_Pin FMC_D3_Pin FMC_D1_Pin FMC_D15_Pin
                           FMC_D0_Pin FMC_D14_Pin FMC_D13_Pin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8000868:	f24c 7303 	movw	r3, #50947	; 0xc703
 800086c:	930b      	str	r3, [sp, #44]	; 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086e:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000870:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000872:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000874:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
 8000878:	e018      	b.n	80008ac <MX_GPIO_Init+0x2f4>
 800087a:	bf00      	nop
 800087c:	40023800 	.word	0x40023800
 8000880:	40020400 	.word	0x40020400
 8000884:	40020000 	.word	0x40020000
 8000888:	40022000 	.word	0x40022000
 800088c:	40022800 	.word	0x40022800
 8000890:	40021c00 	.word	0x40021c00
 8000894:	40021800 	.word	0x40021800
 8000898:	40020800 	.word	0x40020800
 800089c:	40022400 	.word	0x40022400
 80008a0:	10120000 	.word	0x10120000
 80008a4:	40020c00 	.word	0x40020c00
 80008a8:	40021000 	.word	0x40021000
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008ac:	a90b      	add	r1, sp, #44	; 0x2c
 80008ae:	4650      	mov	r0, sl
 80008b0:	f000 fbba 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 80008b4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80008b8:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ba:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008be:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80008c0:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c4:	a90b      	add	r1, sp, #44	; 0x2c
 80008c6:	48a2      	ldr	r0, [pc, #648]	; (8000b50 <MX_GPIO_Init+0x598>)
 80008c8:	f000 fbae 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 80008cc:	23f0      	movs	r3, #240	; 0xf0
 80008ce:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d0:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d4:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80008d6:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80008da:	a90b      	add	r1, sp, #44	; 0x2c
 80008dc:	489d      	ldr	r0, [pc, #628]	; (8000b54 <MX_GPIO_Init+0x59c>)
 80008de:	f000 fba3 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DE_Pin LCD_B7_Pin LCD_B6_Pin LCD_B5_Pin
                           LCD_G6_Pin LCD_G7_Pin LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 80008e2:	23f7      	movs	r3, #247	; 0xf7
 80008e4:	930b      	str	r3, [sp, #44]	; 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e6:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ea:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80008ec:	220e      	movs	r2, #14
 80008ee:	920f      	str	r2, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80008f0:	a90b      	add	r1, sp, #44	; 0x2c
 80008f2:	4899      	ldr	r0, [pc, #612]	; (8000b58 <MX_GPIO_Init+0x5a0>)
 80008f4:	f000 fb98 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_B4_Pin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 80008f8:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fc:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000900:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000902:	2209      	movs	r2, #9
 8000904:	920f      	str	r2, [sp, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8000906:	a90b      	add	r1, sp, #44	; 0x2c
 8000908:	4894      	ldr	r0, [pc, #592]	; (8000b5c <MX_GPIO_Init+0x5a4>)
 800090a:	f000 fb8d 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 800090e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000912:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000914:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000918:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800091a:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 800091e:	a90b      	add	r1, sp, #44	; 0x2c
 8000920:	488e      	ldr	r0, [pc, #568]	; (8000b5c <MX_GPIO_Init+0x5a4>)
 8000922:	f000 fb81 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000926:	2320      	movs	r3, #32
 8000928:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092a:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092e:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000930:	a90b      	add	r1, sp, #44	; 0x2c
 8000932:	4650      	mov	r0, sl
 8000934:	f000 fb78 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8000938:	2208      	movs	r2, #8
 800093a:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093c:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000940:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000942:	220d      	movs	r2, #13
 8000944:	920f      	str	r2, [sp, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8000946:	a90b      	add	r1, sp, #44	; 0x2c
 8000948:	4650      	mov	r0, sl
 800094a:	f000 fb6d 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON1_Pin BUTTON0_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON0_Pin|LCD_DISP_Pin;
 800094e:	f241 030c 	movw	r3, #4108	; 0x100c
 8000952:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000954:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000958:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800095a:	a90b      	add	r1, sp, #44	; 0x2c
 800095c:	487d      	ldr	r0, [pc, #500]	; (8000b54 <MX_GPIO_Init+0x59c>)
 800095e:	f000 fb63 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000962:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000966:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000968:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800096c:	a90b      	add	r1, sp, #44	; 0x2c
 800096e:	487c      	ldr	r0, [pc, #496]	; (8000b60 <MX_GPIO_Init+0x5a8>)
 8000970:	f000 fb5a 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_A0_Pin FMC_A1_Pin FMC_A2_Pin FMC_A3_Pin
                           FMC_A4_Pin FMC_A5_Pin FMC_A6_Pin FMC_A9_Pin
                           FMC_A7_Pin FMC_A8_Pin FMC_SDNRAS_Pin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8000974:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000978:	930b      	str	r3, [sp, #44]	; 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097a:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800097e:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000980:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000984:	a90b      	add	r1, sp, #44	; 0x2c
 8000986:	4877      	ldr	r0, [pc, #476]	; (8000b64 <MX_GPIO_Init+0x5ac>)
 8000988:	f000 fb4e 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_VSYNC_Pin LCD_R0_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 800098c:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8000990:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000992:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000996:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000998:	220e      	movs	r2, #14
 800099a:	920f      	str	r2, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800099c:	a90b      	add	r1, sp, #44	; 0x2c
 800099e:	486d      	ldr	r0, [pc, #436]	; (8000b54 <MX_GPIO_Init+0x59c>)
 80009a0:	f000 fb42 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 80009a4:	2208      	movs	r2, #8
 80009a6:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a8:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009aa:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ac:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80009ae:	a90b      	add	r1, sp, #44	; 0x2c
 80009b0:	4869      	ldr	r0, [pc, #420]	; (8000b58 <MX_GPIO_Init+0x5a0>)
 80009b2:	f000 fb39 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 80009b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009ba:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009bc:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c0:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80009c2:	220d      	movs	r2, #13
 80009c4:	920f      	str	r2, [sp, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80009c6:	a90b      	add	r1, sp, #44	; 0x2c
 80009c8:	4864      	ldr	r0, [pc, #400]	; (8000b5c <MX_GPIO_Init+0x5a4>)
 80009ca:	f000 fb2d 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009ce:	2210      	movs	r2, #16
 80009d0:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d2:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009d6:	a90b      	add	r1, sp, #44	; 0x2c
 80009d8:	4650      	mov	r0, sl
 80009da:	f000 fb25 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_D0_Pin */
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 80009de:	2204      	movs	r2, #4
 80009e0:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e2:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e4:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e6:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80009e8:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 80009ec:	a90b      	add	r1, sp, #44	; 0x2c
 80009ee:	4650      	mov	r0, sl
 80009f0:	f000 fb1a 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 80009f4:	f248 0304 	movw	r3, #32772	; 0x8004
 80009f8:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009fa:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80009fe:	a90b      	add	r1, sp, #44	; 0x2c
 8000a00:	4859      	ldr	r0, [pc, #356]	; (8000b68 <MX_GPIO_Init+0x5b0>)
 8000a02:	f000 fb11 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8000a06:	950b      	str	r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a08:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0a:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0c:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a0e:	f04f 0905 	mov.w	r9, #5
 8000a12:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8000a16:	a90b      	add	r1, sp, #44	; 0x2c
 8000a18:	484e      	ldr	r0, [pc, #312]	; (8000b54 <MX_GPIO_Init+0x59c>)
 8000a1a:	f000 fb05 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_PWR_EN_Pin LED1_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin|LED1_Pin;
 8000a1e:	f44f 5301 	mov.w	r3, #8256	; 0x2040
 8000a22:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a24:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a28:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000a2a:	a90b      	add	r1, sp, #44	; 0x2c
 8000a2c:	484e      	ldr	r0, [pc, #312]	; (8000b68 <MX_GPIO_Init+0x5b0>)
 8000a2e:	f000 fafb 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8000a32:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8000a36:	930b      	str	r3, [sp, #44]	; 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a38:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3c:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000a3e:	220d      	movs	r2, #13
 8000a40:	920f      	str	r2, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000a42:	a90b      	add	r1, sp, #44	; 0x2c
 8000a44:	4848      	ldr	r0, [pc, #288]	; (8000b68 <MX_GPIO_Init+0x5b0>)
 8000a46:	f000 faef 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8000a4a:	970b      	str	r7, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4c:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a50:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000a52:	950f      	str	r5, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8000a54:	a90b      	add	r1, sp, #44	; 0x2c
 8000a56:	483f      	ldr	r0, [pc, #252]	; (8000b54 <MX_GPIO_Init+0x59c>)
 8000a58:	f000 fae6 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000a5c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a60:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a62:	4b42      	ldr	r3, [pc, #264]	; (8000b6c <MX_GPIO_Init+0x5b4>)
 8000a64:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000a68:	a90b      	add	r1, sp, #44	; 0x2c
 8000a6a:	483a      	ldr	r0, [pc, #232]	; (8000b54 <MX_GPIO_Init+0x59c>)
 8000a6c:	f000 fadc 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8000a70:	23c0      	movs	r3, #192	; 0xc0
 8000a72:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a74:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a78:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000a7a:	2308      	movs	r3, #8
 8000a7c:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a7e:	a90b      	add	r1, sp, #44	; 0x2c
 8000a80:	4837      	ldr	r0, [pc, #220]	; (8000b60 <MX_GPIO_Init+0x5a8>)
 8000a82:	f000 fad1 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8000a86:	2310      	movs	r3, #16
 8000a88:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8a:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8c:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a8e:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000a90:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8000a94:	a90b      	add	r1, sp, #44	; 0x2c
 8000a96:	4834      	ldr	r0, [pc, #208]	; (8000b68 <MX_GPIO_Init+0x5b0>)
 8000a98:	f000 fac6 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNME_Pin FMC_SDNE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8000a9c:	2328      	movs	r3, #40	; 0x28
 8000a9e:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa0:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa4:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000aa6:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000aaa:	a90b      	add	r1, sp, #44	; 0x2c
 8000aac:	482e      	ldr	r0, [pc, #184]	; (8000b68 <MX_GPIO_Init+0x5b0>)
 8000aae:	f000 fabb 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON2_Pin BUTTON3_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = BUTTON2_Pin|BUTTON3_Pin|EXT_RST_Pin;
 8000ab2:	23c8      	movs	r3, #200	; 0xc8
 8000ab4:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab6:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab8:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aba:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000abc:	a90b      	add	r1, sp, #44	; 0x2c
 8000abe:	4827      	ldr	r0, [pc, #156]	; (8000b5c <MX_GPIO_Init+0x5a4>)
 8000ac0:	f000 fab2 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin
                           ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8000ac4:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8000ac8:	930b      	str	r3, [sp, #44]	; 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000aca:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ace:	a90b      	add	r1, sp, #44	; 0x2c
 8000ad0:	4824      	ldr	r0, [pc, #144]	; (8000b64 <MX_GPIO_Init+0x5ac>)
 8000ad2:	f000 faa9 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pin : FMC_SDCKE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8000ad6:	2308      	movs	r3, #8
 8000ad8:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ada:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000adc:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ade:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ae0:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8000ae4:	a90b      	add	r1, sp, #44	; 0x2c
 8000ae6:	481e      	ldr	r0, [pc, #120]	; (8000b60 <MX_GPIO_Init+0x5a8>)
 8000ae8:	f000 fa9e 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8000aec:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af0:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af4:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000af6:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000afa:	a90b      	add	r1, sp, #44	; 0x2c
 8000afc:	4818      	ldr	r0, [pc, #96]	; (8000b60 <MX_GPIO_Init+0x5a8>)
 8000afe:	f000 fa93 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000b02:	2332      	movs	r3, #50	; 0x32
 8000b04:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b06:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b0a:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b0c:	230b      	movs	r3, #11
 8000b0e:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b10:	a90b      	add	r1, sp, #44	; 0x2c
 8000b12:	4813      	ldr	r0, [pc, #76]	; (8000b60 <MX_GPIO_Init+0x5a8>)
 8000b14:	f000 fa88 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b18:	2304      	movs	r3, #4
 8000b1a:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1c:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b20:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000b22:	2309      	movs	r3, #9
 8000b24:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b26:	a90b      	add	r1, sp, #44	; 0x2c
 8000b28:	4811      	ldr	r0, [pc, #68]	; (8000b70 <MX_GPIO_Init+0x5b8>)
 8000b2a:	f000 fa7d 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8000b2e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000b32:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b34:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b36:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b38:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000b3a:	2309      	movs	r3, #9
 8000b3c:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b3e:	a90b      	add	r1, sp, #44	; 0x2c
 8000b40:	4650      	mov	r0, sl
 8000b42:	f000 fa71 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8000b46:	2304      	movs	r3, #4
 8000b48:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b4a:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	940d      	str	r4, [sp, #52]	; 0x34
 8000b4e:	e011      	b.n	8000b74 <MX_GPIO_Init+0x5bc>
 8000b50:	40020000 	.word	0x40020000
 8000b54:	40022000 	.word	0x40022000
 8000b58:	40022800 	.word	0x40022800
 8000b5c:	40021800 	.word	0x40021800
 8000b60:	40020800 	.word	0x40020800
 8000b64:	40021400 	.word	0x40021400
 8000b68:	40021c00 	.word	0x40021c00
 8000b6c:	10120000 	.word	0x10120000
 8000b70:	40020400 	.word	0x40020400
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8000b74:	a90b      	add	r1, sp, #44	; 0x2c
 8000b76:	4823      	ldr	r0, [pc, #140]	; (8000c04 <MX_GPIO_Init+0x64c>)
 8000b78:	f000 fa56 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000b7c:	2386      	movs	r3, #134	; 0x86
 8000b7e:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b80:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b82:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b84:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b86:	230b      	movs	r3, #11
 8000b88:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b8a:	a90b      	add	r1, sp, #44	; 0x2c
 8000b8c:	481e      	ldr	r0, [pc, #120]	; (8000c08 <MX_GPIO_Init+0x650>)
 8000b8e:	f000 fa4b 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_A0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8000b92:	970b      	str	r7, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b94:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b96:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8000b98:	a90b      	add	r1, sp, #44	; 0x2c
 8000b9a:	481b      	ldr	r0, [pc, #108]	; (8000c08 <MX_GPIO_Init+0x650>)
 8000b9c:	f000 fa44 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8000ba0:	2350      	movs	r3, #80	; 0x50
 8000ba2:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba4:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba8:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000baa:	230d      	movs	r3, #13
 8000bac:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bae:	a90b      	add	r1, sp, #44	; 0x2c
 8000bb0:	4815      	ldr	r0, [pc, #84]	; (8000c08 <MX_GPIO_Init+0x650>)
 8000bb2:	f000 fa39 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8000bb6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000bba:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bbc:	2312      	movs	r3, #18
 8000bbe:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bc0:	970d      	str	r7, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc2:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000bc4:	2304      	movs	r3, #4
 8000bc6:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000bc8:	a90b      	add	r1, sp, #44	; 0x2c
 8000bca:	4810      	ldr	r0, [pc, #64]	; (8000c0c <MX_GPIO_Init+0x654>)
 8000bcc:	f000 fa2c 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8000bd0:	2328      	movs	r3, #40	; 0x28
 8000bd2:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd4:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd6:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd8:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000bda:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bde:	a90b      	add	r1, sp, #44	; 0x2c
 8000be0:	4809      	ldr	r0, [pc, #36]	; (8000c08 <MX_GPIO_Init+0x650>)
 8000be2:	f000 fa21 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8000be6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000bea:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bec:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf0:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000bf2:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf6:	a90b      	add	r1, sp, #44	; 0x2c
 8000bf8:	4805      	ldr	r0, [pc, #20]	; (8000c10 <MX_GPIO_Init+0x658>)
 8000bfa:	f000 fa15 	bl	8001028 <HAL_GPIO_Init>

}
 8000bfe:	b011      	add	sp, #68	; 0x44
 8000c00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c04:	40021800 	.word	0x40021800
 8000c08:	40020000 	.word	0x40020000
 8000c0c:	40021c00 	.word	0x40021c00
 8000c10:	40020400 	.word	0x40020400

08000c14 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c14:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c16:	e7fe      	b.n	8000c16 <Error_Handler+0x2>

08000c18 <MX_USART1_UART_Init>:
{
 8000c18:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 8000c1a:	480b      	ldr	r0, [pc, #44]	; (8000c48 <MX_USART1_UART_Init+0x30>)
 8000c1c:	4b0b      	ldr	r3, [pc, #44]	; (8000c4c <MX_USART1_UART_Init+0x34>)
 8000c1e:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8000c20:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000c24:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c26:	2300      	movs	r3, #0
 8000c28:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c2a:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c2c:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c2e:	220c      	movs	r2, #12
 8000c30:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c32:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c34:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c36:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c38:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c3a:	f001 fcd0 	bl	80025de <HAL_UART_Init>
 8000c3e:	b900      	cbnz	r0, 8000c42 <MX_USART1_UART_Init+0x2a>
}
 8000c40:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000c42:	f7ff ffe7 	bl	8000c14 <Error_Handler>
 8000c46:	bf00      	nop
 8000c48:	20000360 	.word	0x20000360
 8000c4c:	40011000 	.word	0x40011000

08000c50 <SystemClock_Config>:
{
 8000c50:	b510      	push	{r4, lr}
 8000c52:	b0b4      	sub	sp, #208	; 0xd0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c54:	2230      	movs	r2, #48	; 0x30
 8000c56:	2100      	movs	r1, #0
 8000c58:	a828      	add	r0, sp, #160	; 0xa0
 8000c5a:	f002 fc8b 	bl	8003574 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c5e:	2400      	movs	r4, #0
 8000c60:	9423      	str	r4, [sp, #140]	; 0x8c
 8000c62:	9424      	str	r4, [sp, #144]	; 0x90
 8000c64:	9425      	str	r4, [sp, #148]	; 0x94
 8000c66:	9426      	str	r4, [sp, #152]	; 0x98
 8000c68:	9427      	str	r4, [sp, #156]	; 0x9c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c6a:	2284      	movs	r2, #132	; 0x84
 8000c6c:	4621      	mov	r1, r4
 8000c6e:	a802      	add	r0, sp, #8
 8000c70:	f002 fc80 	bl	8003574 <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c74:	4b24      	ldr	r3, [pc, #144]	; (8000d08 <SystemClock_Config+0xb8>)
 8000c76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c78:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000c7c:	641a      	str	r2, [r3, #64]	; 0x40
 8000c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c84:	9300      	str	r3, [sp, #0]
 8000c86:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c88:	4a20      	ldr	r2, [pc, #128]	; (8000d0c <SystemClock_Config+0xbc>)
 8000c8a:	6813      	ldr	r3, [r2, #0]
 8000c8c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000c90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c94:	6013      	str	r3, [r2, #0]
 8000c96:	6813      	ldr	r3, [r2, #0]
 8000c98:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c9c:	9301      	str	r3, [sp, #4]
 8000c9e:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ca0:	2302      	movs	r3, #2
 8000ca2:	9328      	str	r3, [sp, #160]	; 0xa0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	922b      	str	r2, [sp, #172]	; 0xac
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ca8:	2210      	movs	r2, #16
 8000caa:	922c      	str	r2, [sp, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cac:	932e      	str	r3, [sp, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cae:	942f      	str	r4, [sp, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 10;
 8000cb0:	220a      	movs	r2, #10
 8000cb2:	9230      	str	r2, [sp, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 210;
 8000cb4:	22d2      	movs	r2, #210	; 0xd2
 8000cb6:	9231      	str	r2, [sp, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cb8:	9332      	str	r3, [sp, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000cba:	9333      	str	r3, [sp, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cbc:	a828      	add	r0, sp, #160	; 0xa0
 8000cbe:	f000 faa9 	bl	8001214 <HAL_RCC_OscConfig>
 8000cc2:	b9d0      	cbnz	r0, 8000cfa <SystemClock_Config+0xaa>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cc4:	230f      	movs	r3, #15
 8000cc6:	9323      	str	r3, [sp, #140]	; 0x8c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	9324      	str	r3, [sp, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	9325      	str	r3, [sp, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000cd0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000cd4:	9326      	str	r3, [sp, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000cd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cda:	9327      	str	r3, [sp, #156]	; 0x9c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000cdc:	2105      	movs	r1, #5
 8000cde:	a823      	add	r0, sp, #140	; 0x8c
 8000ce0:	f000 fd02 	bl	80016e8 <HAL_RCC_ClockConfig>
 8000ce4:	b958      	cbnz	r0, 8000cfe <SystemClock_Config+0xae>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000ce6:	2340      	movs	r3, #64	; 0x40
 8000ce8:	9302      	str	r3, [sp, #8]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000cea:	2300      	movs	r3, #0
 8000cec:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cee:	a802      	add	r0, sp, #8
 8000cf0:	f000 fdd6 	bl	80018a0 <HAL_RCCEx_PeriphCLKConfig>
 8000cf4:	b928      	cbnz	r0, 8000d02 <SystemClock_Config+0xb2>
}
 8000cf6:	b034      	add	sp, #208	; 0xd0
 8000cf8:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000cfa:	f7ff ff8b 	bl	8000c14 <Error_Handler>
    Error_Handler();
 8000cfe:	f7ff ff89 	bl	8000c14 <Error_Handler>
    Error_Handler();
 8000d02:	f7ff ff87 	bl	8000c14 <Error_Handler>
 8000d06:	bf00      	nop
 8000d08:	40023800 	.word	0x40023800
 8000d0c:	40007000 	.word	0x40007000

08000d10 <main>:
{
 8000d10:	b508      	push	{r3, lr}
  HAL_Init();
 8000d12:	f000 f8c1 	bl	8000e98 <HAL_Init>
  SystemClock_Config();
 8000d16:	f7ff ff9b 	bl	8000c50 <SystemClock_Config>
  MX_GPIO_Init();
 8000d1a:	f7ff fc4d 	bl	80005b8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000d1e:	f7ff ff7b 	bl	8000c18 <MX_USART1_UART_Init>
  XF_initialize(20);
 8000d22:	2014      	movs	r0, #20
 8000d24:	f002 fb18 	bl	8003358 <XF_initialize>
  Factory_initialize();
 8000d28:	f001 fd8e 	bl	8002848 <Factory_initialize>
  Factory_build();
 8000d2c:	f001 fda6 	bl	800287c <Factory_build>
	  XF_execOnce();
 8000d30:	f002 fb26 	bl	8003380 <XF_execOnce>
  while (1)
 8000d34:	e7fc      	b.n	8000d30 <main+0x20>
	...

08000d38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d38:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d3a:	4b0a      	ldr	r3, [pc, #40]	; (8000d64 <HAL_MspInit+0x2c>)
 8000d3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d3e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000d42:	641a      	str	r2, [r3, #64]	; 0x40
 8000d44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d46:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8000d4a:	9200      	str	r2, [sp, #0]
 8000d4c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d4e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000d50:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000d54:	645a      	str	r2, [r3, #68]	; 0x44
 8000d56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d5c:	9301      	str	r3, [sp, #4]
 8000d5e:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d60:	b002      	add	sp, #8
 8000d62:	4770      	bx	lr
 8000d64:	40023800 	.word	0x40023800

08000d68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d68:	b570      	push	{r4, r5, r6, lr}
 8000d6a:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	9303      	str	r3, [sp, #12]
 8000d70:	9304      	str	r3, [sp, #16]
 8000d72:	9305      	str	r3, [sp, #20]
 8000d74:	9306      	str	r3, [sp, #24]
 8000d76:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART1)
 8000d78:	6802      	ldr	r2, [r0, #0]
 8000d7a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000d7e:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d001      	beq.n	8000d8a <HAL_UART_MspInit+0x22>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000d86:	b008      	add	sp, #32
 8000d88:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d8a:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 8000d8e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000d90:	f042 0210 	orr.w	r2, r2, #16
 8000d94:	645a      	str	r2, [r3, #68]	; 0x44
 8000d96:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000d98:	f002 0210 	and.w	r2, r2, #16
 8000d9c:	9200      	str	r2, [sp, #0]
 8000d9e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000da2:	f042 0202 	orr.w	r2, r2, #2
 8000da6:	631a      	str	r2, [r3, #48]	; 0x30
 8000da8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000daa:	f002 0202 	and.w	r2, r2, #2
 8000dae:	9201      	str	r2, [sp, #4]
 8000db0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000db4:	f042 0201 	orr.w	r2, r2, #1
 8000db8:	631a      	str	r2, [r3, #48]	; 0x30
 8000dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbc:	f003 0301 	and.w	r3, r3, #1
 8000dc0:	9302      	str	r3, [sp, #8]
 8000dc2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000dc4:	2380      	movs	r3, #128	; 0x80
 8000dc6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc8:	2602      	movs	r6, #2
 8000dca:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dcc:	2400      	movs	r4, #0
 8000dce:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd0:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000dd2:	2507      	movs	r5, #7
 8000dd4:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000dd6:	a903      	add	r1, sp, #12
 8000dd8:	4807      	ldr	r0, [pc, #28]	; (8000df8 <HAL_UART_MspInit+0x90>)
 8000dda:	f000 f925 	bl	8001028 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000dde:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000de2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de4:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de6:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de8:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000dea:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000dec:	a903      	add	r1, sp, #12
 8000dee:	4803      	ldr	r0, [pc, #12]	; (8000dfc <HAL_UART_MspInit+0x94>)
 8000df0:	f000 f91a 	bl	8001028 <HAL_GPIO_Init>
}
 8000df4:	e7c7      	b.n	8000d86 <HAL_UART_MspInit+0x1e>
 8000df6:	bf00      	nop
 8000df8:	40020400 	.word	0x40020400
 8000dfc:	40020000 	.word	0x40020000

08000e00 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e00:	e7fe      	b.n	8000e00 <NMI_Handler>

08000e02 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e02:	e7fe      	b.n	8000e02 <HardFault_Handler>

08000e04 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e04:	e7fe      	b.n	8000e04 <MemManage_Handler>

08000e06 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e06:	e7fe      	b.n	8000e06 <BusFault_Handler>

08000e08 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e08:	e7fe      	b.n	8000e08 <UsageFault_Handler>

08000e0a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e0a:	4770      	bx	lr

08000e0c <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e0c:	4770      	bx	lr

08000e0e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e0e:	4770      	bx	lr

08000e10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e10:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e12:	f000 f84d 	bl	8000eb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  // SysTick handler gets called every millisecond (is given by code
  // generated by STM32CubeMX). Check which interval is needed by the
  // XF (typically slower) and call XF_tick() accordingly.
  if ((HAL_GetTick() % XF_tickIntervalInMilliseconds()) == 0)
 8000e16:	f000 f857 	bl	8000ec8 <HAL_GetTick>
 8000e1a:	4604      	mov	r4, r0
 8000e1c:	f002 f8cc 	bl	8002fb8 <XF_tickIntervalInMilliseconds>
 8000e20:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e24:	fb00 4013 	mls	r0, r0, r3, r4
 8000e28:	b100      	cbz	r0, 8000e2c <SysTick_Handler+0x1c>
  {
      XF_tick();
  }

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e2a:	bd10      	pop	{r4, pc}
      XF_tick();
 8000e2c:	f002 f8b0 	bl	8002f90 <XF_tick>
}
 8000e30:	e7fb      	b.n	8000e2a <SysTick_Handler+0x1a>
	...

08000e34 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e34:	4b05      	ldr	r3, [pc, #20]	; (8000e4c <SystemInit+0x18>)
 8000e36:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000e3a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8000e3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e42:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e46:	609a      	str	r2, [r3, #8]
#endif
}
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	e000ed00 	.word	0xe000ed00

08000e50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e50:	b510      	push	{r4, lr}
 8000e52:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e54:	4b0e      	ldr	r3, [pc, #56]	; (8000e90 <HAL_InitTick+0x40>)
 8000e56:	7818      	ldrb	r0, [r3, #0]
 8000e58:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e5c:	fbb3 f3f0 	udiv	r3, r3, r0
 8000e60:	4a0c      	ldr	r2, [pc, #48]	; (8000e94 <HAL_InitTick+0x44>)
 8000e62:	6810      	ldr	r0, [r2, #0]
 8000e64:	fbb0 f0f3 	udiv	r0, r0, r3
 8000e68:	f000 f878 	bl	8000f5c <HAL_SYSTICK_Config>
 8000e6c:	b968      	cbnz	r0, 8000e8a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e6e:	2c0f      	cmp	r4, #15
 8000e70:	d901      	bls.n	8000e76 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000e72:	2001      	movs	r0, #1
 8000e74:	e00a      	b.n	8000e8c <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e76:	2200      	movs	r2, #0
 8000e78:	4621      	mov	r1, r4
 8000e7a:	f04f 30ff 	mov.w	r0, #4294967295
 8000e7e:	f000 f83b 	bl	8000ef8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e82:	4b03      	ldr	r3, [pc, #12]	; (8000e90 <HAL_InitTick+0x40>)
 8000e84:	605c      	str	r4, [r3, #4]
  }

  /* Return function status */
  return HAL_OK;
 8000e86:	2000      	movs	r0, #0
 8000e88:	e000      	b.n	8000e8c <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000e8a:	2001      	movs	r0, #1
}
 8000e8c:	bd10      	pop	{r4, pc}
 8000e8e:	bf00      	nop
 8000e90:	20000004 	.word	0x20000004
 8000e94:	20000000 	.word	0x20000000

08000e98 <HAL_Init>:
{
 8000e98:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e9a:	2003      	movs	r0, #3
 8000e9c:	f000 f81a 	bl	8000ed4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ea0:	2000      	movs	r0, #0
 8000ea2:	f7ff ffd5 	bl	8000e50 <HAL_InitTick>
  HAL_MspInit();
 8000ea6:	f7ff ff47 	bl	8000d38 <HAL_MspInit>
}
 8000eaa:	2000      	movs	r0, #0
 8000eac:	bd08      	pop	{r3, pc}
	...

08000eb0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000eb0:	4a03      	ldr	r2, [pc, #12]	; (8000ec0 <HAL_IncTick+0x10>)
 8000eb2:	6811      	ldr	r1, [r2, #0]
 8000eb4:	4b03      	ldr	r3, [pc, #12]	; (8000ec4 <HAL_IncTick+0x14>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	440b      	add	r3, r1
 8000eba:	6013      	str	r3, [r2, #0]
}
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	200003e0 	.word	0x200003e0
 8000ec4:	20000004 	.word	0x20000004

08000ec8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000ec8:	4b01      	ldr	r3, [pc, #4]	; (8000ed0 <HAL_GetTick+0x8>)
 8000eca:	6818      	ldr	r0, [r3, #0]
}
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	200003e0 	.word	0x200003e0

08000ed4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ed4:	4906      	ldr	r1, [pc, #24]	; (8000ef0 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 8000ed6:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ed8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000edc:	041b      	lsls	r3, r3, #16
 8000ede:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ee0:	0200      	lsls	r0, r0, #8
 8000ee2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ee6:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000ee8:	4a02      	ldr	r2, [pc, #8]	; (8000ef4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000eea:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 8000eec:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000eee:	4770      	bx	lr
 8000ef0:	e000ed00 	.word	0xe000ed00
 8000ef4:	05fa0000 	.word	0x05fa0000

08000ef8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ef8:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000efa:	4b15      	ldr	r3, [pc, #84]	; (8000f50 <HAL_NVIC_SetPriority+0x58>)
 8000efc:	68db      	ldr	r3, [r3, #12]
 8000efe:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f02:	f1c3 0407 	rsb	r4, r3, #7
 8000f06:	2c04      	cmp	r4, #4
 8000f08:	bf28      	it	cs
 8000f0a:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f0c:	1d1d      	adds	r5, r3, #4
 8000f0e:	2d06      	cmp	r5, #6
 8000f10:	d914      	bls.n	8000f3c <HAL_NVIC_SetPriority+0x44>
 8000f12:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f14:	f04f 35ff 	mov.w	r5, #4294967295
 8000f18:	fa05 f404 	lsl.w	r4, r5, r4
 8000f1c:	ea21 0104 	bic.w	r1, r1, r4
 8000f20:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f22:	fa05 f303 	lsl.w	r3, r5, r3
 8000f26:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f2a:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8000f2c:	2800      	cmp	r0, #0
 8000f2e:	db07      	blt.n	8000f40 <HAL_NVIC_SetPriority+0x48>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f30:	0109      	lsls	r1, r1, #4
 8000f32:	b2c9      	uxtb	r1, r1
 8000f34:	4b07      	ldr	r3, [pc, #28]	; (8000f54 <HAL_NVIC_SetPriority+0x5c>)
 8000f36:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000f38:	bc30      	pop	{r4, r5}
 8000f3a:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	e7e9      	b.n	8000f14 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f40:	f000 000f 	and.w	r0, r0, #15
 8000f44:	0109      	lsls	r1, r1, #4
 8000f46:	b2c9      	uxtb	r1, r1
 8000f48:	4b03      	ldr	r3, [pc, #12]	; (8000f58 <HAL_NVIC_SetPriority+0x60>)
 8000f4a:	5419      	strb	r1, [r3, r0]
 8000f4c:	e7f4      	b.n	8000f38 <HAL_NVIC_SetPriority+0x40>
 8000f4e:	bf00      	nop
 8000f50:	e000ed00 	.word	0xe000ed00
 8000f54:	e000e400 	.word	0xe000e400
 8000f58:	e000ed14 	.word	0xe000ed14

08000f5c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f5c:	3801      	subs	r0, #1
 8000f5e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000f62:	d20a      	bcs.n	8000f7a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f64:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <HAL_SYSTICK_Config+0x24>)
 8000f66:	6058      	str	r0, [r3, #4]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f68:	4a06      	ldr	r2, [pc, #24]	; (8000f84 <HAL_SYSTICK_Config+0x28>)
 8000f6a:	21f0      	movs	r1, #240	; 0xf0
 8000f6c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f70:	2000      	movs	r0, #0
 8000f72:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f74:	2207      	movs	r2, #7
 8000f76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f78:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000f7a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	e000e010 	.word	0xe000e010
 8000f84:	e000ed00 	.word	0xe000ed00

08000f88 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f88:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000f8a:	6805      	ldr	r5, [r0, #0]
 8000f8c:	682c      	ldr	r4, [r5, #0]
 8000f8e:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 8000f92:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8000f94:	6804      	ldr	r4, [r0, #0]
 8000f96:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000f98:	6883      	ldr	r3, [r0, #8]
 8000f9a:	2b40      	cmp	r3, #64	; 0x40
 8000f9c:	d005      	beq.n	8000faa <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8000f9e:	6803      	ldr	r3, [r0, #0]
 8000fa0:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8000fa2:	6803      	ldr	r3, [r0, #0]
 8000fa4:	60da      	str	r2, [r3, #12]
  }
}
 8000fa6:	bc30      	pop	{r4, r5}
 8000fa8:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 8000faa:	6803      	ldr	r3, [r0, #0]
 8000fac:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 8000fae:	6803      	ldr	r3, [r0, #0]
 8000fb0:	60d9      	str	r1, [r3, #12]
 8000fb2:	e7f8      	b.n	8000fa6 <DMA_SetConfig+0x1e>

08000fb4 <HAL_DMA_Start_IT>:
{
 8000fb4:	b538      	push	{r3, r4, r5, lr}
 8000fb6:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000fb8:	6d85      	ldr	r5, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 8000fba:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8000fbe:	2801      	cmp	r0, #1
 8000fc0:	d030      	beq.n	8001024 <HAL_DMA_Start_IT+0x70>
 8000fc2:	2001      	movs	r0, #1
 8000fc4:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8000fc8:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
 8000fcc:	b2c0      	uxtb	r0, r0
 8000fce:	2801      	cmp	r0, #1
 8000fd0:	d004      	beq.n	8000fdc <HAL_DMA_Start_IT+0x28>
    __HAL_UNLOCK(hdma);	  
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    status = HAL_BUSY;
 8000fd8:	2002      	movs	r0, #2
}
 8000fda:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8000fdc:	2002      	movs	r0, #2
 8000fde:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000fe2:	2000      	movs	r0, #0
 8000fe4:	6560      	str	r0, [r4, #84]	; 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000fe6:	4620      	mov	r0, r4
 8000fe8:	f7ff ffce 	bl	8000f88 <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000fec:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000fee:	233f      	movs	r3, #63	; 0x3f
 8000ff0:	4093      	lsls	r3, r2
 8000ff2:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000ff4:	6822      	ldr	r2, [r4, #0]
 8000ff6:	6813      	ldr	r3, [r2, #0]
 8000ff8:	f043 0316 	orr.w	r3, r3, #22
 8000ffc:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8000ffe:	6822      	ldr	r2, [r4, #0]
 8001000:	6953      	ldr	r3, [r2, #20]
 8001002:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001006:	6153      	str	r3, [r2, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8001008:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800100a:	b123      	cbz	r3, 8001016 <HAL_DMA_Start_IT+0x62>
      hdma->Instance->CR  |= DMA_IT_HT;
 800100c:	6822      	ldr	r2, [r4, #0]
 800100e:	6813      	ldr	r3, [r2, #0]
 8001010:	f043 0308 	orr.w	r3, r3, #8
 8001014:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8001016:	6822      	ldr	r2, [r4, #0]
 8001018:	6813      	ldr	r3, [r2, #0]
 800101a:	f043 0301 	orr.w	r3, r3, #1
 800101e:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001020:	2000      	movs	r0, #0
 8001022:	e7da      	b.n	8000fda <HAL_DMA_Start_IT+0x26>
  __HAL_LOCK(hdma);
 8001024:	2002      	movs	r0, #2
 8001026:	e7d8      	b.n	8000fda <HAL_DMA_Start_IT+0x26>

08001028 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001028:	2300      	movs	r3, #0
 800102a:	2b0f      	cmp	r3, #15
 800102c:	f200 80e3 	bhi.w	80011f6 <HAL_GPIO_Init+0x1ce>
{
 8001030:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001032:	b083      	sub	sp, #12
 8001034:	e039      	b.n	80010aa <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001036:	2209      	movs	r2, #9
 8001038:	e000      	b.n	800103c <HAL_GPIO_Init+0x14>
 800103a:	2200      	movs	r2, #0
 800103c:	40b2      	lsls	r2, r6
 800103e:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 8001040:	3402      	adds	r4, #2
 8001042:	4e6d      	ldr	r6, [pc, #436]	; (80011f8 <HAL_GPIO_Init+0x1d0>)
 8001044:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001048:	4a6c      	ldr	r2, [pc, #432]	; (80011fc <HAL_GPIO_Init+0x1d4>)
 800104a:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800104c:	43ea      	mvns	r2, r5
 800104e:	ea24 0605 	bic.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001052:	684f      	ldr	r7, [r1, #4]
 8001054:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8001058:	d001      	beq.n	800105e <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 800105a:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 800105e:	4c67      	ldr	r4, [pc, #412]	; (80011fc <HAL_GPIO_Init+0x1d4>)
 8001060:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 8001062:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8001064:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001068:	684f      	ldr	r7, [r1, #4]
 800106a:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 800106e:	d001      	beq.n	8001074 <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 8001070:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 8001074:	4c61      	ldr	r4, [pc, #388]	; (80011fc <HAL_GPIO_Init+0x1d4>)
 8001076:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001078:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 800107a:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800107e:	684f      	ldr	r7, [r1, #4]
 8001080:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8001084:	d001      	beq.n	800108a <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 8001086:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 800108a:	4c5c      	ldr	r4, [pc, #368]	; (80011fc <HAL_GPIO_Init+0x1d4>)
 800108c:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 800108e:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8001090:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001092:	684e      	ldr	r6, [r1, #4]
 8001094:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8001098:	d001      	beq.n	800109e <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 800109a:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 800109e:	4c57      	ldr	r4, [pc, #348]	; (80011fc <HAL_GPIO_Init+0x1d4>)
 80010a0:	60e2      	str	r2, [r4, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80010a2:	3301      	adds	r3, #1
 80010a4:	2b0f      	cmp	r3, #15
 80010a6:	f200 80a4 	bhi.w	80011f2 <HAL_GPIO_Init+0x1ca>
    ioposition = ((uint32_t)0x01) << position;
 80010aa:	2201      	movs	r2, #1
 80010ac:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010ae:	680c      	ldr	r4, [r1, #0]
 80010b0:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 80010b4:	ea32 0404 	bics.w	r4, r2, r4
 80010b8:	d1f3      	bne.n	80010a2 <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010ba:	684c      	ldr	r4, [r1, #4]
 80010bc:	1e66      	subs	r6, r4, #1
 80010be:	2c11      	cmp	r4, #17
 80010c0:	bf18      	it	ne
 80010c2:	2e01      	cmpne	r6, #1
 80010c4:	d901      	bls.n	80010ca <HAL_GPIO_Init+0xa2>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010c6:	2c12      	cmp	r4, #18
 80010c8:	d112      	bne.n	80010f0 <HAL_GPIO_Init+0xc8>
        temp = GPIOx->OSPEEDR; 
 80010ca:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80010cc:	005f      	lsls	r7, r3, #1
 80010ce:	2403      	movs	r4, #3
 80010d0:	40bc      	lsls	r4, r7
 80010d2:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 80010d6:	68cc      	ldr	r4, [r1, #12]
 80010d8:	40bc      	lsls	r4, r7
 80010da:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 80010dc:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 80010de:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010e0:	ea26 0602 	bic.w	r6, r6, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80010e4:	684c      	ldr	r4, [r1, #4]
 80010e6:	f3c4 1200 	ubfx	r2, r4, #4, #1
 80010ea:	409a      	lsls	r2, r3
 80010ec:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 80010ee:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 80010f0:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80010f2:	005e      	lsls	r6, r3, #1
 80010f4:	2403      	movs	r4, #3
 80010f6:	40b4      	lsls	r4, r6
 80010f8:	43e2      	mvns	r2, r4
 80010fa:	ea27 0704 	bic.w	r7, r7, r4
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80010fe:	688c      	ldr	r4, [r1, #8]
 8001100:	40b4      	lsls	r4, r6
 8001102:	433c      	orrs	r4, r7
      GPIOx->PUPDR = temp;
 8001104:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001106:	684c      	ldr	r4, [r1, #4]
 8001108:	2c12      	cmp	r4, #18
 800110a:	bf18      	it	ne
 800110c:	2c02      	cmpne	r4, #2
 800110e:	d113      	bne.n	8001138 <HAL_GPIO_Init+0x110>
        temp = GPIOx->AFR[position >> 3];
 8001110:	08df      	lsrs	r7, r3, #3
 8001112:	3708      	adds	r7, #8
 8001114:	f850 e027 	ldr.w	lr, [r0, r7, lsl #2]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001118:	f003 0407 	and.w	r4, r3, #7
 800111c:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8001120:	240f      	movs	r4, #15
 8001122:	fa04 f40c 	lsl.w	r4, r4, ip
 8001126:	ea2e 0e04 	bic.w	lr, lr, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800112a:	690c      	ldr	r4, [r1, #16]
 800112c:	fa04 f40c 	lsl.w	r4, r4, ip
 8001130:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3] = temp;
 8001134:	f840 4027 	str.w	r4, [r0, r7, lsl #2]
      temp = GPIOx->MODER;
 8001138:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800113a:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800113c:	684a      	ldr	r2, [r1, #4]
 800113e:	f002 0203 	and.w	r2, r2, #3
 8001142:	40b2      	lsls	r2, r6
 8001144:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8001146:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001148:	684a      	ldr	r2, [r1, #4]
 800114a:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 800114e:	d0a8      	beq.n	80010a2 <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001150:	4a2b      	ldr	r2, [pc, #172]	; (8001200 <HAL_GPIO_Init+0x1d8>)
 8001152:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8001154:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8001158:	6454      	str	r4, [r2, #68]	; 0x44
 800115a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800115c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001160:	9201      	str	r2, [sp, #4]
 8001162:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8001164:	089c      	lsrs	r4, r3, #2
 8001166:	1ca6      	adds	r6, r4, #2
 8001168:	4a23      	ldr	r2, [pc, #140]	; (80011f8 <HAL_GPIO_Init+0x1d0>)
 800116a:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800116e:	f003 0203 	and.w	r2, r3, #3
 8001172:	0096      	lsls	r6, r2, #2
 8001174:	220f      	movs	r2, #15
 8001176:	40b2      	lsls	r2, r6
 8001178:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800117c:	4a21      	ldr	r2, [pc, #132]	; (8001204 <HAL_GPIO_Init+0x1dc>)
 800117e:	4290      	cmp	r0, r2
 8001180:	f43f af5b 	beq.w	800103a <HAL_GPIO_Init+0x12>
 8001184:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001188:	4290      	cmp	r0, r2
 800118a:	d022      	beq.n	80011d2 <HAL_GPIO_Init+0x1aa>
 800118c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001190:	4290      	cmp	r0, r2
 8001192:	d020      	beq.n	80011d6 <HAL_GPIO_Init+0x1ae>
 8001194:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001198:	4290      	cmp	r0, r2
 800119a:	d01e      	beq.n	80011da <HAL_GPIO_Init+0x1b2>
 800119c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80011a0:	4290      	cmp	r0, r2
 80011a2:	d01c      	beq.n	80011de <HAL_GPIO_Init+0x1b6>
 80011a4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80011a8:	4290      	cmp	r0, r2
 80011aa:	d01a      	beq.n	80011e2 <HAL_GPIO_Init+0x1ba>
 80011ac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80011b0:	4290      	cmp	r0, r2
 80011b2:	d018      	beq.n	80011e6 <HAL_GPIO_Init+0x1be>
 80011b4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80011b8:	4290      	cmp	r0, r2
 80011ba:	d016      	beq.n	80011ea <HAL_GPIO_Init+0x1c2>
 80011bc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80011c0:	4290      	cmp	r0, r2
 80011c2:	d014      	beq.n	80011ee <HAL_GPIO_Init+0x1c6>
 80011c4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80011c8:	4290      	cmp	r0, r2
 80011ca:	f43f af34 	beq.w	8001036 <HAL_GPIO_Init+0xe>
 80011ce:	220a      	movs	r2, #10
 80011d0:	e734      	b.n	800103c <HAL_GPIO_Init+0x14>
 80011d2:	2201      	movs	r2, #1
 80011d4:	e732      	b.n	800103c <HAL_GPIO_Init+0x14>
 80011d6:	2202      	movs	r2, #2
 80011d8:	e730      	b.n	800103c <HAL_GPIO_Init+0x14>
 80011da:	2203      	movs	r2, #3
 80011dc:	e72e      	b.n	800103c <HAL_GPIO_Init+0x14>
 80011de:	2204      	movs	r2, #4
 80011e0:	e72c      	b.n	800103c <HAL_GPIO_Init+0x14>
 80011e2:	2205      	movs	r2, #5
 80011e4:	e72a      	b.n	800103c <HAL_GPIO_Init+0x14>
 80011e6:	2206      	movs	r2, #6
 80011e8:	e728      	b.n	800103c <HAL_GPIO_Init+0x14>
 80011ea:	2207      	movs	r2, #7
 80011ec:	e726      	b.n	800103c <HAL_GPIO_Init+0x14>
 80011ee:	2208      	movs	r2, #8
 80011f0:	e724      	b.n	800103c <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 80011f2:	b003      	add	sp, #12
 80011f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011f6:	4770      	bx	lr
 80011f8:	40013800 	.word	0x40013800
 80011fc:	40013c00 	.word	0x40013c00
 8001200:	40023800 	.word	0x40023800
 8001204:	40020000 	.word	0x40020000

08001208 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001208:	b10a      	cbz	r2, 800120e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 800120a:	6181      	str	r1, [r0, #24]
 800120c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800120e:	0409      	lsls	r1, r1, #16
 8001210:	6181      	str	r1, [r0, #24]
  }
}
 8001212:	4770      	bx	lr

08001214 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001214:	2800      	cmp	r0, #0
 8001216:	f000 81ff 	beq.w	8001618 <HAL_RCC_OscConfig+0x404>
{
 800121a:	b570      	push	{r4, r5, r6, lr}
 800121c:	b082      	sub	sp, #8
 800121e:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001220:	6803      	ldr	r3, [r0, #0]
 8001222:	f013 0f01 	tst.w	r3, #1
 8001226:	d029      	beq.n	800127c <HAL_RCC_OscConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001228:	4ba7      	ldr	r3, [pc, #668]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	f003 030c 	and.w	r3, r3, #12
 8001230:	2b04      	cmp	r3, #4
 8001232:	d01a      	beq.n	800126a <HAL_RCC_OscConfig+0x56>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001234:	4ba4      	ldr	r3, [pc, #656]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	f003 030c 	and.w	r3, r3, #12
 800123c:	2b08      	cmp	r3, #8
 800123e:	d00f      	beq.n	8001260 <HAL_RCC_OscConfig+0x4c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001240:	6863      	ldr	r3, [r4, #4]
 8001242:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001246:	d040      	beq.n	80012ca <HAL_RCC_OscConfig+0xb6>
 8001248:	2b00      	cmp	r3, #0
 800124a:	d154      	bne.n	80012f6 <HAL_RCC_OscConfig+0xe2>
 800124c:	4b9e      	ldr	r3, [pc, #632]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	e039      	b.n	80012d4 <HAL_RCC_OscConfig+0xc0>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001260:	4b99      	ldr	r3, [pc, #612]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001268:	d0ea      	beq.n	8001240 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800126a:	4b97      	ldr	r3, [pc, #604]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001272:	d003      	beq.n	800127c <HAL_RCC_OscConfig+0x68>
 8001274:	6863      	ldr	r3, [r4, #4]
 8001276:	2b00      	cmp	r3, #0
 8001278:	f000 81d0 	beq.w	800161c <HAL_RCC_OscConfig+0x408>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800127c:	6823      	ldr	r3, [r4, #0]
 800127e:	f013 0f02 	tst.w	r3, #2
 8001282:	d074      	beq.n	800136e <HAL_RCC_OscConfig+0x15a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001284:	4b90      	ldr	r3, [pc, #576]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	f013 0f0c 	tst.w	r3, #12
 800128c:	d05e      	beq.n	800134c <HAL_RCC_OscConfig+0x138>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800128e:	4b8e      	ldr	r3, [pc, #568]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	f003 030c 	and.w	r3, r3, #12
 8001296:	2b08      	cmp	r3, #8
 8001298:	d053      	beq.n	8001342 <HAL_RCC_OscConfig+0x12e>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800129a:	68e3      	ldr	r3, [r4, #12]
 800129c:	2b00      	cmp	r3, #0
 800129e:	f000 8089 	beq.w	80013b4 <HAL_RCC_OscConfig+0x1a0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012a2:	4a89      	ldr	r2, [pc, #548]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 80012a4:	6813      	ldr	r3, [r2, #0]
 80012a6:	f043 0301 	orr.w	r3, r3, #1
 80012aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012ac:	f7ff fe0c 	bl	8000ec8 <HAL_GetTick>
 80012b0:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012b2:	4b85      	ldr	r3, [pc, #532]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f013 0f02 	tst.w	r3, #2
 80012ba:	d172      	bne.n	80013a2 <HAL_RCC_OscConfig+0x18e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012bc:	f7ff fe04 	bl	8000ec8 <HAL_GetTick>
 80012c0:	1b40      	subs	r0, r0, r5
 80012c2:	2802      	cmp	r0, #2
 80012c4:	d9f5      	bls.n	80012b2 <HAL_RCC_OscConfig+0x9e>
          {
            return HAL_TIMEOUT;
 80012c6:	2003      	movs	r0, #3
 80012c8:	e1ad      	b.n	8001626 <HAL_RCC_OscConfig+0x412>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012ca:	4a7f      	ldr	r2, [pc, #508]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 80012cc:	6813      	ldr	r3, [r2, #0]
 80012ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012d2:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012d4:	6863      	ldr	r3, [r4, #4]
 80012d6:	b32b      	cbz	r3, 8001324 <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 80012d8:	f7ff fdf6 	bl	8000ec8 <HAL_GetTick>
 80012dc:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012de:	4b7a      	ldr	r3, [pc, #488]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80012e6:	d1c9      	bne.n	800127c <HAL_RCC_OscConfig+0x68>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012e8:	f7ff fdee 	bl	8000ec8 <HAL_GetTick>
 80012ec:	1b40      	subs	r0, r0, r5
 80012ee:	2864      	cmp	r0, #100	; 0x64
 80012f0:	d9f5      	bls.n	80012de <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 80012f2:	2003      	movs	r0, #3
 80012f4:	e197      	b.n	8001626 <HAL_RCC_OscConfig+0x412>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012f6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012fa:	d009      	beq.n	8001310 <HAL_RCC_OscConfig+0xfc>
 80012fc:	4b72      	ldr	r3, [pc, #456]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800130c:	601a      	str	r2, [r3, #0]
 800130e:	e7e1      	b.n	80012d4 <HAL_RCC_OscConfig+0xc0>
 8001310:	4b6d      	ldr	r3, [pc, #436]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001318:	601a      	str	r2, [r3, #0]
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	e7d7      	b.n	80012d4 <HAL_RCC_OscConfig+0xc0>
        tickstart = HAL_GetTick();
 8001324:	f7ff fdd0 	bl	8000ec8 <HAL_GetTick>
 8001328:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800132a:	4b67      	ldr	r3, [pc, #412]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001332:	d0a3      	beq.n	800127c <HAL_RCC_OscConfig+0x68>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001334:	f7ff fdc8 	bl	8000ec8 <HAL_GetTick>
 8001338:	1b40      	subs	r0, r0, r5
 800133a:	2864      	cmp	r0, #100	; 0x64
 800133c:	d9f5      	bls.n	800132a <HAL_RCC_OscConfig+0x116>
            return HAL_TIMEOUT;
 800133e:	2003      	movs	r0, #3
 8001340:	e171      	b.n	8001626 <HAL_RCC_OscConfig+0x412>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001342:	4b61      	ldr	r3, [pc, #388]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800134a:	d1a6      	bne.n	800129a <HAL_RCC_OscConfig+0x86>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800134c:	4b5e      	ldr	r3, [pc, #376]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f013 0f02 	tst.w	r3, #2
 8001354:	d003      	beq.n	800135e <HAL_RCC_OscConfig+0x14a>
 8001356:	68e3      	ldr	r3, [r4, #12]
 8001358:	2b01      	cmp	r3, #1
 800135a:	f040 8161 	bne.w	8001620 <HAL_RCC_OscConfig+0x40c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800135e:	4a5a      	ldr	r2, [pc, #360]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 8001360:	6813      	ldr	r3, [r2, #0]
 8001362:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001366:	6921      	ldr	r1, [r4, #16]
 8001368:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800136c:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800136e:	6823      	ldr	r3, [r4, #0]
 8001370:	f013 0f08 	tst.w	r3, #8
 8001374:	d046      	beq.n	8001404 <HAL_RCC_OscConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001376:	6963      	ldr	r3, [r4, #20]
 8001378:	b383      	cbz	r3, 80013dc <HAL_RCC_OscConfig+0x1c8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800137a:	4a53      	ldr	r2, [pc, #332]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 800137c:	6f53      	ldr	r3, [r2, #116]	; 0x74
 800137e:	f043 0301 	orr.w	r3, r3, #1
 8001382:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001384:	f7ff fda0 	bl	8000ec8 <HAL_GetTick>
 8001388:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800138a:	4b4f      	ldr	r3, [pc, #316]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 800138c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800138e:	f013 0f02 	tst.w	r3, #2
 8001392:	d137      	bne.n	8001404 <HAL_RCC_OscConfig+0x1f0>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001394:	f7ff fd98 	bl	8000ec8 <HAL_GetTick>
 8001398:	1b40      	subs	r0, r0, r5
 800139a:	2802      	cmp	r0, #2
 800139c:	d9f5      	bls.n	800138a <HAL_RCC_OscConfig+0x176>
        {
          return HAL_TIMEOUT;
 800139e:	2003      	movs	r0, #3
 80013a0:	e141      	b.n	8001626 <HAL_RCC_OscConfig+0x412>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013a2:	4a49      	ldr	r2, [pc, #292]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 80013a4:	6813      	ldr	r3, [r2, #0]
 80013a6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80013aa:	6921      	ldr	r1, [r4, #16]
 80013ac:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80013b0:	6013      	str	r3, [r2, #0]
 80013b2:	e7dc      	b.n	800136e <HAL_RCC_OscConfig+0x15a>
        __HAL_RCC_HSI_DISABLE();
 80013b4:	4a44      	ldr	r2, [pc, #272]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 80013b6:	6813      	ldr	r3, [r2, #0]
 80013b8:	f023 0301 	bic.w	r3, r3, #1
 80013bc:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80013be:	f7ff fd83 	bl	8000ec8 <HAL_GetTick>
 80013c2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013c4:	4b40      	ldr	r3, [pc, #256]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f013 0f02 	tst.w	r3, #2
 80013cc:	d0cf      	beq.n	800136e <HAL_RCC_OscConfig+0x15a>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013ce:	f7ff fd7b 	bl	8000ec8 <HAL_GetTick>
 80013d2:	1b40      	subs	r0, r0, r5
 80013d4:	2802      	cmp	r0, #2
 80013d6:	d9f5      	bls.n	80013c4 <HAL_RCC_OscConfig+0x1b0>
            return HAL_TIMEOUT;
 80013d8:	2003      	movs	r0, #3
 80013da:	e124      	b.n	8001626 <HAL_RCC_OscConfig+0x412>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013dc:	4a3a      	ldr	r2, [pc, #232]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 80013de:	6f53      	ldr	r3, [r2, #116]	; 0x74
 80013e0:	f023 0301 	bic.w	r3, r3, #1
 80013e4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013e6:	f7ff fd6f 	bl	8000ec8 <HAL_GetTick>
 80013ea:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013ec:	4b36      	ldr	r3, [pc, #216]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 80013ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013f0:	f013 0f02 	tst.w	r3, #2
 80013f4:	d006      	beq.n	8001404 <HAL_RCC_OscConfig+0x1f0>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013f6:	f7ff fd67 	bl	8000ec8 <HAL_GetTick>
 80013fa:	1b40      	subs	r0, r0, r5
 80013fc:	2802      	cmp	r0, #2
 80013fe:	d9f5      	bls.n	80013ec <HAL_RCC_OscConfig+0x1d8>
        {
          return HAL_TIMEOUT;
 8001400:	2003      	movs	r0, #3
 8001402:	e110      	b.n	8001626 <HAL_RCC_OscConfig+0x412>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001404:	6823      	ldr	r3, [r4, #0]
 8001406:	f013 0f04 	tst.w	r3, #4
 800140a:	d07d      	beq.n	8001508 <HAL_RCC_OscConfig+0x2f4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800140c:	4b2e      	ldr	r3, [pc, #184]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 800140e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001410:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001414:	d10b      	bne.n	800142e <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001416:	4b2c      	ldr	r3, [pc, #176]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 8001418:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800141a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800141e:	641a      	str	r2, [r3, #64]	; 0x40
 8001420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001426:	9301      	str	r3, [sp, #4]
 8001428:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800142a:	2501      	movs	r5, #1
 800142c:	e000      	b.n	8001430 <HAL_RCC_OscConfig+0x21c>
  FlagStatus pwrclkchanged = RESET;
 800142e:	2500      	movs	r5, #0
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001430:	4b26      	ldr	r3, [pc, #152]	; (80014cc <HAL_RCC_OscConfig+0x2b8>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001438:	d00e      	beq.n	8001458 <HAL_RCC_OscConfig+0x244>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800143a:	68a3      	ldr	r3, [r4, #8]
 800143c:	2b01      	cmp	r3, #1
 800143e:	d01f      	beq.n	8001480 <HAL_RCC_OscConfig+0x26c>
 8001440:	2b00      	cmp	r3, #0
 8001442:	d135      	bne.n	80014b0 <HAL_RCC_OscConfig+0x29c>
 8001444:	4b20      	ldr	r3, [pc, #128]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 8001446:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001448:	f022 0201 	bic.w	r2, r2, #1
 800144c:	671a      	str	r2, [r3, #112]	; 0x70
 800144e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001450:	f022 0204 	bic.w	r2, r2, #4
 8001454:	671a      	str	r2, [r3, #112]	; 0x70
 8001456:	e018      	b.n	800148a <HAL_RCC_OscConfig+0x276>
      PWR->CR1 |= PWR_CR1_DBP;
 8001458:	4a1c      	ldr	r2, [pc, #112]	; (80014cc <HAL_RCC_OscConfig+0x2b8>)
 800145a:	6813      	ldr	r3, [r2, #0]
 800145c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001460:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001462:	f7ff fd31 	bl	8000ec8 <HAL_GetTick>
 8001466:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001468:	4b18      	ldr	r3, [pc, #96]	; (80014cc <HAL_RCC_OscConfig+0x2b8>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001470:	d1e3      	bne.n	800143a <HAL_RCC_OscConfig+0x226>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001472:	f7ff fd29 	bl	8000ec8 <HAL_GetTick>
 8001476:	1b80      	subs	r0, r0, r6
 8001478:	2864      	cmp	r0, #100	; 0x64
 800147a:	d9f5      	bls.n	8001468 <HAL_RCC_OscConfig+0x254>
          return HAL_TIMEOUT;
 800147c:	2003      	movs	r0, #3
 800147e:	e0d2      	b.n	8001626 <HAL_RCC_OscConfig+0x412>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001480:	4a11      	ldr	r2, [pc, #68]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 8001482:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001484:	f043 0301 	orr.w	r3, r3, #1
 8001488:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800148a:	68a3      	ldr	r3, [r4, #8]
 800148c:	b353      	cbz	r3, 80014e4 <HAL_RCC_OscConfig+0x2d0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800148e:	f7ff fd1b 	bl	8000ec8 <HAL_GetTick>
 8001492:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001494:	4b0c      	ldr	r3, [pc, #48]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 8001496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001498:	f013 0f02 	tst.w	r3, #2
 800149c:	d133      	bne.n	8001506 <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800149e:	f7ff fd13 	bl	8000ec8 <HAL_GetTick>
 80014a2:	1b80      	subs	r0, r0, r6
 80014a4:	f241 3388 	movw	r3, #5000	; 0x1388
 80014a8:	4298      	cmp	r0, r3
 80014aa:	d9f3      	bls.n	8001494 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80014ac:	2003      	movs	r0, #3
 80014ae:	e0ba      	b.n	8001626 <HAL_RCC_OscConfig+0x412>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014b0:	2b05      	cmp	r3, #5
 80014b2:	d00d      	beq.n	80014d0 <HAL_RCC_OscConfig+0x2bc>
 80014b4:	4b04      	ldr	r3, [pc, #16]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 80014b6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80014b8:	f022 0201 	bic.w	r2, r2, #1
 80014bc:	671a      	str	r2, [r3, #112]	; 0x70
 80014be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80014c0:	f022 0204 	bic.w	r2, r2, #4
 80014c4:	671a      	str	r2, [r3, #112]	; 0x70
 80014c6:	e7e0      	b.n	800148a <HAL_RCC_OscConfig+0x276>
 80014c8:	40023800 	.word	0x40023800
 80014cc:	40007000 	.word	0x40007000
 80014d0:	4b5c      	ldr	r3, [pc, #368]	; (8001644 <HAL_RCC_OscConfig+0x430>)
 80014d2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80014d4:	f042 0204 	orr.w	r2, r2, #4
 80014d8:	671a      	str	r2, [r3, #112]	; 0x70
 80014da:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80014dc:	f042 0201 	orr.w	r2, r2, #1
 80014e0:	671a      	str	r2, [r3, #112]	; 0x70
 80014e2:	e7d2      	b.n	800148a <HAL_RCC_OscConfig+0x276>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014e4:	f7ff fcf0 	bl	8000ec8 <HAL_GetTick>
 80014e8:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014ea:	4b56      	ldr	r3, [pc, #344]	; (8001644 <HAL_RCC_OscConfig+0x430>)
 80014ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ee:	f013 0f02 	tst.w	r3, #2
 80014f2:	d008      	beq.n	8001506 <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014f4:	f7ff fce8 	bl	8000ec8 <HAL_GetTick>
 80014f8:	1b80      	subs	r0, r0, r6
 80014fa:	f241 3388 	movw	r3, #5000	; 0x1388
 80014fe:	4298      	cmp	r0, r3
 8001500:	d9f3      	bls.n	80014ea <HAL_RCC_OscConfig+0x2d6>
        {
          return HAL_TIMEOUT;
 8001502:	2003      	movs	r0, #3
 8001504:	e08f      	b.n	8001626 <HAL_RCC_OscConfig+0x412>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001506:	b9fd      	cbnz	r5, 8001548 <HAL_RCC_OscConfig+0x334>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001508:	69a3      	ldr	r3, [r4, #24]
 800150a:	2b00      	cmp	r3, #0
 800150c:	f000 808a 	beq.w	8001624 <HAL_RCC_OscConfig+0x410>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001510:	4a4c      	ldr	r2, [pc, #304]	; (8001644 <HAL_RCC_OscConfig+0x430>)
 8001512:	6892      	ldr	r2, [r2, #8]
 8001514:	f002 020c 	and.w	r2, r2, #12
 8001518:	2a08      	cmp	r2, #8
 800151a:	d058      	beq.n	80015ce <HAL_RCC_OscConfig+0x3ba>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800151c:	2b02      	cmp	r3, #2
 800151e:	d019      	beq.n	8001554 <HAL_RCC_OscConfig+0x340>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001520:	4a48      	ldr	r2, [pc, #288]	; (8001644 <HAL_RCC_OscConfig+0x430>)
 8001522:	6813      	ldr	r3, [r2, #0]
 8001524:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001528:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800152a:	f7ff fccd 	bl	8000ec8 <HAL_GetTick>
 800152e:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001530:	4b44      	ldr	r3, [pc, #272]	; (8001644 <HAL_RCC_OscConfig+0x430>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001538:	d047      	beq.n	80015ca <HAL_RCC_OscConfig+0x3b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800153a:	f7ff fcc5 	bl	8000ec8 <HAL_GetTick>
 800153e:	1b00      	subs	r0, r0, r4
 8001540:	2802      	cmp	r0, #2
 8001542:	d9f5      	bls.n	8001530 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8001544:	2003      	movs	r0, #3
 8001546:	e06e      	b.n	8001626 <HAL_RCC_OscConfig+0x412>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001548:	4a3e      	ldr	r2, [pc, #248]	; (8001644 <HAL_RCC_OscConfig+0x430>)
 800154a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800154c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001550:	6413      	str	r3, [r2, #64]	; 0x40
 8001552:	e7d9      	b.n	8001508 <HAL_RCC_OscConfig+0x2f4>
        __HAL_RCC_PLL_DISABLE();
 8001554:	4a3b      	ldr	r2, [pc, #236]	; (8001644 <HAL_RCC_OscConfig+0x430>)
 8001556:	6813      	ldr	r3, [r2, #0]
 8001558:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800155c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800155e:	f7ff fcb3 	bl	8000ec8 <HAL_GetTick>
 8001562:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001564:	4b37      	ldr	r3, [pc, #220]	; (8001644 <HAL_RCC_OscConfig+0x430>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800156c:	d006      	beq.n	800157c <HAL_RCC_OscConfig+0x368>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800156e:	f7ff fcab 	bl	8000ec8 <HAL_GetTick>
 8001572:	1b40      	subs	r0, r0, r5
 8001574:	2802      	cmp	r0, #2
 8001576:	d9f5      	bls.n	8001564 <HAL_RCC_OscConfig+0x350>
            return HAL_TIMEOUT;
 8001578:	2003      	movs	r0, #3
 800157a:	e054      	b.n	8001626 <HAL_RCC_OscConfig+0x412>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800157c:	69e3      	ldr	r3, [r4, #28]
 800157e:	6a22      	ldr	r2, [r4, #32]
 8001580:	4313      	orrs	r3, r2
 8001582:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001584:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001588:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800158a:	0852      	lsrs	r2, r2, #1
 800158c:	3a01      	subs	r2, #1
 800158e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001592:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001594:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001598:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800159c:	4a29      	ldr	r2, [pc, #164]	; (8001644 <HAL_RCC_OscConfig+0x430>)
 800159e:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 80015a0:	6813      	ldr	r3, [r2, #0]
 80015a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015a6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80015a8:	f7ff fc8e 	bl	8000ec8 <HAL_GetTick>
 80015ac:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015ae:	4b25      	ldr	r3, [pc, #148]	; (8001644 <HAL_RCC_OscConfig+0x430>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80015b6:	d106      	bne.n	80015c6 <HAL_RCC_OscConfig+0x3b2>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015b8:	f7ff fc86 	bl	8000ec8 <HAL_GetTick>
 80015bc:	1b00      	subs	r0, r0, r4
 80015be:	2802      	cmp	r0, #2
 80015c0:	d9f5      	bls.n	80015ae <HAL_RCC_OscConfig+0x39a>
            return HAL_TIMEOUT;
 80015c2:	2003      	movs	r0, #3
 80015c4:	e02f      	b.n	8001626 <HAL_RCC_OscConfig+0x412>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 80015c6:	2000      	movs	r0, #0
 80015c8:	e02d      	b.n	8001626 <HAL_RCC_OscConfig+0x412>
 80015ca:	2000      	movs	r0, #0
 80015cc:	e02b      	b.n	8001626 <HAL_RCC_OscConfig+0x412>
      pll_config = RCC->PLLCFGR;
 80015ce:	4a1d      	ldr	r2, [pc, #116]	; (8001644 <HAL_RCC_OscConfig+0x430>)
 80015d0:	6852      	ldr	r2, [r2, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d029      	beq.n	800162a <HAL_RCC_OscConfig+0x416>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015d6:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80015da:	69e1      	ldr	r1, [r4, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015dc:	428b      	cmp	r3, r1
 80015de:	d126      	bne.n	800162e <HAL_RCC_OscConfig+0x41a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80015e0:	f002 033f 	and.w	r3, r2, #63	; 0x3f
 80015e4:	6a21      	ldr	r1, [r4, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015e6:	428b      	cmp	r3, r1
 80015e8:	d123      	bne.n	8001632 <HAL_RCC_OscConfig+0x41e>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80015ea:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80015ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80015f0:	4013      	ands	r3, r2
 80015f2:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 80015f6:	d11e      	bne.n	8001636 <HAL_RCC_OscConfig+0x422>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80015f8:	f402 3140 	and.w	r1, r2, #196608	; 0x30000
 80015fc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80015fe:	085b      	lsrs	r3, r3, #1
 8001600:	3b01      	subs	r3, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001602:	ebb1 4f03 	cmp.w	r1, r3, lsl #16
 8001606:	d118      	bne.n	800163a <HAL_RCC_OscConfig+0x426>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001608:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 800160c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800160e:	ebb2 6f03 	cmp.w	r2, r3, lsl #24
 8001612:	d114      	bne.n	800163e <HAL_RCC_OscConfig+0x42a>
  return HAL_OK;
 8001614:	2000      	movs	r0, #0
 8001616:	e006      	b.n	8001626 <HAL_RCC_OscConfig+0x412>
    return HAL_ERROR;
 8001618:	2001      	movs	r0, #1
}
 800161a:	4770      	bx	lr
        return HAL_ERROR;
 800161c:	2001      	movs	r0, #1
 800161e:	e002      	b.n	8001626 <HAL_RCC_OscConfig+0x412>
        return HAL_ERROR;
 8001620:	2001      	movs	r0, #1
 8001622:	e000      	b.n	8001626 <HAL_RCC_OscConfig+0x412>
  return HAL_OK;
 8001624:	2000      	movs	r0, #0
}
 8001626:	b002      	add	sp, #8
 8001628:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 800162a:	2001      	movs	r0, #1
 800162c:	e7fb      	b.n	8001626 <HAL_RCC_OscConfig+0x412>
 800162e:	2001      	movs	r0, #1
 8001630:	e7f9      	b.n	8001626 <HAL_RCC_OscConfig+0x412>
 8001632:	2001      	movs	r0, #1
 8001634:	e7f7      	b.n	8001626 <HAL_RCC_OscConfig+0x412>
 8001636:	2001      	movs	r0, #1
 8001638:	e7f5      	b.n	8001626 <HAL_RCC_OscConfig+0x412>
 800163a:	2001      	movs	r0, #1
 800163c:	e7f3      	b.n	8001626 <HAL_RCC_OscConfig+0x412>
 800163e:	2001      	movs	r0, #1
 8001640:	e7f1      	b.n	8001626 <HAL_RCC_OscConfig+0x412>
 8001642:	bf00      	nop
 8001644:	40023800 	.word	0x40023800

08001648 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800164a:	4b24      	ldr	r3, [pc, #144]	; (80016dc <HAL_RCC_GetSysClockFreq+0x94>)
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	f003 030c 	and.w	r3, r3, #12
 8001652:	2b04      	cmp	r3, #4
 8001654:	d03d      	beq.n	80016d2 <HAL_RCC_GetSysClockFreq+0x8a>
 8001656:	2b08      	cmp	r3, #8
 8001658:	d13d      	bne.n	80016d6 <HAL_RCC_GetSysClockFreq+0x8e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800165a:	4b20      	ldr	r3, [pc, #128]	; (80016dc <HAL_RCC_GetSysClockFreq+0x94>)
 800165c:	685a      	ldr	r2, [r3, #4]
 800165e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001668:	d012      	beq.n	8001690 <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800166a:	4b1c      	ldr	r3, [pc, #112]	; (80016dc <HAL_RCC_GetSysClockFreq+0x94>)
 800166c:	6859      	ldr	r1, [r3, #4]
 800166e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001672:	2300      	movs	r3, #0
 8001674:	481a      	ldr	r0, [pc, #104]	; (80016e0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001676:	fba1 0100 	umull	r0, r1, r1, r0
 800167a:	f7fe fe21 	bl	80002c0 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800167e:	4b17      	ldr	r3, [pc, #92]	; (80016dc <HAL_RCC_GetSysClockFreq+0x94>)
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001686:	3301      	adds	r3, #1
 8001688:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 800168a:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 800168e:	e023      	b.n	80016d8 <HAL_RCC_GetSysClockFreq+0x90>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001690:	4b12      	ldr	r3, [pc, #72]	; (80016dc <HAL_RCC_GetSysClockFreq+0x94>)
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8001698:	015c      	lsls	r4, r3, #5
 800169a:	2500      	movs	r5, #0
 800169c:	1ae4      	subs	r4, r4, r3
 800169e:	f165 0500 	sbc.w	r5, r5, #0
 80016a2:	01ae      	lsls	r6, r5, #6
 80016a4:	ea46 6694 	orr.w	r6, r6, r4, lsr #26
 80016a8:	01a7      	lsls	r7, r4, #6
 80016aa:	1b38      	subs	r0, r7, r4
 80016ac:	eb66 0105 	sbc.w	r1, r6, r5
 80016b0:	00cc      	lsls	r4, r1, #3
 80016b2:	ea44 7450 	orr.w	r4, r4, r0, lsr #29
 80016b6:	00c5      	lsls	r5, r0, #3
 80016b8:	18e8      	adds	r0, r5, r3
 80016ba:	f144 0100 	adc.w	r1, r4, #0
 80016be:	028b      	lsls	r3, r1, #10
 80016c0:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 80016c4:	0284      	lsls	r4, r0, #10
 80016c6:	4620      	mov	r0, r4
 80016c8:	4619      	mov	r1, r3
 80016ca:	2300      	movs	r3, #0
 80016cc:	f7fe fdf8 	bl	80002c0 <__aeabi_uldivmod>
 80016d0:	e7d5      	b.n	800167e <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 80016d2:	4803      	ldr	r0, [pc, #12]	; (80016e0 <HAL_RCC_GetSysClockFreq+0x98>)
 80016d4:	e000      	b.n	80016d8 <HAL_RCC_GetSysClockFreq+0x90>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80016d6:	4803      	ldr	r0, [pc, #12]	; (80016e4 <HAL_RCC_GetSysClockFreq+0x9c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80016d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80016da:	bf00      	nop
 80016dc:	40023800 	.word	0x40023800
 80016e0:	017d7840 	.word	0x017d7840
 80016e4:	00f42400 	.word	0x00f42400

080016e8 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80016e8:	2800      	cmp	r0, #0
 80016ea:	f000 80a0 	beq.w	800182e <HAL_RCC_ClockConfig+0x146>
{
 80016ee:	b570      	push	{r4, r5, r6, lr}
 80016f0:	460d      	mov	r5, r1
 80016f2:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80016f4:	4b52      	ldr	r3, [pc, #328]	; (8001840 <HAL_RCC_ClockConfig+0x158>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 030f 	and.w	r3, r3, #15
 80016fc:	428b      	cmp	r3, r1
 80016fe:	d20b      	bcs.n	8001718 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001700:	4a4f      	ldr	r2, [pc, #316]	; (8001840 <HAL_RCC_ClockConfig+0x158>)
 8001702:	6813      	ldr	r3, [r2, #0]
 8001704:	f023 030f 	bic.w	r3, r3, #15
 8001708:	430b      	orrs	r3, r1
 800170a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800170c:	6813      	ldr	r3, [r2, #0]
 800170e:	f003 030f 	and.w	r3, r3, #15
 8001712:	428b      	cmp	r3, r1
 8001714:	f040 808d 	bne.w	8001832 <HAL_RCC_ClockConfig+0x14a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001718:	6823      	ldr	r3, [r4, #0]
 800171a:	f013 0f02 	tst.w	r3, #2
 800171e:	d017      	beq.n	8001750 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001720:	f013 0f04 	tst.w	r3, #4
 8001724:	d004      	beq.n	8001730 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001726:	4a47      	ldr	r2, [pc, #284]	; (8001844 <HAL_RCC_ClockConfig+0x15c>)
 8001728:	6893      	ldr	r3, [r2, #8]
 800172a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800172e:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001730:	6823      	ldr	r3, [r4, #0]
 8001732:	f013 0f08 	tst.w	r3, #8
 8001736:	d004      	beq.n	8001742 <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001738:	4a42      	ldr	r2, [pc, #264]	; (8001844 <HAL_RCC_ClockConfig+0x15c>)
 800173a:	6893      	ldr	r3, [r2, #8]
 800173c:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001740:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001742:	4a40      	ldr	r2, [pc, #256]	; (8001844 <HAL_RCC_ClockConfig+0x15c>)
 8001744:	6893      	ldr	r3, [r2, #8]
 8001746:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800174a:	68a1      	ldr	r1, [r4, #8]
 800174c:	430b      	orrs	r3, r1
 800174e:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001750:	6823      	ldr	r3, [r4, #0]
 8001752:	f013 0f01 	tst.w	r3, #1
 8001756:	d031      	beq.n	80017bc <HAL_RCC_ClockConfig+0xd4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001758:	6863      	ldr	r3, [r4, #4]
 800175a:	2b01      	cmp	r3, #1
 800175c:	d020      	beq.n	80017a0 <HAL_RCC_ClockConfig+0xb8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800175e:	2b02      	cmp	r3, #2
 8001760:	d025      	beq.n	80017ae <HAL_RCC_ClockConfig+0xc6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001762:	4a38      	ldr	r2, [pc, #224]	; (8001844 <HAL_RCC_ClockConfig+0x15c>)
 8001764:	6812      	ldr	r2, [r2, #0]
 8001766:	f012 0f02 	tst.w	r2, #2
 800176a:	d064      	beq.n	8001836 <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800176c:	4935      	ldr	r1, [pc, #212]	; (8001844 <HAL_RCC_ClockConfig+0x15c>)
 800176e:	688a      	ldr	r2, [r1, #8]
 8001770:	f022 0203 	bic.w	r2, r2, #3
 8001774:	4313      	orrs	r3, r2
 8001776:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8001778:	f7ff fba6 	bl	8000ec8 <HAL_GetTick>
 800177c:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800177e:	4b31      	ldr	r3, [pc, #196]	; (8001844 <HAL_RCC_ClockConfig+0x15c>)
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	f003 030c 	and.w	r3, r3, #12
 8001786:	6862      	ldr	r2, [r4, #4]
 8001788:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800178c:	d016      	beq.n	80017bc <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800178e:	f7ff fb9b 	bl	8000ec8 <HAL_GetTick>
 8001792:	1b80      	subs	r0, r0, r6
 8001794:	f241 3388 	movw	r3, #5000	; 0x1388
 8001798:	4298      	cmp	r0, r3
 800179a:	d9f0      	bls.n	800177e <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 800179c:	2003      	movs	r0, #3
 800179e:	e045      	b.n	800182c <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017a0:	4a28      	ldr	r2, [pc, #160]	; (8001844 <HAL_RCC_ClockConfig+0x15c>)
 80017a2:	6812      	ldr	r2, [r2, #0]
 80017a4:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80017a8:	d1e0      	bne.n	800176c <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 80017aa:	2001      	movs	r0, #1
 80017ac:	e03e      	b.n	800182c <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017ae:	4a25      	ldr	r2, [pc, #148]	; (8001844 <HAL_RCC_ClockConfig+0x15c>)
 80017b0:	6812      	ldr	r2, [r2, #0]
 80017b2:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80017b6:	d1d9      	bne.n	800176c <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 80017b8:	2001      	movs	r0, #1
 80017ba:	e037      	b.n	800182c <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80017bc:	4b20      	ldr	r3, [pc, #128]	; (8001840 <HAL_RCC_ClockConfig+0x158>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 030f 	and.w	r3, r3, #15
 80017c4:	42ab      	cmp	r3, r5
 80017c6:	d90a      	bls.n	80017de <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017c8:	4a1d      	ldr	r2, [pc, #116]	; (8001840 <HAL_RCC_ClockConfig+0x158>)
 80017ca:	6813      	ldr	r3, [r2, #0]
 80017cc:	f023 030f 	bic.w	r3, r3, #15
 80017d0:	432b      	orrs	r3, r5
 80017d2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017d4:	6813      	ldr	r3, [r2, #0]
 80017d6:	f003 030f 	and.w	r3, r3, #15
 80017da:	42ab      	cmp	r3, r5
 80017dc:	d12d      	bne.n	800183a <HAL_RCC_ClockConfig+0x152>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017de:	6823      	ldr	r3, [r4, #0]
 80017e0:	f013 0f04 	tst.w	r3, #4
 80017e4:	d006      	beq.n	80017f4 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017e6:	4a17      	ldr	r2, [pc, #92]	; (8001844 <HAL_RCC_ClockConfig+0x15c>)
 80017e8:	6893      	ldr	r3, [r2, #8]
 80017ea:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80017ee:	68e1      	ldr	r1, [r4, #12]
 80017f0:	430b      	orrs	r3, r1
 80017f2:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017f4:	6823      	ldr	r3, [r4, #0]
 80017f6:	f013 0f08 	tst.w	r3, #8
 80017fa:	d007      	beq.n	800180c <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80017fc:	4a11      	ldr	r2, [pc, #68]	; (8001844 <HAL_RCC_ClockConfig+0x15c>)
 80017fe:	6893      	ldr	r3, [r2, #8]
 8001800:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001804:	6921      	ldr	r1, [r4, #16]
 8001806:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800180a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800180c:	f7ff ff1c 	bl	8001648 <HAL_RCC_GetSysClockFreq>
 8001810:	4b0c      	ldr	r3, [pc, #48]	; (8001844 <HAL_RCC_ClockConfig+0x15c>)
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001818:	4a0b      	ldr	r2, [pc, #44]	; (8001848 <HAL_RCC_ClockConfig+0x160>)
 800181a:	5cd3      	ldrb	r3, [r2, r3]
 800181c:	40d8      	lsrs	r0, r3
 800181e:	4b0b      	ldr	r3, [pc, #44]	; (800184c <HAL_RCC_ClockConfig+0x164>)
 8001820:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001822:	4b0b      	ldr	r3, [pc, #44]	; (8001850 <HAL_RCC_ClockConfig+0x168>)
 8001824:	6818      	ldr	r0, [r3, #0]
 8001826:	f7ff fb13 	bl	8000e50 <HAL_InitTick>
  return HAL_OK;
 800182a:	2000      	movs	r0, #0
}
 800182c:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800182e:	2001      	movs	r0, #1
}
 8001830:	4770      	bx	lr
      return HAL_ERROR;
 8001832:	2001      	movs	r0, #1
 8001834:	e7fa      	b.n	800182c <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 8001836:	2001      	movs	r0, #1
 8001838:	e7f8      	b.n	800182c <HAL_RCC_ClockConfig+0x144>
      return HAL_ERROR;
 800183a:	2001      	movs	r0, #1
 800183c:	e7f6      	b.n	800182c <HAL_RCC_ClockConfig+0x144>
 800183e:	bf00      	nop
 8001840:	40023c00 	.word	0x40023c00
 8001844:	40023800 	.word	0x40023800
 8001848:	0800495c 	.word	0x0800495c
 800184c:	20000000 	.word	0x20000000
 8001850:	20000008 	.word	0x20000008

08001854 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001854:	4b01      	ldr	r3, [pc, #4]	; (800185c <HAL_RCC_GetHCLKFreq+0x8>)
 8001856:	6818      	ldr	r0, [r3, #0]
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	20000000 	.word	0x20000000

08001860 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001860:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001862:	f7ff fff7 	bl	8001854 <HAL_RCC_GetHCLKFreq>
 8001866:	4b04      	ldr	r3, [pc, #16]	; (8001878 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800186e:	4a03      	ldr	r2, [pc, #12]	; (800187c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001870:	5cd3      	ldrb	r3, [r2, r3]
}
 8001872:	40d8      	lsrs	r0, r3
 8001874:	bd08      	pop	{r3, pc}
 8001876:	bf00      	nop
 8001878:	40023800 	.word	0x40023800
 800187c:	0800496c 	.word	0x0800496c

08001880 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001880:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001882:	f7ff ffe7 	bl	8001854 <HAL_RCC_GetHCLKFreq>
 8001886:	4b04      	ldr	r3, [pc, #16]	; (8001898 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800188e:	4a03      	ldr	r2, [pc, #12]	; (800189c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001890:	5cd3      	ldrb	r3, [r2, r3]
}
 8001892:	40d8      	lsrs	r0, r3
 8001894:	bd08      	pop	{r3, pc}
 8001896:	bf00      	nop
 8001898:	40023800 	.word	0x40023800
 800189c:	0800496c 	.word	0x0800496c

080018a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80018a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018a2:	b083      	sub	sp, #12
 80018a4:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80018a6:	6806      	ldr	r6, [r0, #0]
 80018a8:	f016 0601 	ands.w	r6, r6, #1
 80018ac:	d00d      	beq.n	80018ca <HAL_RCCEx_PeriphCLKConfig+0x2a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80018ae:	4baf      	ldr	r3, [pc, #700]	; (8001b6c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80018b0:	689a      	ldr	r2, [r3, #8]
 80018b2:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80018b6:	609a      	str	r2, [r3, #8]
 80018b8:	689a      	ldr	r2, [r3, #8]
 80018ba:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80018bc:	430a      	orrs	r2, r1
 80018be:	609a      	str	r2, [r3, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80018c0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	f000 812b 	beq.w	8001b1e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  uint32_t plli2sused = 0;
 80018c8:	2600      	movs	r6, #0
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80018ca:	6825      	ldr	r5, [r4, #0]
 80018cc:	f415 2500 	ands.w	r5, r5, #524288	; 0x80000
 80018d0:	d011      	beq.n	80018f6 <HAL_RCCEx_PeriphCLKConfig+0x56>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80018d2:	4aa6      	ldr	r2, [pc, #664]	; (8001b6c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80018d4:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80018d8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80018dc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80018de:	430b      	orrs	r3, r1
 80018e0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80018e4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80018e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80018ea:	f000 811a 	beq.w	8001b22 <HAL_RCCEx_PeriphCLKConfig+0x282>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	f000 8119 	beq.w	8001b26 <HAL_RCCEx_PeriphCLKConfig+0x286>
  uint32_t pllsaiused = 0;
 80018f4:	2500      	movs	r5, #0
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80018f6:	6823      	ldr	r3, [r4, #0]
 80018f8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80018fc:	d00f      	beq.n	800191e <HAL_RCCEx_PeriphCLKConfig+0x7e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80018fe:	4a9b      	ldr	r2, [pc, #620]	; (8001b6c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8001900:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001904:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001908:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800190a:	430b      	orrs	r3, r1
 800190c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001910:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001912:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001916:	f000 8108 	beq.w	8001b2a <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800191a:	b903      	cbnz	r3, 800191e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      pllsaiused = 1;
 800191c:	2501      	movs	r5, #1
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800191e:	6823      	ldr	r3, [r4, #0]
 8001920:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8001924:	d000      	beq.n	8001928 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
      plli2sused = 1;
 8001926:	2601      	movs	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001928:	f013 0f20 	tst.w	r3, #32
 800192c:	f040 80ff 	bne.w	8001b2e <HAL_RCCEx_PeriphCLKConfig+0x28e>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001930:	6823      	ldr	r3, [r4, #0]
 8001932:	f013 0f10 	tst.w	r3, #16
 8001936:	d00c      	beq.n	8001952 <HAL_RCCEx_PeriphCLKConfig+0xb2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001938:	4b8c      	ldr	r3, [pc, #560]	; (8001b6c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800193a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800193e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8001942:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8001946:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800194a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800194c:	430a      	orrs	r2, r1
 800194e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001952:	6823      	ldr	r3, [r4, #0]
 8001954:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8001958:	d008      	beq.n	800196c <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800195a:	4a84      	ldr	r2, [pc, #528]	; (8001b6c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800195c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001960:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001964:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8001966:	430b      	orrs	r3, r1
 8001968:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800196c:	6823      	ldr	r3, [r4, #0]
 800196e:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8001972:	d008      	beq.n	8001986 <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001974:	4a7d      	ldr	r2, [pc, #500]	; (8001b6c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8001976:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800197a:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 800197e:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8001980:	430b      	orrs	r3, r1
 8001982:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001986:	6823      	ldr	r3, [r4, #0]
 8001988:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800198c:	d008      	beq.n	80019a0 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800198e:	4a77      	ldr	r2, [pc, #476]	; (8001b6c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8001990:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001994:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001998:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800199a:	430b      	orrs	r3, r1
 800199c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80019a0:	6823      	ldr	r3, [r4, #0]
 80019a2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80019a6:	d008      	beq.n	80019ba <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80019a8:	4a70      	ldr	r2, [pc, #448]	; (8001b6c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80019aa:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80019ae:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80019b2:	6f21      	ldr	r1, [r4, #112]	; 0x70
 80019b4:	430b      	orrs	r3, r1
 80019b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80019ba:	6823      	ldr	r3, [r4, #0]
 80019bc:	f013 0f40 	tst.w	r3, #64	; 0x40
 80019c0:	d008      	beq.n	80019d4 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80019c2:	4a6a      	ldr	r2, [pc, #424]	; (8001b6c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80019c4:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80019c8:	f023 0303 	bic.w	r3, r3, #3
 80019cc:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80019ce:	430b      	orrs	r3, r1
 80019d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80019d4:	6823      	ldr	r3, [r4, #0]
 80019d6:	f013 0f80 	tst.w	r3, #128	; 0x80
 80019da:	d008      	beq.n	80019ee <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80019dc:	4a63      	ldr	r2, [pc, #396]	; (8001b6c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80019de:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80019e2:	f023 030c 	bic.w	r3, r3, #12
 80019e6:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80019e8:	430b      	orrs	r3, r1
 80019ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80019ee:	6823      	ldr	r3, [r4, #0]
 80019f0:	f413 7f80 	tst.w	r3, #256	; 0x100
 80019f4:	d008      	beq.n	8001a08 <HAL_RCCEx_PeriphCLKConfig+0x168>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80019f6:	4a5d      	ldr	r2, [pc, #372]	; (8001b6c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80019f8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80019fc:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001a00:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8001a02:	430b      	orrs	r3, r1
 8001a04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001a08:	6823      	ldr	r3, [r4, #0]
 8001a0a:	f413 7f00 	tst.w	r3, #512	; 0x200
 8001a0e:	d008      	beq.n	8001a22 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001a10:	4a56      	ldr	r2, [pc, #344]	; (8001b6c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8001a12:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001a16:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001a1a:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8001a1c:	430b      	orrs	r3, r1
 8001a1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001a22:	6823      	ldr	r3, [r4, #0]
 8001a24:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001a28:	d008      	beq.n	8001a3c <HAL_RCCEx_PeriphCLKConfig+0x19c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001a2a:	4a50      	ldr	r2, [pc, #320]	; (8001b6c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8001a2c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001a30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a34:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8001a36:	430b      	orrs	r3, r1
 8001a38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001a3c:	6823      	ldr	r3, [r4, #0]
 8001a3e:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8001a42:	d008      	beq.n	8001a56 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001a44:	4a49      	ldr	r2, [pc, #292]	; (8001b6c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8001a46:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001a4a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001a4e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8001a50:	430b      	orrs	r3, r1
 8001a52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001a56:	6823      	ldr	r3, [r4, #0]
 8001a58:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8001a5c:	d008      	beq.n	8001a70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001a5e:	4a43      	ldr	r2, [pc, #268]	; (8001b6c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8001a60:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001a64:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a68:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8001a6a:	430b      	orrs	r3, r1
 8001a6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001a70:	6823      	ldr	r3, [r4, #0]
 8001a72:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8001a76:	d008      	beq.n	8001a8a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001a78:	4a3c      	ldr	r2, [pc, #240]	; (8001b6c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8001a7a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001a7e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001a82:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8001a84:	430b      	orrs	r3, r1
 8001a86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001a8a:	6823      	ldr	r3, [r4, #0]
 8001a8c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001a90:	d008      	beq.n	8001aa4 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001a92:	4a36      	ldr	r2, [pc, #216]	; (8001b6c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8001a94:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001a98:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001a9c:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8001a9e:	430b      	orrs	r3, r1
 8001aa0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001aa4:	6823      	ldr	r3, [r4, #0]
 8001aa6:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8001aaa:	d00d      	beq.n	8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001aac:	4a2f      	ldr	r2, [pc, #188]	; (8001b6c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8001aae:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001ab2:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8001ab6:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8001ab8:	430b      	orrs	r3, r1
 8001aba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8001abe:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8001ac0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001ac4:	f000 809e 	beq.w	8001c04 <HAL_RCCEx_PeriphCLKConfig+0x364>
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8001ac8:	6823      	ldr	r3, [r4, #0]
 8001aca:	f013 0f08 	tst.w	r3, #8
 8001ace:	d000      	beq.n	8001ad2 <HAL_RCCEx_PeriphCLKConfig+0x232>
  {
    pllsaiused = 1;
 8001ad0:	2501      	movs	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001ad2:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8001ad6:	d008      	beq.n	8001aea <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001ad8:	4a24      	ldr	r2, [pc, #144]	; (8001b6c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8001ada:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001ade:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8001ae2:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8001ae4:	430b      	orrs	r3, r1
 8001ae6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8001aea:	6823      	ldr	r3, [r4, #0]
 8001aec:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8001af0:	d009      	beq.n	8001b06 <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001af2:	4a1e      	ldr	r2, [pc, #120]	; (8001b6c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8001af4:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001af8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001afc:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8001b00:	430b      	orrs	r3, r1
 8001b02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001b06:	2e00      	cmp	r6, #0
 8001b08:	d17e      	bne.n	8001c08 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8001b0a:	6823      	ldr	r3, [r4, #0]
 8001b0c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001b10:	d07a      	beq.n	8001c08 <HAL_RCCEx_PeriphCLKConfig+0x368>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8001b12:	2d01      	cmp	r5, #1
 8001b14:	f000 810b 	beq.w	8001d2e <HAL_RCCEx_PeriphCLKConfig+0x48e>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001b18:	2000      	movs	r0, #0
}
 8001b1a:	b003      	add	sp, #12
 8001b1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      plli2sused = 1;
 8001b1e:	2601      	movs	r6, #1
 8001b20:	e6d3      	b.n	80018ca <HAL_RCCEx_PeriphCLKConfig+0x2a>
      plli2sused = 1;
 8001b22:	2601      	movs	r6, #1
 8001b24:	e6e3      	b.n	80018ee <HAL_RCCEx_PeriphCLKConfig+0x4e>
      pllsaiused = 1;
 8001b26:	2501      	movs	r5, #1
 8001b28:	e6e5      	b.n	80018f6 <HAL_RCCEx_PeriphCLKConfig+0x56>
      plli2sused = 1;
 8001b2a:	2601      	movs	r6, #1
 8001b2c:	e6f5      	b.n	800191a <HAL_RCCEx_PeriphCLKConfig+0x7a>
    __HAL_RCC_PWR_CLK_ENABLE();
 8001b2e:	4b0f      	ldr	r3, [pc, #60]	; (8001b6c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8001b30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b32:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001b36:	641a      	str	r2, [r3, #64]	; 0x40
 8001b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b3e:	9301      	str	r3, [sp, #4]
 8001b40:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8001b42:	4a0b      	ldr	r2, [pc, #44]	; (8001b70 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8001b44:	6813      	ldr	r3, [r2, #0]
 8001b46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b4a:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001b4c:	f7ff f9bc 	bl	8000ec8 <HAL_GetTick>
 8001b50:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001b52:	4b07      	ldr	r3, [pc, #28]	; (8001b70 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001b5a:	d10b      	bne.n	8001b74 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b5c:	f7ff f9b4 	bl	8000ec8 <HAL_GetTick>
 8001b60:	1bc0      	subs	r0, r0, r7
 8001b62:	2864      	cmp	r0, #100	; 0x64
 8001b64:	d9f5      	bls.n	8001b52 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        return HAL_TIMEOUT;
 8001b66:	2003      	movs	r0, #3
 8001b68:	e7d7      	b.n	8001b1a <HAL_RCCEx_PeriphCLKConfig+0x27a>
 8001b6a:	bf00      	nop
 8001b6c:	40023800 	.word	0x40023800
 8001b70:	40007000 	.word	0x40007000
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001b74:	4bb3      	ldr	r3, [pc, #716]	; (8001e44 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8001b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001b78:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001b7c:	d015      	beq.n	8001baa <HAL_RCCEx_PeriphCLKConfig+0x30a>
 8001b7e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001b80:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d010      	beq.n	8001baa <HAL_RCCEx_PeriphCLKConfig+0x30a>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001b88:	4bae      	ldr	r3, [pc, #696]	; (8001e44 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8001b8a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001b8c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8001b90:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8001b92:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8001b96:	6719      	str	r1, [r3, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001b98:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8001b9a:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8001b9e:	6719      	str	r1, [r3, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8001ba0:	671a      	str	r2, [r3, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001ba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ba4:	f013 0f01 	tst.w	r3, #1
 8001ba8:	d112      	bne.n	8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x330>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001baa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001bac:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8001bb0:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8001bb4:	d01d      	beq.n	8001bf2 <HAL_RCCEx_PeriphCLKConfig+0x352>
 8001bb6:	4aa3      	ldr	r2, [pc, #652]	; (8001e44 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8001bb8:	6893      	ldr	r3, [r2, #8]
 8001bba:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001bbe:	6093      	str	r3, [r2, #8]
 8001bc0:	49a0      	ldr	r1, [pc, #640]	; (8001e44 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8001bc2:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8001bc4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001bc6:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	670b      	str	r3, [r1, #112]	; 0x70
 8001bce:	e6af      	b.n	8001930 <HAL_RCCEx_PeriphCLKConfig+0x90>
        tickstart = HAL_GetTick();
 8001bd0:	f7ff f97a 	bl	8000ec8 <HAL_GetTick>
 8001bd4:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bd6:	4b9b      	ldr	r3, [pc, #620]	; (8001e44 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8001bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bda:	f013 0f02 	tst.w	r3, #2
 8001bde:	d1e4      	bne.n	8001baa <HAL_RCCEx_PeriphCLKConfig+0x30a>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001be0:	f7ff f972 	bl	8000ec8 <HAL_GetTick>
 8001be4:	1bc0      	subs	r0, r0, r7
 8001be6:	f241 3388 	movw	r3, #5000	; 0x1388
 8001bea:	4298      	cmp	r0, r3
 8001bec:	d9f3      	bls.n	8001bd6 <HAL_RCCEx_PeriphCLKConfig+0x336>
            return HAL_TIMEOUT;
 8001bee:	2003      	movs	r0, #3
 8001bf0:	e793      	b.n	8001b1a <HAL_RCCEx_PeriphCLKConfig+0x27a>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001bf2:	4894      	ldr	r0, [pc, #592]	; (8001e44 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8001bf4:	6882      	ldr	r2, [r0, #8]
 8001bf6:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8001bfa:	4993      	ldr	r1, [pc, #588]	; (8001e48 <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 8001bfc:	4019      	ands	r1, r3
 8001bfe:	430a      	orrs	r2, r1
 8001c00:	6082      	str	r2, [r0, #8]
 8001c02:	e7dd      	b.n	8001bc0 <HAL_RCCEx_PeriphCLKConfig+0x320>
      pllsaiused = 1;
 8001c04:	2501      	movs	r5, #1
 8001c06:	e75f      	b.n	8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x228>
    __HAL_RCC_PLLI2S_DISABLE();
 8001c08:	4a8e      	ldr	r2, [pc, #568]	; (8001e44 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8001c0a:	6813      	ldr	r3, [r2, #0]
 8001c0c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001c10:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001c12:	f7ff f959 	bl	8000ec8 <HAL_GetTick>
 8001c16:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001c18:	4b8a      	ldr	r3, [pc, #552]	; (8001e44 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8001c20:	d006      	beq.n	8001c30 <HAL_RCCEx_PeriphCLKConfig+0x390>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001c22:	f7ff f951 	bl	8000ec8 <HAL_GetTick>
 8001c26:	1b80      	subs	r0, r0, r6
 8001c28:	2864      	cmp	r0, #100	; 0x64
 8001c2a:	d9f5      	bls.n	8001c18 <HAL_RCCEx_PeriphCLKConfig+0x378>
        return HAL_TIMEOUT;
 8001c2c:	2003      	movs	r0, #3
 8001c2e:	e774      	b.n	8001b1a <HAL_RCCEx_PeriphCLKConfig+0x27a>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8001c30:	6823      	ldr	r3, [r4, #0]
 8001c32:	f013 0f01 	tst.w	r3, #1
 8001c36:	d013      	beq.n	8001c60 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8001c38:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001c3a:	b98b      	cbnz	r3, 8001c60 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001c3c:	4a81      	ldr	r2, [pc, #516]	; (8001e44 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8001c3e:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001c42:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8001c46:	6860      	ldr	r0, [r4, #4]
 8001c48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c4c:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001c50:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8001c54:	430b      	orrs	r3, r1
 8001c56:	68a1      	ldr	r1, [r4, #8]
 8001c58:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8001c5c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001c60:	6823      	ldr	r3, [r4, #0]
 8001c62:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8001c66:	d003      	beq.n	8001c70 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8001c68:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001c6a:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8001c6e:	d006      	beq.n	8001c7e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8001c70:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8001c74:	d01e      	beq.n	8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x414>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001c76:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001c78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c7c:	d11a      	bne.n	8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x414>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001c7e:	4a71      	ldr	r2, [pc, #452]	; (8001e44 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8001c80:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001c84:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8001c88:	6860      	ldr	r0, [r4, #4]
 8001c8a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c8e:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001c92:	68e0      	ldr	r0, [r4, #12]
 8001c94:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8001c98:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8001c9c:	430b      	orrs	r3, r1
 8001c9e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001ca2:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001ca6:	f023 031f 	bic.w	r3, r3, #31
 8001caa:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001cac:	3901      	subs	r1, #1
 8001cae:	430b      	orrs	r3, r1
 8001cb0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001cb4:	6823      	ldr	r3, [r4, #0]
 8001cb6:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8001cba:	d011      	beq.n	8001ce0 <HAL_RCCEx_PeriphCLKConfig+0x440>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001cbc:	4a61      	ldr	r2, [pc, #388]	; (8001e44 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8001cbe:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001cc2:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8001cc6:	6866      	ldr	r6, [r4, #4]
 8001cc8:	6923      	ldr	r3, [r4, #16]
 8001cca:	041b      	lsls	r3, r3, #16
 8001ccc:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 8001cd0:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 8001cd4:	4303      	orrs	r3, r0
 8001cd6:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8001cda:	430b      	orrs	r3, r1
 8001cdc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001ce0:	6823      	ldr	r3, [r4, #0]
 8001ce2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001ce6:	d00d      	beq.n	8001d04 <HAL_RCCEx_PeriphCLKConfig+0x464>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001ce8:	6862      	ldr	r2, [r4, #4]
 8001cea:	6923      	ldr	r3, [r4, #16]
 8001cec:	041b      	lsls	r3, r3, #16
 8001cee:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001cf2:	68e2      	ldr	r2, [r4, #12]
 8001cf4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001cf8:	68a2      	ldr	r2, [r4, #8]
 8001cfa:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001cfe:	4a51      	ldr	r2, [pc, #324]	; (8001e44 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8001d00:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8001d04:	4a4f      	ldr	r2, [pc, #316]	; (8001e44 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8001d06:	6813      	ldr	r3, [r2, #0]
 8001d08:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001d0c:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001d0e:	f7ff f8db 	bl	8000ec8 <HAL_GetTick>
 8001d12:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001d14:	4b4b      	ldr	r3, [pc, #300]	; (8001e44 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8001d1c:	f47f aef9 	bne.w	8001b12 <HAL_RCCEx_PeriphCLKConfig+0x272>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001d20:	f7ff f8d2 	bl	8000ec8 <HAL_GetTick>
 8001d24:	1b80      	subs	r0, r0, r6
 8001d26:	2864      	cmp	r0, #100	; 0x64
 8001d28:	d9f4      	bls.n	8001d14 <HAL_RCCEx_PeriphCLKConfig+0x474>
        return HAL_TIMEOUT;
 8001d2a:	2003      	movs	r0, #3
 8001d2c:	e6f5      	b.n	8001b1a <HAL_RCCEx_PeriphCLKConfig+0x27a>
    __HAL_RCC_PLLSAI_DISABLE();
 8001d2e:	4a45      	ldr	r2, [pc, #276]	; (8001e44 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8001d30:	6813      	ldr	r3, [r2, #0]
 8001d32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d36:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001d38:	f7ff f8c6 	bl	8000ec8 <HAL_GetTick>
 8001d3c:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001d3e:	4b41      	ldr	r3, [pc, #260]	; (8001e44 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8001d46:	d006      	beq.n	8001d56 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001d48:	f7ff f8be 	bl	8000ec8 <HAL_GetTick>
 8001d4c:	1b40      	subs	r0, r0, r5
 8001d4e:	2864      	cmp	r0, #100	; 0x64
 8001d50:	d9f5      	bls.n	8001d3e <HAL_RCCEx_PeriphCLKConfig+0x49e>
        return HAL_TIMEOUT;
 8001d52:	2003      	movs	r0, #3
 8001d54:	e6e1      	b.n	8001b1a <HAL_RCCEx_PeriphCLKConfig+0x27a>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8001d56:	6823      	ldr	r3, [r4, #0]
 8001d58:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8001d5c:	d001      	beq.n	8001d62 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8001d5e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001d60:	b122      	cbz	r2, 8001d6c <HAL_RCCEx_PeriphCLKConfig+0x4cc>
 8001d62:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8001d66:	d01d      	beq.n	8001da4 <HAL_RCCEx_PeriphCLKConfig+0x504>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001d68:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001d6a:	b9db      	cbnz	r3, 8001da4 <HAL_RCCEx_PeriphCLKConfig+0x504>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001d6c:	4a35      	ldr	r2, [pc, #212]	; (8001e44 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8001d6e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001d72:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8001d76:	6960      	ldr	r0, [r4, #20]
 8001d78:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d7c:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001d80:	69a0      	ldr	r0, [r4, #24]
 8001d82:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8001d86:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8001d8a:	430b      	orrs	r3, r1
 8001d8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001d90:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001d94:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8001d98:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001d9a:	3901      	subs	r1, #1
 8001d9c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001da0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8001da4:	6823      	ldr	r3, [r4, #0]
 8001da6:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8001daa:	d003      	beq.n	8001db4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8001dac:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8001dae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001db2:	d031      	beq.n	8001e18 <HAL_RCCEx_PeriphCLKConfig+0x578>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8001db4:	6823      	ldr	r3, [r4, #0]
 8001db6:	f013 0f08 	tst.w	r3, #8
 8001dba:	d019      	beq.n	8001df0 <HAL_RCCEx_PeriphCLKConfig+0x550>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001dbc:	4a21      	ldr	r2, [pc, #132]	; (8001e44 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8001dbe:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001dc2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8001dc6:	6960      	ldr	r0, [r4, #20]
 8001dc8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001dcc:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001dd0:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8001dd4:	430b      	orrs	r3, r1
 8001dd6:	69e1      	ldr	r1, [r4, #28]
 8001dd8:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8001ddc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8001de0:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001de4:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001de8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001dea:	430b      	orrs	r3, r1
 8001dec:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 8001df0:	4a14      	ldr	r2, [pc, #80]	; (8001e44 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8001df2:	6813      	ldr	r3, [r2, #0]
 8001df4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001df8:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001dfa:	f7ff f865 	bl	8000ec8 <HAL_GetTick>
 8001dfe:	4604      	mov	r4, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001e00:	4b10      	ldr	r3, [pc, #64]	; (8001e44 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8001e08:	d119      	bne.n	8001e3e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001e0a:	f7ff f85d 	bl	8000ec8 <HAL_GetTick>
 8001e0e:	1b00      	subs	r0, r0, r4
 8001e10:	2864      	cmp	r0, #100	; 0x64
 8001e12:	d9f5      	bls.n	8001e00 <HAL_RCCEx_PeriphCLKConfig+0x560>
        return HAL_TIMEOUT;
 8001e14:	2003      	movs	r0, #3
 8001e16:	e680      	b.n	8001b1a <HAL_RCCEx_PeriphCLKConfig+0x27a>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001e18:	4a0a      	ldr	r2, [pc, #40]	; (8001e44 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8001e1a:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001e1e:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8001e22:	6965      	ldr	r5, [r4, #20]
 8001e24:	6a23      	ldr	r3, [r4, #32]
 8001e26:	041b      	lsls	r3, r3, #16
 8001e28:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8001e2c:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 8001e30:	4303      	orrs	r3, r0
 8001e32:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8001e36:	430b      	orrs	r3, r1
 8001e38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001e3c:	e7ba      	b.n	8001db4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  return HAL_OK;
 8001e3e:	2000      	movs	r0, #0
 8001e40:	e66b      	b.n	8001b1a <HAL_RCCEx_PeriphCLKConfig+0x27a>
 8001e42:	bf00      	nop
 8001e44:	40023800 	.word	0x40023800
 8001e48:	0ffffcff 	.word	0x0ffffcff

08001e4c <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8001e4c:	6802      	ldr	r2, [r0, #0]
 8001e4e:	6813      	ldr	r3, [r2, #0]
 8001e50:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001e54:	6013      	str	r3, [r2, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001e56:	2320      	movs	r3, #32
 8001e58:	6743      	str	r3, [r0, #116]	; 0x74
}
 8001e5a:	4770      	bx	lr

08001e5c <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001e5c:	6802      	ldr	r2, [r0, #0]
 8001e5e:	6813      	ldr	r3, [r2, #0]
 8001e60:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001e64:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e66:	6802      	ldr	r2, [r0, #0]
 8001e68:	6893      	ldr	r3, [r2, #8]
 8001e6a:	f023 0301 	bic.w	r3, r3, #1
 8001e6e:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001e70:	2320      	movs	r3, #32
 8001e72:	6783      	str	r3, [r0, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8001e74:	2300      	movs	r3, #0
 8001e76:	6603      	str	r3, [r0, #96]	; 0x60
}
 8001e78:	4770      	bx	lr
	...

08001e7c <HAL_UART_Transmit_DMA>:
{
 8001e7c:	4613      	mov	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8001e7e:	6f42      	ldr	r2, [r0, #116]	; 0x74
 8001e80:	2a20      	cmp	r2, #32
 8001e82:	d142      	bne.n	8001f0a <HAL_UART_Transmit_DMA+0x8e>
{
 8001e84:	b510      	push	{r4, lr}
 8001e86:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 8001e88:	fab3 f283 	clz	r2, r3
 8001e8c:	0952      	lsrs	r2, r2, #5
 8001e8e:	2900      	cmp	r1, #0
 8001e90:	bf08      	it	eq
 8001e92:	2201      	moveq	r2, #1
 8001e94:	2a00      	cmp	r2, #0
 8001e96:	d13a      	bne.n	8001f0e <HAL_UART_Transmit_DMA+0x92>
    __HAL_LOCK(huart);
 8001e98:	f890 2070 	ldrb.w	r2, [r0, #112]	; 0x70
 8001e9c:	2a01      	cmp	r2, #1
 8001e9e:	d038      	beq.n	8001f12 <HAL_UART_Transmit_DMA+0x96>
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	f880 2070 	strb.w	r2, [r0, #112]	; 0x70
    huart->pTxBuffPtr  = pData;
 8001ea6:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8001ea8:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
    huart->TxXferCount = Size;
 8001eac:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	67c2      	str	r2, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001eb4:	2221      	movs	r2, #33	; 0x21
 8001eb6:	6742      	str	r2, [r0, #116]	; 0x74
    if (huart->hdmatx != NULL)
 8001eb8:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8001eba:	b1d2      	cbz	r2, 8001ef2 <HAL_UART_Transmit_DMA+0x76>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8001ebc:	4916      	ldr	r1, [pc, #88]	; (8001f18 <HAL_UART_Transmit_DMA+0x9c>)
 8001ebe:	63d1      	str	r1, [r2, #60]	; 0x3c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8001ec0:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8001ec2:	4916      	ldr	r1, [pc, #88]	; (8001f1c <HAL_UART_Transmit_DMA+0xa0>)
 8001ec4:	6411      	str	r1, [r2, #64]	; 0x40
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8001ec6:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8001ec8:	4915      	ldr	r1, [pc, #84]	; (8001f20 <HAL_UART_Transmit_DMA+0xa4>)
 8001eca:	64d1      	str	r1, [r2, #76]	; 0x4c
      huart->hdmatx->XferAbortCallback = NULL;
 8001ecc:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8001ece:	2100      	movs	r1, #0
 8001ed0:	6511      	str	r1, [r2, #80]	; 0x50
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8001ed2:	6802      	ldr	r2, [r0, #0]
 8001ed4:	3228      	adds	r2, #40	; 0x28
 8001ed6:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8001ed8:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8001eda:	f7ff f86b 	bl	8000fb4 <HAL_DMA_Start_IT>
 8001ede:	b140      	cbz	r0, 8001ef2 <HAL_UART_Transmit_DMA+0x76>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8001ee0:	2310      	movs	r3, #16
 8001ee2:	67e3      	str	r3, [r4, #124]	; 0x7c
        __HAL_UNLOCK(huart);
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
        huart->gState = HAL_UART_STATE_READY;
 8001eea:	2320      	movs	r3, #32
 8001eec:	6763      	str	r3, [r4, #116]	; 0x74
        return HAL_ERROR;
 8001eee:	2001      	movs	r0, #1
 8001ef0:	e00a      	b.n	8001f08 <HAL_UART_Transmit_DMA+0x8c>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8001ef2:	6823      	ldr	r3, [r4, #0]
 8001ef4:	2240      	movs	r2, #64	; 0x40
 8001ef6:	621a      	str	r2, [r3, #32]
    __HAL_UNLOCK(huart);
 8001ef8:	2000      	movs	r0, #0
 8001efa:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001efe:	6822      	ldr	r2, [r4, #0]
 8001f00:	6893      	ldr	r3, [r2, #8]
 8001f02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f06:	6093      	str	r3, [r2, #8]
}
 8001f08:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8001f0a:	2002      	movs	r0, #2
}
 8001f0c:	4770      	bx	lr
      return HAL_ERROR;
 8001f0e:	2001      	movs	r0, #1
 8001f10:	e7fa      	b.n	8001f08 <HAL_UART_Transmit_DMA+0x8c>
    __HAL_LOCK(huart);
 8001f12:	2002      	movs	r0, #2
 8001f14:	e7f8      	b.n	8001f08 <HAL_UART_Transmit_DMA+0x8c>
 8001f16:	bf00      	nop
 8001f18:	08001f27 	.word	0x08001f27
 8001f1c:	08001f59 	.word	0x08001f59
 8001f20:	08001f65 	.word	0x08001f65

08001f24 <HAL_UART_TxCpltCallback>:
}
 8001f24:	4770      	bx	lr

08001f26 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8001f26:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8001f28:	6b83      	ldr	r3, [r0, #56]	; 0x38

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8001f2a:	69c2      	ldr	r2, [r0, #28]
 8001f2c:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8001f30:	d00d      	beq.n	8001f4e <UART_DMATransmitCplt+0x28>
  {
    huart->TxXferCount = 0U;
 8001f32:	2200      	movs	r2, #0
 8001f34:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001f38:	6819      	ldr	r1, [r3, #0]
 8001f3a:	688a      	ldr	r2, [r1, #8]
 8001f3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f40:	608a      	str	r2, [r1, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	6813      	ldr	r3, [r2, #0]
 8001f46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f4a:	6013      	str	r3, [r2, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8001f4c:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7ff ffe8 	bl	8001f24 <HAL_UART_TxCpltCallback>
}
 8001f54:	e7fa      	b.n	8001f4c <UART_DMATransmitCplt+0x26>

08001f56 <HAL_UART_TxHalfCpltCallback>:
}
 8001f56:	4770      	bx	lr

08001f58 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8001f58:	b508      	push	{r3, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8001f5a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8001f5c:	f7ff fffb 	bl	8001f56 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001f60:	bd08      	pop	{r3, pc}

08001f62 <HAL_UART_ErrorCallback>:
}
 8001f62:	4770      	bx	lr

08001f64 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8001f64:	b538      	push	{r3, r4, r5, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8001f66:	6b84      	ldr	r4, [r0, #56]	; 0x38

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8001f68:	6f62      	ldr	r2, [r4, #116]	; 0x74
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8001f6a:	6fa5      	ldr	r5, [r4, #120]	; 0x78

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8001f6c:	6823      	ldr	r3, [r4, #0]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001f74:	d001      	beq.n	8001f7a <UART_DMAError+0x16>
 8001f76:	2a21      	cmp	r2, #33	; 0x21
 8001f78:	d00e      	beq.n	8001f98 <UART_DMAError+0x34>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8001f7a:	6823      	ldr	r3, [r4, #0]
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001f82:	d001      	beq.n	8001f88 <UART_DMAError+0x24>
 8001f84:	2d22      	cmp	r5, #34	; 0x22
 8001f86:	d00e      	beq.n	8001fa6 <UART_DMAError+0x42>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8001f88:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8001f8a:	f043 0310 	orr.w	r3, r3, #16
 8001f8e:	67e3      	str	r3, [r4, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001f90:	4620      	mov	r0, r4
 8001f92:	f7ff ffe6 	bl	8001f62 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001f96:	bd38      	pop	{r3, r4, r5, pc}
    huart->TxXferCount = 0U;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8001f9e:	4620      	mov	r0, r4
 8001fa0:	f7ff ff54 	bl	8001e4c <UART_EndTxTransfer>
 8001fa4:	e7e9      	b.n	8001f7a <UART_DMAError+0x16>
    huart->RxXferCount = 0U;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8001fac:	4620      	mov	r0, r4
 8001fae:	f7ff ff55 	bl	8001e5c <UART_EndRxTransfer>
 8001fb2:	e7e9      	b.n	8001f88 <UART_DMAError+0x24>

08001fb4 <UART_SetConfig>:
{
 8001fb4:	b538      	push	{r3, r4, r5, lr}
 8001fb6:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001fb8:	6883      	ldr	r3, [r0, #8]
 8001fba:	6902      	ldr	r2, [r0, #16]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	6942      	ldr	r2, [r0, #20]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	69c2      	ldr	r2, [r0, #28]
 8001fc4:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001fc6:	6801      	ldr	r1, [r0, #0]
 8001fc8:	6808      	ldr	r0, [r1, #0]
 8001fca:	4a9f      	ldr	r2, [pc, #636]	; (8002248 <UART_SetConfig+0x294>)
 8001fcc:	4002      	ands	r2, r0
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001fd2:	6822      	ldr	r2, [r4, #0]
 8001fd4:	6853      	ldr	r3, [r2, #4]
 8001fd6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001fda:	68e1      	ldr	r1, [r4, #12]
 8001fdc:	430b      	orrs	r3, r1
 8001fde:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001fe0:	69a2      	ldr	r2, [r4, #24]
  tmpreg |= huart->Init.OneBitSampling;
 8001fe2:	6a23      	ldr	r3, [r4, #32]
 8001fe4:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001fe6:	6821      	ldr	r1, [r4, #0]
 8001fe8:	688b      	ldr	r3, [r1, #8]
 8001fea:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	608b      	str	r3, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001ff2:	6823      	ldr	r3, [r4, #0]
 8001ff4:	4a95      	ldr	r2, [pc, #596]	; (800224c <UART_SetConfig+0x298>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d019      	beq.n	800202e <UART_SetConfig+0x7a>
 8001ffa:	4a95      	ldr	r2, [pc, #596]	; (8002250 <UART_SetConfig+0x29c>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d029      	beq.n	8002054 <UART_SetConfig+0xa0>
 8002000:	4a94      	ldr	r2, [pc, #592]	; (8002254 <UART_SetConfig+0x2a0>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d03e      	beq.n	8002084 <UART_SetConfig+0xd0>
 8002006:	4a94      	ldr	r2, [pc, #592]	; (8002258 <UART_SetConfig+0x2a4>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d062      	beq.n	80020d2 <UART_SetConfig+0x11e>
 800200c:	4a93      	ldr	r2, [pc, #588]	; (800225c <UART_SetConfig+0x2a8>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d071      	beq.n	80020f6 <UART_SetConfig+0x142>
 8002012:	4a93      	ldr	r2, [pc, #588]	; (8002260 <UART_SetConfig+0x2ac>)
 8002014:	4293      	cmp	r3, r2
 8002016:	f000 8083 	beq.w	8002120 <UART_SetConfig+0x16c>
 800201a:	4a92      	ldr	r2, [pc, #584]	; (8002264 <UART_SetConfig+0x2b0>)
 800201c:	4293      	cmp	r3, r2
 800201e:	f000 8094 	beq.w	800214a <UART_SetConfig+0x196>
 8002022:	4a91      	ldr	r2, [pc, #580]	; (8002268 <UART_SetConfig+0x2b4>)
 8002024:	4293      	cmp	r3, r2
 8002026:	f000 80a5 	beq.w	8002174 <UART_SetConfig+0x1c0>
 800202a:	2510      	movs	r5, #16
 800202c:	e03a      	b.n	80020a4 <UART_SetConfig+0xf0>
 800202e:	4b8f      	ldr	r3, [pc, #572]	; (800226c <UART_SetConfig+0x2b8>)
 8002030:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002034:	f003 0303 	and.w	r3, r3, #3
 8002038:	2b03      	cmp	r3, #3
 800203a:	d809      	bhi.n	8002050 <UART_SetConfig+0x9c>
 800203c:	e8df f003 	tbb	[pc, r3]
 8002040:	06ae0402 	.word	0x06ae0402
 8002044:	2501      	movs	r5, #1
 8002046:	e02d      	b.n	80020a4 <UART_SetConfig+0xf0>
 8002048:	2504      	movs	r5, #4
 800204a:	e02b      	b.n	80020a4 <UART_SetConfig+0xf0>
 800204c:	2508      	movs	r5, #8
 800204e:	e029      	b.n	80020a4 <UART_SetConfig+0xf0>
 8002050:	2510      	movs	r5, #16
 8002052:	e027      	b.n	80020a4 <UART_SetConfig+0xf0>
 8002054:	4b85      	ldr	r3, [pc, #532]	; (800226c <UART_SetConfig+0x2b8>)
 8002056:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800205a:	f003 030c 	and.w	r3, r3, #12
 800205e:	2b0c      	cmp	r3, #12
 8002060:	d80e      	bhi.n	8002080 <UART_SetConfig+0xcc>
 8002062:	e8df f003 	tbb	[pc, r3]
 8002066:	0d07      	.short	0x0d07
 8002068:	0d090d0d 	.word	0x0d090d0d
 800206c:	0d9d0d0d 	.word	0x0d9d0d0d
 8002070:	0d0d      	.short	0x0d0d
 8002072:	0b          	.byte	0x0b
 8002073:	00          	.byte	0x00
 8002074:	2500      	movs	r5, #0
 8002076:	e015      	b.n	80020a4 <UART_SetConfig+0xf0>
 8002078:	2504      	movs	r5, #4
 800207a:	e013      	b.n	80020a4 <UART_SetConfig+0xf0>
 800207c:	2508      	movs	r5, #8
 800207e:	e011      	b.n	80020a4 <UART_SetConfig+0xf0>
 8002080:	2510      	movs	r5, #16
 8002082:	e00f      	b.n	80020a4 <UART_SetConfig+0xf0>
 8002084:	4b79      	ldr	r3, [pc, #484]	; (800226c <UART_SetConfig+0x2b8>)
 8002086:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800208a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800208e:	2b20      	cmp	r3, #32
 8002090:	f000 8088 	beq.w	80021a4 <UART_SetConfig+0x1f0>
 8002094:	d819      	bhi.n	80020ca <UART_SetConfig+0x116>
 8002096:	2b00      	cmp	r3, #0
 8002098:	f000 8086 	beq.w	80021a8 <UART_SetConfig+0x1f4>
 800209c:	2b10      	cmp	r3, #16
 800209e:	f040 8085 	bne.w	80021ac <UART_SetConfig+0x1f8>
 80020a2:	2504      	movs	r5, #4
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80020a4:	69e3      	ldr	r3, [r4, #28]
 80020a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020aa:	f000 80ab 	beq.w	8002204 <UART_SetConfig+0x250>
    switch (clocksource)
 80020ae:	2d08      	cmp	r5, #8
 80020b0:	f200 8140 	bhi.w	8002334 <UART_SetConfig+0x380>
 80020b4:	e8df f015 	tbh	[pc, r5, lsl #1]
 80020b8:	01180107 	.word	0x01180107
 80020bc:	013e0122 	.word	0x013e0122
 80020c0:	013e012b 	.word	0x013e012b
 80020c4:	013e013e 	.word	0x013e013e
 80020c8:	0135      	.short	0x0135
  UART_GETCLOCKSOURCE(huart, clocksource);
 80020ca:	2b30      	cmp	r3, #48	; 0x30
 80020cc:	d170      	bne.n	80021b0 <UART_SetConfig+0x1fc>
 80020ce:	2508      	movs	r5, #8
 80020d0:	e7e8      	b.n	80020a4 <UART_SetConfig+0xf0>
 80020d2:	4b66      	ldr	r3, [pc, #408]	; (800226c <UART_SetConfig+0x2b8>)
 80020d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020d8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80020dc:	2b80      	cmp	r3, #128	; 0x80
 80020de:	d069      	beq.n	80021b4 <UART_SetConfig+0x200>
 80020e0:	d805      	bhi.n	80020ee <UART_SetConfig+0x13a>
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d068      	beq.n	80021b8 <UART_SetConfig+0x204>
 80020e6:	2b40      	cmp	r3, #64	; 0x40
 80020e8:	d168      	bne.n	80021bc <UART_SetConfig+0x208>
 80020ea:	2504      	movs	r5, #4
 80020ec:	e7da      	b.n	80020a4 <UART_SetConfig+0xf0>
 80020ee:	2bc0      	cmp	r3, #192	; 0xc0
 80020f0:	d166      	bne.n	80021c0 <UART_SetConfig+0x20c>
 80020f2:	2508      	movs	r5, #8
 80020f4:	e7d6      	b.n	80020a4 <UART_SetConfig+0xf0>
 80020f6:	4b5d      	ldr	r3, [pc, #372]	; (800226c <UART_SetConfig+0x2b8>)
 80020f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002100:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002104:	d05e      	beq.n	80021c4 <UART_SetConfig+0x210>
 8002106:	d806      	bhi.n	8002116 <UART_SetConfig+0x162>
 8002108:	2b00      	cmp	r3, #0
 800210a:	d05d      	beq.n	80021c8 <UART_SetConfig+0x214>
 800210c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002110:	d15c      	bne.n	80021cc <UART_SetConfig+0x218>
 8002112:	2504      	movs	r5, #4
 8002114:	e7c6      	b.n	80020a4 <UART_SetConfig+0xf0>
 8002116:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800211a:	d159      	bne.n	80021d0 <UART_SetConfig+0x21c>
 800211c:	2508      	movs	r5, #8
 800211e:	e7c1      	b.n	80020a4 <UART_SetConfig+0xf0>
 8002120:	4b52      	ldr	r3, [pc, #328]	; (800226c <UART_SetConfig+0x2b8>)
 8002122:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002126:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800212a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800212e:	d051      	beq.n	80021d4 <UART_SetConfig+0x220>
 8002130:	d806      	bhi.n	8002140 <UART_SetConfig+0x18c>
 8002132:	2b00      	cmp	r3, #0
 8002134:	d050      	beq.n	80021d8 <UART_SetConfig+0x224>
 8002136:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800213a:	d14f      	bne.n	80021dc <UART_SetConfig+0x228>
 800213c:	2504      	movs	r5, #4
 800213e:	e7b1      	b.n	80020a4 <UART_SetConfig+0xf0>
 8002140:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002144:	d14c      	bne.n	80021e0 <UART_SetConfig+0x22c>
 8002146:	2508      	movs	r5, #8
 8002148:	e7ac      	b.n	80020a4 <UART_SetConfig+0xf0>
 800214a:	4b48      	ldr	r3, [pc, #288]	; (800226c <UART_SetConfig+0x2b8>)
 800214c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002150:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002154:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002158:	d044      	beq.n	80021e4 <UART_SetConfig+0x230>
 800215a:	d806      	bhi.n	800216a <UART_SetConfig+0x1b6>
 800215c:	2b00      	cmp	r3, #0
 800215e:	d043      	beq.n	80021e8 <UART_SetConfig+0x234>
 8002160:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002164:	d142      	bne.n	80021ec <UART_SetConfig+0x238>
 8002166:	2504      	movs	r5, #4
 8002168:	e79c      	b.n	80020a4 <UART_SetConfig+0xf0>
 800216a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800216e:	d13f      	bne.n	80021f0 <UART_SetConfig+0x23c>
 8002170:	2508      	movs	r5, #8
 8002172:	e797      	b.n	80020a4 <UART_SetConfig+0xf0>
 8002174:	4b3d      	ldr	r3, [pc, #244]	; (800226c <UART_SetConfig+0x2b8>)
 8002176:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800217a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800217e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002182:	d037      	beq.n	80021f4 <UART_SetConfig+0x240>
 8002184:	d805      	bhi.n	8002192 <UART_SetConfig+0x1de>
 8002186:	b3bb      	cbz	r3, 80021f8 <UART_SetConfig+0x244>
 8002188:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800218c:	d136      	bne.n	80021fc <UART_SetConfig+0x248>
 800218e:	2504      	movs	r5, #4
 8002190:	e788      	b.n	80020a4 <UART_SetConfig+0xf0>
 8002192:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002196:	d133      	bne.n	8002200 <UART_SetConfig+0x24c>
 8002198:	2508      	movs	r5, #8
 800219a:	e783      	b.n	80020a4 <UART_SetConfig+0xf0>
 800219c:	2502      	movs	r5, #2
 800219e:	e781      	b.n	80020a4 <UART_SetConfig+0xf0>
 80021a0:	2502      	movs	r5, #2
 80021a2:	e77f      	b.n	80020a4 <UART_SetConfig+0xf0>
 80021a4:	2502      	movs	r5, #2
 80021a6:	e77d      	b.n	80020a4 <UART_SetConfig+0xf0>
 80021a8:	2500      	movs	r5, #0
 80021aa:	e77b      	b.n	80020a4 <UART_SetConfig+0xf0>
 80021ac:	2510      	movs	r5, #16
 80021ae:	e779      	b.n	80020a4 <UART_SetConfig+0xf0>
 80021b0:	2510      	movs	r5, #16
 80021b2:	e777      	b.n	80020a4 <UART_SetConfig+0xf0>
 80021b4:	2502      	movs	r5, #2
 80021b6:	e775      	b.n	80020a4 <UART_SetConfig+0xf0>
 80021b8:	2500      	movs	r5, #0
 80021ba:	e773      	b.n	80020a4 <UART_SetConfig+0xf0>
 80021bc:	2510      	movs	r5, #16
 80021be:	e771      	b.n	80020a4 <UART_SetConfig+0xf0>
 80021c0:	2510      	movs	r5, #16
 80021c2:	e76f      	b.n	80020a4 <UART_SetConfig+0xf0>
 80021c4:	2502      	movs	r5, #2
 80021c6:	e76d      	b.n	80020a4 <UART_SetConfig+0xf0>
 80021c8:	2500      	movs	r5, #0
 80021ca:	e76b      	b.n	80020a4 <UART_SetConfig+0xf0>
 80021cc:	2510      	movs	r5, #16
 80021ce:	e769      	b.n	80020a4 <UART_SetConfig+0xf0>
 80021d0:	2510      	movs	r5, #16
 80021d2:	e767      	b.n	80020a4 <UART_SetConfig+0xf0>
 80021d4:	2502      	movs	r5, #2
 80021d6:	e765      	b.n	80020a4 <UART_SetConfig+0xf0>
 80021d8:	2501      	movs	r5, #1
 80021da:	e763      	b.n	80020a4 <UART_SetConfig+0xf0>
 80021dc:	2510      	movs	r5, #16
 80021de:	e761      	b.n	80020a4 <UART_SetConfig+0xf0>
 80021e0:	2510      	movs	r5, #16
 80021e2:	e75f      	b.n	80020a4 <UART_SetConfig+0xf0>
 80021e4:	2502      	movs	r5, #2
 80021e6:	e75d      	b.n	80020a4 <UART_SetConfig+0xf0>
 80021e8:	2500      	movs	r5, #0
 80021ea:	e75b      	b.n	80020a4 <UART_SetConfig+0xf0>
 80021ec:	2510      	movs	r5, #16
 80021ee:	e759      	b.n	80020a4 <UART_SetConfig+0xf0>
 80021f0:	2510      	movs	r5, #16
 80021f2:	e757      	b.n	80020a4 <UART_SetConfig+0xf0>
 80021f4:	2502      	movs	r5, #2
 80021f6:	e755      	b.n	80020a4 <UART_SetConfig+0xf0>
 80021f8:	2500      	movs	r5, #0
 80021fa:	e753      	b.n	80020a4 <UART_SetConfig+0xf0>
 80021fc:	2510      	movs	r5, #16
 80021fe:	e751      	b.n	80020a4 <UART_SetConfig+0xf0>
 8002200:	2510      	movs	r5, #16
 8002202:	e74f      	b.n	80020a4 <UART_SetConfig+0xf0>
    switch (clocksource)
 8002204:	2d08      	cmp	r5, #8
 8002206:	d85b      	bhi.n	80022c0 <UART_SetConfig+0x30c>
 8002208:	e8df f005 	tbb	[pc, r5]
 800220c:	5a3d3205 	.word	0x5a3d3205
 8002210:	5a5a5a46 	.word	0x5a5a5a46
 8002214:	51          	.byte	0x51
 8002215:	00          	.byte	0x00
        pclk = HAL_RCC_GetPCLK1Freq();
 8002216:	f7ff fb23 	bl	8001860 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800221a:	6862      	ldr	r2, [r4, #4]
 800221c:	0853      	lsrs	r3, r2, #1
 800221e:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8002222:	fbb3 f3f2 	udiv	r3, r3, r2
 8002226:	b29b      	uxth	r3, r3
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002228:	f1a3 0110 	sub.w	r1, r3, #16
 800222c:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8002230:	4291      	cmp	r1, r2
 8002232:	f200 8082 	bhi.w	800233a <UART_SetConfig+0x386>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002236:	b29a      	uxth	r2, r3
 8002238:	f022 020f 	bic.w	r2, r2, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800223c:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8002240:	4313      	orrs	r3, r2
      huart->Instance->BRR = brrtemp;
 8002242:	6822      	ldr	r2, [r4, #0]
 8002244:	60d3      	str	r3, [r2, #12]
 8002246:	e07b      	b.n	8002340 <UART_SetConfig+0x38c>
 8002248:	efff69f3 	.word	0xefff69f3
 800224c:	40011000 	.word	0x40011000
 8002250:	40004400 	.word	0x40004400
 8002254:	40004800 	.word	0x40004800
 8002258:	40004c00 	.word	0x40004c00
 800225c:	40005000 	.word	0x40005000
 8002260:	40011400 	.word	0x40011400
 8002264:	40007800 	.word	0x40007800
 8002268:	40007c00 	.word	0x40007c00
 800226c:	40023800 	.word	0x40023800
        pclk = HAL_RCC_GetPCLK2Freq();
 8002270:	f7ff fb06 	bl	8001880 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002274:	6862      	ldr	r2, [r4, #4]
 8002276:	0853      	lsrs	r3, r2, #1
 8002278:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800227c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002280:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002282:	2500      	movs	r5, #0
        break;
 8002284:	e7d0      	b.n	8002228 <UART_SetConfig+0x274>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002286:	6862      	ldr	r2, [r4, #4]
 8002288:	4b30      	ldr	r3, [pc, #192]	; (800234c <UART_SetConfig+0x398>)
 800228a:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800228e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002292:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002294:	2500      	movs	r5, #0
        break;
 8002296:	e7c7      	b.n	8002228 <UART_SetConfig+0x274>
        pclk = HAL_RCC_GetSysClockFreq();
 8002298:	f7ff f9d6 	bl	8001648 <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800229c:	6862      	ldr	r2, [r4, #4]
 800229e:	0853      	lsrs	r3, r2, #1
 80022a0:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80022a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80022a8:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80022aa:	2500      	movs	r5, #0
        break;
 80022ac:	e7bc      	b.n	8002228 <UART_SetConfig+0x274>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80022ae:	6862      	ldr	r2, [r4, #4]
 80022b0:	0853      	lsrs	r3, r2, #1
 80022b2:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80022b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80022ba:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80022bc:	2500      	movs	r5, #0
        break;
 80022be:	e7b3      	b.n	8002228 <UART_SetConfig+0x274>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80022c0:	2501      	movs	r5, #1
 80022c2:	2300      	movs	r3, #0
 80022c4:	e7b0      	b.n	8002228 <UART_SetConfig+0x274>
        pclk = HAL_RCC_GetPCLK1Freq();
 80022c6:	f7ff facb 	bl	8001860 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80022ca:	6862      	ldr	r2, [r4, #4]
 80022cc:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 80022d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80022d4:	b29b      	uxth	r3, r3
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80022d6:	f1a3 0110 	sub.w	r1, r3, #16
 80022da:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80022de:	4291      	cmp	r1, r2
 80022e0:	d82d      	bhi.n	800233e <UART_SetConfig+0x38a>
      huart->Instance->BRR = usartdiv;
 80022e2:	6822      	ldr	r2, [r4, #0]
 80022e4:	60d3      	str	r3, [r2, #12]
 80022e6:	e02b      	b.n	8002340 <UART_SetConfig+0x38c>
        pclk = HAL_RCC_GetPCLK2Freq();
 80022e8:	f7ff faca 	bl	8001880 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80022ec:	6862      	ldr	r2, [r4, #4]
 80022ee:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 80022f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80022f6:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80022f8:	2500      	movs	r5, #0
        break;
 80022fa:	e7ec      	b.n	80022d6 <UART_SetConfig+0x322>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80022fc:	6862      	ldr	r2, [r4, #4]
 80022fe:	4b14      	ldr	r3, [pc, #80]	; (8002350 <UART_SetConfig+0x39c>)
 8002300:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8002304:	fbb3 f3f2 	udiv	r3, r3, r2
 8002308:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800230a:	2500      	movs	r5, #0
        break;
 800230c:	e7e3      	b.n	80022d6 <UART_SetConfig+0x322>
        pclk = HAL_RCC_GetSysClockFreq();
 800230e:	f7ff f99b 	bl	8001648 <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002312:	6862      	ldr	r2, [r4, #4]
 8002314:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8002318:	fbb3 f3f2 	udiv	r3, r3, r2
 800231c:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800231e:	2500      	movs	r5, #0
        break;
 8002320:	e7d9      	b.n	80022d6 <UART_SetConfig+0x322>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002322:	6862      	ldr	r2, [r4, #4]
 8002324:	0853      	lsrs	r3, r2, #1
 8002326:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800232a:	fbb3 f3f2 	udiv	r3, r3, r2
 800232e:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002330:	2500      	movs	r5, #0
        break;
 8002332:	e7d0      	b.n	80022d6 <UART_SetConfig+0x322>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002334:	2501      	movs	r5, #1
 8002336:	2300      	movs	r3, #0
 8002338:	e7cd      	b.n	80022d6 <UART_SetConfig+0x322>
      ret = HAL_ERROR;
 800233a:	2501      	movs	r5, #1
 800233c:	e000      	b.n	8002340 <UART_SetConfig+0x38c>
      ret = HAL_ERROR;
 800233e:	2501      	movs	r5, #1
  huart->RxISR = NULL;
 8002340:	2300      	movs	r3, #0
 8002342:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8002344:	6663      	str	r3, [r4, #100]	; 0x64
}
 8002346:	4628      	mov	r0, r5
 8002348:	bd38      	pop	{r3, r4, r5, pc}
 800234a:	bf00      	nop
 800234c:	01e84800 	.word	0x01e84800
 8002350:	00f42400 	.word	0x00f42400

08002354 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002354:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002356:	f013 0f01 	tst.w	r3, #1
 800235a:	d006      	beq.n	800236a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800235c:	6802      	ldr	r2, [r0, #0]
 800235e:	6853      	ldr	r3, [r2, #4]
 8002360:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002364:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8002366:	430b      	orrs	r3, r1
 8002368:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800236a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800236c:	f013 0f02 	tst.w	r3, #2
 8002370:	d006      	beq.n	8002380 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002372:	6802      	ldr	r2, [r0, #0]
 8002374:	6853      	ldr	r3, [r2, #4]
 8002376:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800237a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800237c:	430b      	orrs	r3, r1
 800237e:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002380:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002382:	f013 0f04 	tst.w	r3, #4
 8002386:	d006      	beq.n	8002396 <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002388:	6802      	ldr	r2, [r0, #0]
 800238a:	6853      	ldr	r3, [r2, #4]
 800238c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002390:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8002392:	430b      	orrs	r3, r1
 8002394:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002396:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002398:	f013 0f08 	tst.w	r3, #8
 800239c:	d006      	beq.n	80023ac <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800239e:	6802      	ldr	r2, [r0, #0]
 80023a0:	6853      	ldr	r3, [r2, #4]
 80023a2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80023a6:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80023a8:	430b      	orrs	r3, r1
 80023aa:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80023ac:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80023ae:	f013 0f10 	tst.w	r3, #16
 80023b2:	d006      	beq.n	80023c2 <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80023b4:	6802      	ldr	r2, [r0, #0]
 80023b6:	6893      	ldr	r3, [r2, #8]
 80023b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80023bc:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80023be:	430b      	orrs	r3, r1
 80023c0:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80023c2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80023c4:	f013 0f20 	tst.w	r3, #32
 80023c8:	d006      	beq.n	80023d8 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80023ca:	6802      	ldr	r2, [r0, #0]
 80023cc:	6893      	ldr	r3, [r2, #8]
 80023ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80023d2:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80023d4:	430b      	orrs	r3, r1
 80023d6:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80023d8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80023da:	f013 0f40 	tst.w	r3, #64	; 0x40
 80023de:	d00a      	beq.n	80023f6 <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80023e0:	6802      	ldr	r2, [r0, #0]
 80023e2:	6853      	ldr	r3, [r2, #4]
 80023e4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80023e8:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80023ea:	430b      	orrs	r3, r1
 80023ec:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80023ee:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80023f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80023f4:	d00b      	beq.n	800240e <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80023f6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80023f8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80023fc:	d006      	beq.n	800240c <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80023fe:	6802      	ldr	r2, [r0, #0]
 8002400:	6853      	ldr	r3, [r2, #4]
 8002402:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002406:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002408:	430b      	orrs	r3, r1
 800240a:	6053      	str	r3, [r2, #4]
}
 800240c:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800240e:	6802      	ldr	r2, [r0, #0]
 8002410:	6853      	ldr	r3, [r2, #4]
 8002412:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002416:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8002418:	430b      	orrs	r3, r1
 800241a:	6053      	str	r3, [r2, #4]
 800241c:	e7eb      	b.n	80023f6 <UART_AdvFeatureConfig+0xa2>

0800241e <UART_WaitOnFlagUntilTimeout>:
{
 800241e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002422:	4605      	mov	r5, r0
 8002424:	460f      	mov	r7, r1
 8002426:	4616      	mov	r6, r2
 8002428:	4699      	mov	r9, r3
 800242a:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800242e:	682c      	ldr	r4, [r5, #0]
 8002430:	69e4      	ldr	r4, [r4, #28]
 8002432:	ea37 0304 	bics.w	r3, r7, r4
 8002436:	bf0c      	ite	eq
 8002438:	2401      	moveq	r4, #1
 800243a:	2400      	movne	r4, #0
 800243c:	42b4      	cmp	r4, r6
 800243e:	d13c      	bne.n	80024ba <UART_WaitOnFlagUntilTimeout+0x9c>
    if (Timeout != HAL_MAX_DELAY)
 8002440:	f1b8 3fff 	cmp.w	r8, #4294967295
 8002444:	d0f3      	beq.n	800242e <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002446:	f7fe fd3f 	bl	8000ec8 <HAL_GetTick>
 800244a:	eba0 0009 	sub.w	r0, r0, r9
 800244e:	4540      	cmp	r0, r8
 8002450:	d821      	bhi.n	8002496 <UART_WaitOnFlagUntilTimeout+0x78>
 8002452:	f1b8 0f00 	cmp.w	r8, #0
 8002456:	d01e      	beq.n	8002496 <UART_WaitOnFlagUntilTimeout+0x78>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002458:	682b      	ldr	r3, [r5, #0]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	f012 0f04 	tst.w	r2, #4
 8002460:	d0e5      	beq.n	800242e <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002462:	69da      	ldr	r2, [r3, #28]
 8002464:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8002468:	d0e1      	beq.n	800242e <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800246a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800246e:	621a      	str	r2, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002470:	682a      	ldr	r2, [r5, #0]
 8002472:	6813      	ldr	r3, [r2, #0]
 8002474:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002478:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800247a:	682a      	ldr	r2, [r5, #0]
 800247c:	6893      	ldr	r3, [r2, #8]
 800247e:	f023 0301 	bic.w	r3, r3, #1
 8002482:	6093      	str	r3, [r2, #8]
          huart->gState = HAL_UART_STATE_READY;
 8002484:	2320      	movs	r3, #32
 8002486:	676b      	str	r3, [r5, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8002488:	67ab      	str	r3, [r5, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800248a:	67eb      	str	r3, [r5, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 800248c:	2300      	movs	r3, #0
 800248e:	f885 3070 	strb.w	r3, [r5, #112]	; 0x70
          return HAL_TIMEOUT;
 8002492:	2003      	movs	r0, #3
 8002494:	e012      	b.n	80024bc <UART_WaitOnFlagUntilTimeout+0x9e>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002496:	682a      	ldr	r2, [r5, #0]
 8002498:	6813      	ldr	r3, [r2, #0]
 800249a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800249e:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024a0:	682a      	ldr	r2, [r5, #0]
 80024a2:	6893      	ldr	r3, [r2, #8]
 80024a4:	f023 0301 	bic.w	r3, r3, #1
 80024a8:	6093      	str	r3, [r2, #8]
        huart->gState = HAL_UART_STATE_READY;
 80024aa:	2320      	movs	r3, #32
 80024ac:	676b      	str	r3, [r5, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80024ae:	67ab      	str	r3, [r5, #120]	; 0x78
        __HAL_UNLOCK(huart);
 80024b0:	2300      	movs	r3, #0
 80024b2:	f885 3070 	strb.w	r3, [r5, #112]	; 0x70
        return HAL_TIMEOUT;
 80024b6:	2003      	movs	r0, #3
 80024b8:	e000      	b.n	80024bc <UART_WaitOnFlagUntilTimeout+0x9e>
  return HAL_OK;
 80024ba:	2000      	movs	r0, #0
}
 80024bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080024c0 <HAL_UART_Transmit>:
{
 80024c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80024c4:	b082      	sub	sp, #8
 80024c6:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80024c8:	6f43      	ldr	r3, [r0, #116]	; 0x74
 80024ca:	2b20      	cmp	r3, #32
 80024cc:	d159      	bne.n	8002582 <HAL_UART_Transmit+0xc2>
 80024ce:	4604      	mov	r4, r0
 80024d0:	460d      	mov	r5, r1
 80024d2:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 80024d4:	fab2 f382 	clz	r3, r2
 80024d8:	095b      	lsrs	r3, r3, #5
 80024da:	2900      	cmp	r1, #0
 80024dc:	bf08      	it	eq
 80024de:	2301      	moveq	r3, #1
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d152      	bne.n	800258a <HAL_UART_Transmit+0xca>
    __HAL_LOCK(huart);
 80024e4:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d050      	beq.n	800258e <HAL_UART_Transmit+0xce>
 80024ec:	2301      	movs	r3, #1
 80024ee:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024f2:	2300      	movs	r3, #0
 80024f4:	67c3      	str	r3, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80024f6:	2321      	movs	r3, #33	; 0x21
 80024f8:	6743      	str	r3, [r0, #116]	; 0x74
    tickstart = HAL_GetTick();
 80024fa:	f7fe fce5 	bl	8000ec8 <HAL_GetTick>
 80024fe:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 8002500:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 8002504:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002508:	68a3      	ldr	r3, [r4, #8]
 800250a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800250e:	d005      	beq.n	800251c <HAL_UART_Transmit+0x5c>
      pdata16bits = NULL;
 8002510:	f04f 0800 	mov.w	r8, #0
    __HAL_UNLOCK(huart);
 8002514:	2300      	movs	r3, #0
 8002516:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
    while (huart->TxXferCount > 0U)
 800251a:	e014      	b.n	8002546 <HAL_UART_Transmit+0x86>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800251c:	6923      	ldr	r3, [r4, #16]
 800251e:	b113      	cbz	r3, 8002526 <HAL_UART_Transmit+0x66>
      pdata16bits = NULL;
 8002520:	f04f 0800 	mov.w	r8, #0
 8002524:	e7f6      	b.n	8002514 <HAL_UART_Transmit+0x54>
      pdata16bits = (uint16_t *) pData;
 8002526:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8002528:	2500      	movs	r5, #0
 800252a:	e7f3      	b.n	8002514 <HAL_UART_Transmit+0x54>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800252c:	f838 3b02 	ldrh.w	r3, [r8], #2
 8002530:	6822      	ldr	r2, [r4, #0]
 8002532:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002536:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8002538:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 800253c:	b292      	uxth	r2, r2
 800253e:	3a01      	subs	r2, #1
 8002540:	b292      	uxth	r2, r2
 8002542:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002546:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 800254a:	b29b      	uxth	r3, r3
 800254c:	b173      	cbz	r3, 800256c <HAL_UART_Transmit+0xac>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800254e:	9600      	str	r6, [sp, #0]
 8002550:	463b      	mov	r3, r7
 8002552:	2200      	movs	r2, #0
 8002554:	2180      	movs	r1, #128	; 0x80
 8002556:	4620      	mov	r0, r4
 8002558:	f7ff ff61 	bl	800241e <UART_WaitOnFlagUntilTimeout>
 800255c:	b9c8      	cbnz	r0, 8002592 <HAL_UART_Transmit+0xd2>
      if (pdata8bits == NULL)
 800255e:	2d00      	cmp	r5, #0
 8002560:	d0e4      	beq.n	800252c <HAL_UART_Transmit+0x6c>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002562:	f815 2b01 	ldrb.w	r2, [r5], #1
 8002566:	6823      	ldr	r3, [r4, #0]
 8002568:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800256a:	e7e5      	b.n	8002538 <HAL_UART_Transmit+0x78>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800256c:	9600      	str	r6, [sp, #0]
 800256e:	463b      	mov	r3, r7
 8002570:	2200      	movs	r2, #0
 8002572:	2140      	movs	r1, #64	; 0x40
 8002574:	4620      	mov	r0, r4
 8002576:	f7ff ff52 	bl	800241e <UART_WaitOnFlagUntilTimeout>
 800257a:	b960      	cbnz	r0, 8002596 <HAL_UART_Transmit+0xd6>
    huart->gState = HAL_UART_STATE_READY;
 800257c:	2320      	movs	r3, #32
 800257e:	6763      	str	r3, [r4, #116]	; 0x74
    return HAL_OK;
 8002580:	e000      	b.n	8002584 <HAL_UART_Transmit+0xc4>
    return HAL_BUSY;
 8002582:	2002      	movs	r0, #2
}
 8002584:	b002      	add	sp, #8
 8002586:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 800258a:	2001      	movs	r0, #1
 800258c:	e7fa      	b.n	8002584 <HAL_UART_Transmit+0xc4>
    __HAL_LOCK(huart);
 800258e:	2002      	movs	r0, #2
 8002590:	e7f8      	b.n	8002584 <HAL_UART_Transmit+0xc4>
        return HAL_TIMEOUT;
 8002592:	2003      	movs	r0, #3
 8002594:	e7f6      	b.n	8002584 <HAL_UART_Transmit+0xc4>
      return HAL_TIMEOUT;
 8002596:	2003      	movs	r0, #3
 8002598:	e7f4      	b.n	8002584 <HAL_UART_Transmit+0xc4>

0800259a <UART_CheckIdleState>:
{
 800259a:	b510      	push	{r4, lr}
 800259c:	b082      	sub	sp, #8
 800259e:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025a0:	2300      	movs	r3, #0
 80025a2:	67c3      	str	r3, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 80025a4:	f7fe fc90 	bl	8000ec8 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80025a8:	6823      	ldr	r3, [r4, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f013 0f08 	tst.w	r3, #8
 80025b0:	d107      	bne.n	80025c2 <UART_CheckIdleState+0x28>
  huart->gState = HAL_UART_STATE_READY;
 80025b2:	2320      	movs	r3, #32
 80025b4:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80025b6:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 80025b8:	2000      	movs	r0, #0
 80025ba:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
}
 80025be:	b002      	add	sp, #8
 80025c0:	bd10      	pop	{r4, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80025c2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80025c6:	9300      	str	r3, [sp, #0]
 80025c8:	4603      	mov	r3, r0
 80025ca:	2200      	movs	r2, #0
 80025cc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80025d0:	4620      	mov	r0, r4
 80025d2:	f7ff ff24 	bl	800241e <UART_WaitOnFlagUntilTimeout>
 80025d6:	2800      	cmp	r0, #0
 80025d8:	d0eb      	beq.n	80025b2 <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 80025da:	2003      	movs	r0, #3
 80025dc:	e7ef      	b.n	80025be <UART_CheckIdleState+0x24>

080025de <HAL_UART_Init>:
  if (huart == NULL)
 80025de:	b368      	cbz	r0, 800263c <HAL_UART_Init+0x5e>
{
 80025e0:	b510      	push	{r4, lr}
 80025e2:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80025e4:	6f43      	ldr	r3, [r0, #116]	; 0x74
 80025e6:	b303      	cbz	r3, 800262a <HAL_UART_Init+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 80025e8:	2324      	movs	r3, #36	; 0x24
 80025ea:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 80025ec:	6822      	ldr	r2, [r4, #0]
 80025ee:	6813      	ldr	r3, [r2, #0]
 80025f0:	f023 0301 	bic.w	r3, r3, #1
 80025f4:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80025f6:	4620      	mov	r0, r4
 80025f8:	f7ff fcdc 	bl	8001fb4 <UART_SetConfig>
 80025fc:	2801      	cmp	r0, #1
 80025fe:	d013      	beq.n	8002628 <HAL_UART_Init+0x4a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002600:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002602:	b9bb      	cbnz	r3, 8002634 <HAL_UART_Init+0x56>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002604:	6822      	ldr	r2, [r4, #0]
 8002606:	6853      	ldr	r3, [r2, #4]
 8002608:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800260c:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800260e:	6822      	ldr	r2, [r4, #0]
 8002610:	6893      	ldr	r3, [r2, #8]
 8002612:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8002616:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8002618:	6822      	ldr	r2, [r4, #0]
 800261a:	6813      	ldr	r3, [r2, #0]
 800261c:	f043 0301 	orr.w	r3, r3, #1
 8002620:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8002622:	4620      	mov	r0, r4
 8002624:	f7ff ffb9 	bl	800259a <UART_CheckIdleState>
}
 8002628:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800262a:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 800262e:	f7fe fb9b 	bl	8000d68 <HAL_UART_MspInit>
 8002632:	e7d9      	b.n	80025e8 <HAL_UART_Init+0xa>
    UART_AdvFeatureConfig(huart);
 8002634:	4620      	mov	r0, r4
 8002636:	f7ff fe8d 	bl	8002354 <UART_AdvFeatureConfig>
 800263a:	e7e3      	b.n	8002604 <HAL_UART_Init+0x26>
    return HAL_ERROR;
 800263c:	2001      	movs	r0, #1
}
 800263e:	4770      	bx	lr

08002640 <_ZN14StateMachine02D1Ev>:
    _currentState = STATE_INITIAL;

    Trace::out("Called constructor of StateMachine02 object '%d' (obj%02d)", id, id);
}

StateMachine02::~StateMachine02()
 8002640:	b510      	push	{r4, lr}
 8002642:	4604      	mov	r4, r0
 8002644:	4b05      	ldr	r3, [pc, #20]	; (800265c <_ZN14StateMachine02D1Ev+0x1c>)
 8002646:	6003      	str	r3, [r0, #0]
{
    Trace::out("obj%02d: Called destructor", id);
 8002648:	6901      	ldr	r1, [r0, #16]
 800264a:	4805      	ldr	r0, [pc, #20]	; (8002660 <_ZN14StateMachine02D1Ev+0x20>)
 800264c:	f000 f958 	bl	8002900 <_ZN5Trace3outEPKcz>
StateMachine02::~StateMachine02()
 8002650:	4620      	mov	r0, r4
 8002652:	f000 fa8d 	bl	8002b70 <_ZN10XFBehaviorD1Ev>
}
 8002656:	4620      	mov	r0, r4
 8002658:	bd10      	pop	{r4, pc}
 800265a:	bf00      	nop
 800265c:	0800497c 	.word	0x0800497c
 8002660:	08004aa4 	.word	0x08004aa4

08002664 <_ZN14StateMachine02D0Ev>:
StateMachine02::~StateMachine02()
 8002664:	b510      	push	{r4, lr}
 8002666:	4604      	mov	r4, r0
}
 8002668:	f7ff ffea 	bl	8002640 <_ZN14StateMachine02D1Ev>
 800266c:	2118      	movs	r1, #24
 800266e:	4620      	mov	r0, r4
 8002670:	f000 fe92 	bl	8003398 <_ZdlPvj>
 8002674:	4620      	mov	r0, r4
 8002676:	bd10      	pop	{r4, pc}

08002678 <_ZN14StateMachine0212processEventEv>:

/**
 * Implements state machine behavior.
 */
XFEventStatus StateMachine02::processEvent()
{
 8002678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800267a:	4604      	mov	r4, r0
    eEventStatus eventStatus = XFEventStatus::Unknown;

    switch (_currentState)
 800267c:	7b05      	ldrb	r5, [r0, #12]
 800267e:	1e6b      	subs	r3, r5, #1
 8002680:	2b03      	cmp	r3, #3
 8002682:	d86f      	bhi.n	8002764 <_ZN14StateMachine0212processEventEv+0xec>
 8002684:	e8df f003 	tbb	[pc, r3]
 8002688:	60381d02 	.word	0x60381d02
    {
    case STATE_INITIAL:
        {
            if (getCurrentEvent()->getEventType() == XFEvent::Initial)
 800268c:	f000 fa71 	bl	8002b72 <_ZNK10XFBehavior15getCurrentEventEv>

    /** \brief Returns the type of the event.
     *
     * Can be used to distinguish between an event or a timeout.
     */
    inline XFEventType getEventType() const { return eventType_; }
 8002690:	f990 3004 	ldrsb.w	r3, [r0, #4]
 8002694:	2b01      	cmp	r3, #1
 8002696:	d002      	beq.n	800269e <_ZN14StateMachine0212processEventEv+0x26>
    eEventStatus eventStatus = XFEventStatus::Unknown;
 8002698:	2500      	movs	r5, #0
    default:
        break;
    }

    return eventStatus;
}
 800269a:	4628      	mov	r0, r5
 800269c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                    counter = 5;
 800269e:	2305      	movs	r3, #5
 80026a0:	6163      	str	r3, [r4, #20]
                GEN(XFDefaultTransition());
 80026a2:	6823      	ldr	r3, [r4, #0]
 80026a4:	68df      	ldr	r7, [r3, #12]
 80026a6:	2010      	movs	r0, #16
 80026a8:	f000 fe87 	bl	80033ba <_Znwj>
 80026ac:	4606      	mov	r6, r0
 80026ae:	2100      	movs	r1, #0
 80026b0:	f000 fa84 	bl	8002bbc <_ZN19XFDefaultTransitionC1EPN9interface10XFBehaviorE>
 80026b4:	2200      	movs	r2, #0
 80026b6:	4631      	mov	r1, r6
 80026b8:	4620      	mov	r0, r4
 80026ba:	47b8      	blx	r7
                _currentState = STATE_PRINT_COUNT;
 80026bc:	2302      	movs	r3, #2
 80026be:	7323      	strb	r3, [r4, #12]
                eventStatus = XFEventStatus::Consumed;
 80026c0:	e7eb      	b.n	800269a <_ZN14StateMachine0212processEventEv+0x22>
            if (getCurrentEvent()->getEventType() == XFEvent::DefaultTransition)
 80026c2:	f000 fa56 	bl	8002b72 <_ZNK10XFBehavior15getCurrentEventEv>
 80026c6:	f990 3004 	ldrsb.w	r3, [r0, #4]
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d001      	beq.n	80026d2 <_ZN14StateMachine0212processEventEv+0x5a>
    eEventStatus eventStatus = XFEventStatus::Unknown;
 80026ce:	2500      	movs	r5, #0
 80026d0:	e7e3      	b.n	800269a <_ZN14StateMachine0212processEventEv+0x22>
                    Trace::out("obj%02d: counter %d", id, counter);
 80026d2:	6962      	ldr	r2, [r4, #20]
 80026d4:	6921      	ldr	r1, [r4, #16]
 80026d6:	4824      	ldr	r0, [pc, #144]	; (8002768 <_ZN14StateMachine0212processEventEv+0xf0>)
 80026d8:	f000 f912 	bl	8002900 <_ZN5Trace3outEPKcz>
     *
     * Will work only if the current event is of type IXFEvent::Timeout.
     */
    const XFTimeout * getCurrentTimeout();

    inline void scheduleTimeout(int timeoutId, int interval) { getDispatcher()->scheduleTimeout(timeoutId, interval, this); }	///< @brief Schedules a timeout for this state machine.
 80026dc:	4620      	mov	r0, r4
 80026de:	f000 fa4a 	bl	8002b76 <_ZN10XFBehavior13getDispatcherEv>
 80026e2:	6803      	ldr	r3, [r0, #0]
 80026e4:	68dd      	ldr	r5, [r3, #12]
 80026e6:	4623      	mov	r3, r4
 80026e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80026ec:	2101      	movs	r1, #1
 80026ee:	47a8      	blx	r5
                _currentState = STATE_CONDITION_01;
 80026f0:	2303      	movs	r3, #3
 80026f2:	7323      	strb	r3, [r4, #12]
                eventStatus = XFEventStatus::Consumed;
 80026f4:	2501      	movs	r5, #1
 80026f6:	e7d0      	b.n	800269a <_ZN14StateMachine0212processEventEv+0x22>
            if (getCurrentEvent()->getEventType() == XFEvent::Timeout &&
 80026f8:	f000 fa3b 	bl	8002b72 <_ZNK10XFBehavior15getCurrentEventEv>
 80026fc:	f990 3004 	ldrsb.w	r3, [r0, #4]
 8002700:	2b04      	cmp	r3, #4
 8002702:	d001      	beq.n	8002708 <_ZN14StateMachine0212processEventEv+0x90>
    eEventStatus eventStatus = XFEventStatus::Unknown;
 8002704:	2500      	movs	r5, #0
 8002706:	e7c8      	b.n	800269a <_ZN14StateMachine0212processEventEv+0x22>
                getCurrentTimeout()->getId() == Timeout_PRINT_COUNT_id)
 8002708:	4620      	mov	r0, r4
 800270a:	f000 fa38 	bl	8002b7e <_ZN10XFBehavior17getCurrentTimeoutEv>
    /** \brief Sets pointer to behavioral class (see #pBehavior_).
     * Sets the behavior in which the event should be executed.
     */
    inline void setBehavior(interface::XFBehavior * pBehavior) { pBehavior_ = pBehavior; }

    inline int getId() const { return id_; }		///< Returns #id_ identifying the event in the behaviors context.
 800270e:	6883      	ldr	r3, [r0, #8]
            if (getCurrentEvent()->getEventType() == XFEvent::Timeout &&
 8002710:	2b01      	cmp	r3, #1
 8002712:	d001      	beq.n	8002718 <_ZN14StateMachine0212processEventEv+0xa0>
    eEventStatus eventStatus = XFEventStatus::Unknown;
 8002714:	2500      	movs	r5, #0
 8002716:	e7c0      	b.n	800269a <_ZN14StateMachine0212processEventEv+0x22>
                    counter--;
 8002718:	6963      	ldr	r3, [r4, #20]
 800271a:	3b01      	subs	r3, #1
 800271c:	6163      	str	r3, [r4, #20]
                if (counter)
 800271e:	b183      	cbz	r3, 8002742 <_ZN14StateMachine0212processEventEv+0xca>
                    _currentState = STATE_PRINT_COUNT;
 8002720:	2302      	movs	r3, #2
 8002722:	7323      	strb	r3, [r4, #12]
                GEN(XFDefaultTransition());
 8002724:	6823      	ldr	r3, [r4, #0]
 8002726:	68de      	ldr	r6, [r3, #12]
 8002728:	2010      	movs	r0, #16
 800272a:	f000 fe46 	bl	80033ba <_Znwj>
 800272e:	4605      	mov	r5, r0
 8002730:	2100      	movs	r1, #0
 8002732:	f000 fa43 	bl	8002bbc <_ZN19XFDefaultTransitionC1EPN9interface10XFBehaviorE>
 8002736:	2200      	movs	r2, #0
 8002738:	4629      	mov	r1, r5
 800273a:	4620      	mov	r0, r4
 800273c:	47b0      	blx	r6
                eventStatus = XFEventStatus::Consumed;
 800273e:	2501      	movs	r5, #1
 8002740:	e7ab      	b.n	800269a <_ZN14StateMachine0212processEventEv+0x22>
                    _currentState = STATE_TERMINATION_01;
 8002742:	2304      	movs	r3, #4
 8002744:	7323      	strb	r3, [r4, #12]
 8002746:	e7ed      	b.n	8002724 <_ZN14StateMachine0212processEventEv+0xac>
            if (getCurrentEvent()->getEventType() == XFEvent::DefaultTransition)
 8002748:	f000 fa13 	bl	8002b72 <_ZNK10XFBehavior15getCurrentEventEv>
    inline XFEventType getEventType() const { return eventType_; }
 800274c:	f990 3004 	ldrsb.w	r3, [r0, #4]
 8002750:	2b02      	cmp	r3, #2
 8002752:	d001      	beq.n	8002758 <_ZN14StateMachine0212processEventEv+0xe0>
    eEventStatus eventStatus = XFEventStatus::Unknown;
 8002754:	2500      	movs	r5, #0
 8002756:	e7a0      	b.n	800269a <_ZN14StateMachine0212processEventEv+0x22>
                Trace::out("obj%02d: Terminating State Machine", id);
 8002758:	6921      	ldr	r1, [r4, #16]
 800275a:	4804      	ldr	r0, [pc, #16]	; (800276c <_ZN14StateMachine0212processEventEv+0xf4>)
 800275c:	f000 f8d0 	bl	8002900 <_ZN5Trace3outEPKcz>
                eventStatus = XFEventStatus::Terminate;
 8002760:	2508      	movs	r5, #8
 8002762:	e79a      	b.n	800269a <_ZN14StateMachine0212processEventEv+0x22>
    switch (_currentState)
 8002764:	2500      	movs	r5, #0
 8002766:	e798      	b.n	800269a <_ZN14StateMachine0212processEventEv+0x22>
 8002768:	08004ac0 	.word	0x08004ac0
 800276c:	08004ad4 	.word	0x08004ad4

08002770 <_ZN14StateMachine02C1Ev>:
StateMachine02::StateMachine02() :
 8002770:	b510      	push	{r4, lr}
 8002772:	4604      	mov	r4, r0
    counter(0)
 8002774:	f000 f9f6 	bl	8002b64 <_ZN10XFBehaviorC1Ev>
 8002778:	4b08      	ldr	r3, [pc, #32]	; (800279c <_ZN14StateMachine02C1Ev+0x2c>)
 800277a:	6023      	str	r3, [r4, #0]
    id(nextId++),
 800277c:	4b08      	ldr	r3, [pc, #32]	; (80027a0 <_ZN14StateMachine02C1Ev+0x30>)
 800277e:	6819      	ldr	r1, [r3, #0]
 8002780:	1c4a      	adds	r2, r1, #1
 8002782:	601a      	str	r2, [r3, #0]
    counter(0)
 8002784:	6121      	str	r1, [r4, #16]
 8002786:	2300      	movs	r3, #0
 8002788:	6163      	str	r3, [r4, #20]
    _currentState = STATE_INITIAL;
 800278a:	2301      	movs	r3, #1
 800278c:	7323      	strb	r3, [r4, #12]
    Trace::out("Called constructor of StateMachine02 object '%d' (obj%02d)", id, id);
 800278e:	460a      	mov	r2, r1
 8002790:	4804      	ldr	r0, [pc, #16]	; (80027a4 <_ZN14StateMachine02C1Ev+0x34>)
 8002792:	f000 f8b5 	bl	8002900 <_ZN5Trace3outEPKcz>
}
 8002796:	4620      	mov	r0, r4
 8002798:	bd10      	pop	{r4, pc}
 800279a:	bf00      	nop
 800279c:	0800497c 	.word	0x0800497c
 80027a0:	2000000c 	.word	0x2000000c
 80027a4:	08004af8 	.word	0x08004af8

080027a8 <_ZN13TestFactory0213getStaticTaskEv>:
}

// static
StateMachine02 &TestFactory02::getStaticTask()
{
    static StateMachine02 staticTask;
 80027a8:	4b0d      	ldr	r3, [pc, #52]	; (80027e0 <_ZN13TestFactory0213getStaticTaskEv+0x38>)
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	f3bf 8f5b 	dmb	ish
 80027b0:	f013 0f01 	tst.w	r3, #1
 80027b4:	d001      	beq.n	80027ba <_ZN13TestFactory0213getStaticTaskEv+0x12>

    return staticTask;
}
 80027b6:	480b      	ldr	r0, [pc, #44]	; (80027e4 <_ZN13TestFactory0213getStaticTaskEv+0x3c>)
 80027b8:	4770      	bx	lr
{
 80027ba:	b510      	push	{r4, lr}
    static StateMachine02 staticTask;
 80027bc:	4808      	ldr	r0, [pc, #32]	; (80027e0 <_ZN13TestFactory0213getStaticTaskEv+0x38>)
 80027be:	f000 fded 	bl	800339c <__cxa_guard_acquire>
 80027c2:	b908      	cbnz	r0, 80027c8 <_ZN13TestFactory0213getStaticTaskEv+0x20>
}
 80027c4:	4807      	ldr	r0, [pc, #28]	; (80027e4 <_ZN13TestFactory0213getStaticTaskEv+0x3c>)
 80027c6:	bd10      	pop	{r4, pc}
    static StateMachine02 staticTask;
 80027c8:	4c05      	ldr	r4, [pc, #20]	; (80027e0 <_ZN13TestFactory0213getStaticTaskEv+0x38>)
 80027ca:	1d20      	adds	r0, r4, #4
 80027cc:	f7ff ffd0 	bl	8002770 <_ZN14StateMachine02C1Ev>
 80027d0:	4620      	mov	r0, r4
 80027d2:	f000 fdef 	bl	80033b4 <__cxa_guard_release>
 80027d6:	4804      	ldr	r0, [pc, #16]	; (80027e8 <_ZN13TestFactory0213getStaticTaskEv+0x40>)
 80027d8:	f000 fe58 	bl	800348c <atexit>
 80027dc:	e7f2      	b.n	80027c4 <_ZN13TestFactory0213getStaticTaskEv+0x1c>
 80027de:	bf00      	nop
 80027e0:	20000098 	.word	0x20000098
 80027e4:	2000009c 	.word	0x2000009c
 80027e8:	08002885 	.word	0x08002885

080027ec <_ZN13TestFactory0214getDynamicTaskEv>:

// static
StateMachine02 &TestFactory02::getDynamicTask()
{
 80027ec:	b510      	push	{r4, lr}
    static StateMachine02 * dynamicTask = nullptr;

    if (!dynamicTask)
 80027ee:	4b0b      	ldr	r3, [pc, #44]	; (800281c <_ZN13TestFactory0214getDynamicTaskEv+0x30>)
 80027f0:	69db      	ldr	r3, [r3, #28]
 80027f2:	b11b      	cbz	r3, 80027fc <_ZN13TestFactory0214getDynamicTaskEv+0x10>
    {
        dynamicTask = new StateMachine02;
    }

    assert(dynamicTask);        // Check heap
 80027f4:	4b09      	ldr	r3, [pc, #36]	; (800281c <_ZN13TestFactory0214getDynamicTaskEv+0x30>)
 80027f6:	69d8      	ldr	r0, [r3, #28]
 80027f8:	b148      	cbz	r0, 800280e <_ZN13TestFactory0214getDynamicTaskEv+0x22>
    return *dynamicTask;
}
 80027fa:	bd10      	pop	{r4, pc}
        dynamicTask = new StateMachine02;
 80027fc:	2018      	movs	r0, #24
 80027fe:	f000 fddc 	bl	80033ba <_Znwj>
 8002802:	4604      	mov	r4, r0
 8002804:	f7ff ffb4 	bl	8002770 <_ZN14StateMachine02C1Ev>
 8002808:	4b04      	ldr	r3, [pc, #16]	; (800281c <_ZN13TestFactory0214getDynamicTaskEv+0x30>)
 800280a:	61dc      	str	r4, [r3, #28]
 800280c:	e7f2      	b.n	80027f4 <_ZN13TestFactory0214getDynamicTaskEv+0x8>
    assert(dynamicTask);        // Check heap
 800280e:	4b04      	ldr	r3, [pc, #16]	; (8002820 <_ZN13TestFactory0214getDynamicTaskEv+0x34>)
 8002810:	4a04      	ldr	r2, [pc, #16]	; (8002824 <_ZN13TestFactory0214getDynamicTaskEv+0x38>)
 8002812:	213c      	movs	r1, #60	; 0x3c
 8002814:	4804      	ldr	r0, [pc, #16]	; (8002828 <_ZN13TestFactory0214getDynamicTaskEv+0x3c>)
 8002816:	f000 fe1b 	bl	8003450 <__assert_func>
 800281a:	bf00      	nop
 800281c:	20000098 	.word	0x20000098
 8002820:	08004b34 	.word	0x08004b34
 8002824:	08004b40 	.word	0x08004b40
 8002828:	08004b78 	.word	0x08004b78

0800282c <_ZN13TestFactory0210initializeEv>:
{
 800282c:	b508      	push	{r3, lr}
    getStaticTask().setDeleteOnTerminate(false);
 800282e:	f7ff ffbb 	bl	80027a8 <_ZN13TestFactory0213getStaticTaskEv>
 8002832:	6803      	ldr	r3, [r0, #0]
 8002834:	695b      	ldr	r3, [r3, #20]
 8002836:	2100      	movs	r1, #0
 8002838:	4798      	blx	r3
    getDynamicTask().setDeleteOnTerminate(true);
 800283a:	f7ff ffd7 	bl	80027ec <_ZN13TestFactory0214getDynamicTaskEv>
 800283e:	6803      	ldr	r3, [r0, #0]
 8002840:	695b      	ldr	r3, [r3, #20]
 8002842:	2101      	movs	r1, #1
 8002844:	4798      	blx	r3
}
 8002846:	bd08      	pop	{r3, pc}

08002848 <Factory_initialize>:
{
 8002848:	b508      	push	{r3, lr}
    TestFactory02::initialize();
 800284a:	f7ff ffef 	bl	800282c <_ZN13TestFactory0210initializeEv>
}
 800284e:	bd08      	pop	{r3, pc}

08002850 <_ZN13TestFactory025buildEv>:
{
 8002850:	b508      	push	{r3, lr}
    Trace::out("Starting test2...");
 8002852:	4808      	ldr	r0, [pc, #32]	; (8002874 <_ZN13TestFactory025buildEv+0x24>)
 8002854:	f000 f854 	bl	8002900 <_ZN5Trace3outEPKcz>
    Trace::out("---------------------");
 8002858:	4807      	ldr	r0, [pc, #28]	; (8002878 <_ZN13TestFactory025buildEv+0x28>)
 800285a:	f000 f851 	bl	8002900 <_ZN5Trace3outEPKcz>
    getStaticTask().startBehavior();
 800285e:	f7ff ffa3 	bl	80027a8 <_ZN13TestFactory0213getStaticTaskEv>
 8002862:	6803      	ldr	r3, [r0, #0]
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	4798      	blx	r3
    getDynamicTask().startBehavior();
 8002868:	f7ff ffc0 	bl	80027ec <_ZN13TestFactory0214getDynamicTaskEv>
 800286c:	6803      	ldr	r3, [r0, #0]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	4798      	blx	r3
}
 8002872:	bd08      	pop	{r3, pc}
 8002874:	08004bdc 	.word	0x08004bdc
 8002878:	08004bf0 	.word	0x08004bf0

0800287c <Factory_build>:
{
 800287c:	b508      	push	{r3, lr}
    TestFactory02::build();
 800287e:	f7ff ffe7 	bl	8002850 <_ZN13TestFactory025buildEv>
}
 8002882:	bd08      	pop	{r3, pc}

08002884 <__tcf_0>:
    static StateMachine02 staticTask;
 8002884:	b508      	push	{r3, lr}
 8002886:	4802      	ldr	r0, [pc, #8]	; (8002890 <__tcf_0+0xc>)
 8002888:	f7ff feda 	bl	8002640 <_ZN14StateMachine02D1Ev>
 800288c:	bd08      	pop	{r3, pc}
 800288e:	bf00      	nop
 8002890:	2000009c 	.word	0x2000009c

08002894 <_ZL10traceMutexv>:
static XFMutex * mutex = XFMutex::create();

static interface::XFMutex & traceMutex()
{
    return *mutex;
}
 8002894:	4b01      	ldr	r3, [pc, #4]	; (800289c <_ZL10traceMutexv+0x8>)
 8002896:	6818      	ldr	r0, [r3, #0]
 8002898:	4770      	bx	lr
 800289a:	bf00      	nop
 800289c:	200000b8 	.word	0x200000b8

080028a0 <_ZL14traceMutexLockv>:

static void traceMutexLock()
{
 80028a0:	b508      	push	{r3, lr}
    traceMutex().lock();
 80028a2:	f7ff fff7 	bl	8002894 <_ZL10traceMutexv>
 80028a6:	6803      	ldr	r3, [r0, #0]
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	4798      	blx	r3
}
 80028ac:	bd08      	pop	{r3, pc}

080028ae <_ZL16traceMutexUnlockv>:

static void traceMutexUnlock()
{
 80028ae:	b508      	push	{r3, lr}
    traceMutex().unlock();
 80028b0:	f7ff fff0 	bl	8002894 <_ZL10traceMutexv>
 80028b4:	6803      	ldr	r3, [r0, #0]
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	4798      	blx	r3
}
 80028ba:	bd08      	pop	{r3, pc}

080028bc <_ZL17checkStringEndingPcm>:
	traceUart.initialize(TRACE_UART_BAUD_RATE);
}

static int32_t checkStringEnding(char * str, uint32_t len)
{
	if (!len)
 80028bc:	b1f1      	cbz	r1, 80028fc <_ZL17checkStringEndingPcm+0x40>
{
 80028be:	b510      	push	{r4, lr}
 80028c0:	460b      	mov	r3, r1
	{
		return 0;
	}

	if (str[len-1] != '\n')
 80028c2:	1e4a      	subs	r2, r1, #1
 80028c4:	1884      	adds	r4, r0, r2
 80028c6:	5c81      	ldrb	r1, [r0, r2]
 80028c8:	290a      	cmp	r1, #10
 80028ca:	d00a      	beq.n	80028e2 <_ZL17checkStringEndingPcm+0x26>
	{
#if (TRACE_ADD_CRLF_SEQU != 0)
		// Add "\r\n" at the end of the string
		str[len] = '\r';
 80028cc:	220d      	movs	r2, #13
 80028ce:	54c2      	strb	r2, [r0, r3]
		str[len+1] = '\n';
 80028d0:	1c5a      	adds	r2, r3, #1
 80028d2:	210a      	movs	r1, #10
 80028d4:	5481      	strb	r1, [r0, r2]
		str[len+2] = '\0';
 80028d6:	3302      	adds	r3, #2
 80028d8:	2200      	movs	r2, #0
 80028da:	54c2      	strb	r2, [r0, r3]
			memmove(&str[len], &str[len-1], 2);
			str[len-1] = '\r';
		}
	}
#endif // TRACE_ADD_CRLF_SEQU
	return strlen(str);
 80028dc:	f7fd fce8 	bl	80002b0 <strlen>
}
 80028e0:	bd10      	pop	{r4, pc}
		if (len == 1 ||
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d005      	beq.n	80028f2 <_ZL17checkStringEndingPcm+0x36>
 80028e6:	d9f9      	bls.n	80028dc <_ZL17checkStringEndingPcm+0x20>
			(len >= 2 && str[len-2] != '\r'))
 80028e8:	18c1      	adds	r1, r0, r3
 80028ea:	f811 1c02 	ldrb.w	r1, [r1, #-2]
 80028ee:	290d      	cmp	r1, #13
 80028f0:	d0f4      	beq.n	80028dc <_ZL17checkStringEndingPcm+0x20>
			memmove(&str[len], &str[len-1], 2);
 80028f2:	8821      	ldrh	r1, [r4, #0]
 80028f4:	52c1      	strh	r1, [r0, r3]
			str[len-1] = '\r';
 80028f6:	230d      	movs	r3, #13
 80028f8:	5483      	strb	r3, [r0, r2]
 80028fa:	e7ef      	b.n	80028dc <_ZL17checkStringEndingPcm+0x20>
		return 0;
 80028fc:	2000      	movs	r0, #0
}
 80028fe:	4770      	bx	lr

08002900 <_ZN5Trace3outEPKcz>:
	traceUart.write(str.data(), str.length());
	traceMutexUnlock();
}

void Trace::out(const char * format, ...)
{
 8002900:	b40f      	push	{r0, r1, r2, r3}
 8002902:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002904:	b083      	sub	sp, #12
 8002906:	ad08      	add	r5, sp, #32
 8002908:	f855 7b04 	ldr.w	r7, [r5], #4
	traceMutexLock();
 800290c:	f7ff ffc8 	bl	80028a0 <_ZL14traceMutexLockv>
	va_list args;

	// Format string
	va_start(args, format);
 8002910:	9501      	str	r5, [sp, #4]
	vsprintf(strTrace, format, args);
 8002912:	4e0d      	ldr	r6, [pc, #52]	; (8002948 <_ZN5Trace3outEPKcz+0x48>)
 8002914:	1d34      	adds	r4, r6, #4
 8002916:	462a      	mov	r2, r5
 8002918:	4639      	mov	r1, r7
 800291a:	4620      	mov	r0, r4
 800291c:	f001 fa34 	bl	8003d88 <vsiprintf>
	va_end(args);

	checkStringEnding(strTrace, strlen(strTrace));
 8002920:	4620      	mov	r0, r4
 8002922:	f7fd fcc5 	bl	80002b0 <strlen>
 8002926:	4601      	mov	r1, r0
 8002928:	4620      	mov	r0, r4
 800292a:	f7ff ffc7 	bl	80028bc <_ZL17checkStringEndingPcm>

	traceUart.write(strTrace);
 800292e:	2200      	movs	r2, #0
 8002930:	4621      	mov	r1, r4
 8002932:	f506 7082 	add.w	r0, r6, #260	; 0x104
 8002936:	f000 f8b5 	bl	8002aa4 <_ZN4Uart5writeEPKcj>
	traceMutexUnlock();
 800293a:	f7ff ffb8 	bl	80028ae <_ZL16traceMutexUnlockv>
}
 800293e:	b003      	add	sp, #12
 8002940:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8002944:	b004      	add	sp, #16
 8002946:	4770      	bx	lr
 8002948:	200000b8 	.word	0x200000b8

0800294c <_Z41__static_initialization_and_destruction_0ii>:

//static
void Trace::unlock()
{
    traceMutexUnlock();
}
 800294c:	b570      	push	{r4, r5, r6, lr}
 800294e:	4604      	mov	r4, r0
 8002950:	460d      	mov	r5, r1
 8002952:	2801      	cmp	r0, #1
 8002954:	d005      	beq.n	8002962 <_Z41__static_initialization_and_destruction_0ii+0x16>
static XFMutex * mutex = XFMutex::create();
 8002956:	b91c      	cbnz	r4, 8002960 <_Z41__static_initialization_and_destruction_0ii+0x14>
 8002958:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800295c:	429d      	cmp	r5, r3
 800295e:	d010      	beq.n	8002982 <_Z41__static_initialization_and_destruction_0ii+0x36>
}
 8002960:	bd70      	pop	{r4, r5, r6, pc}
 8002962:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002966:	4299      	cmp	r1, r3
 8002968:	d1f5      	bne.n	8002956 <_Z41__static_initialization_and_destruction_0ii+0xa>
static Uart traceUart(TRACE_UART_CONSTRUCTOR_PARAMETERS);
 800296a:	4e08      	ldr	r6, [pc, #32]	; (800298c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800296c:	2300      	movs	r3, #0
 800296e:	4a08      	ldr	r2, [pc, #32]	; (8002990 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8002970:	4619      	mov	r1, r3
 8002972:	f506 7082 	add.w	r0, r6, #260	; 0x104
 8002976:	f000 f849 	bl	8002a0c <_ZN4UartC1EhP20__UART_HandleTypeDefb>
static XFMutex * mutex = XFMutex::create();
 800297a:	f000 fcc1 	bl	8003300 <_ZN9interface7XFMutex6createEv>
 800297e:	6030      	str	r0, [r6, #0]
 8002980:	e7e9      	b.n	8002956 <_Z41__static_initialization_and_destruction_0ii+0xa>
static Uart traceUart(TRACE_UART_CONSTRUCTOR_PARAMETERS);
 8002982:	4804      	ldr	r0, [pc, #16]	; (8002994 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8002984:	f000 f83a 	bl	80029fc <_ZN4UartD1Ev>
}
 8002988:	e7ea      	b.n	8002960 <_Z41__static_initialization_and_destruction_0ii+0x14>
 800298a:	bf00      	nop
 800298c:	200000b8 	.word	0x200000b8
 8002990:	20000360 	.word	0x20000360
 8002994:	200001bc 	.word	0x200001bc

08002998 <_GLOBAL__sub_I_trace_initialize>:
 8002998:	b508      	push	{r3, lr}
 800299a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800299e:	2001      	movs	r0, #1
 80029a0:	f7ff ffd4 	bl	800294c <_Z41__static_initialization_and_destruction_0ii>
 80029a4:	bd08      	pop	{r3, pc}

080029a6 <_GLOBAL__sub_D_trace_initialize>:
 80029a6:	b508      	push	{r3, lr}
 80029a8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80029ac:	2000      	movs	r0, #0
 80029ae:	f7ff ffcd 	bl	800294c <_Z41__static_initialization_and_destruction_0ii>
 80029b2:	bd08      	pop	{r3, pc}

080029b4 <_Z5inISRv>:

int inISR()
{
	// Variable must be put to TRUE in every ISR to indicate execution
	// of an ISR and need to put back to FALSE before leaving ISR.
	return bInISR;
 80029b4:	4b01      	ldr	r3, [pc, #4]	; (80029bc <_Z5inISRv+0x8>)
 80029b6:	6818      	ldr	r0, [r3, #0]
}
 80029b8:	4770      	bx	lr
 80029ba:	bf00      	nop
 80029bc:	2000024c 	.word	0x2000024c

080029c0 <_Z13enterCriticalv>:

void enterCritical()
{
 80029c0:	b508      	push	{r3, lr}
	// Only disable interrupts when not calling from an ISR
	if (!inISR())
 80029c2:	f7ff fff7 	bl	80029b4 <_Z5inISRv>
 80029c6:	b938      	cbnz	r0, 80029d8 <_Z13enterCriticalv+0x18>
	{
		if (!bOMEnterCriticalRegionNested)
 80029c8:	4b04      	ldr	r3, [pc, #16]	; (80029dc <_Z13enterCriticalv+0x1c>)
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	b903      	cbnz	r3, 80029d0 <_Z13enterCriticalv+0x10>
 80029ce:	b672      	cpsid	i
		{
			// Turn off the priority configurable interrupts
		    __disable_irq();
		}
		bOMEnterCriticalRegionNested++;
 80029d0:	4a02      	ldr	r2, [pc, #8]	; (80029dc <_Z13enterCriticalv+0x1c>)
 80029d2:	6853      	ldr	r3, [r2, #4]
 80029d4:	3301      	adds	r3, #1
 80029d6:	6053      	str	r3, [r2, #4]
	}
}
 80029d8:	bd08      	pop	{r3, pc}
 80029da:	bf00      	nop
 80029dc:	2000024c 	.word	0x2000024c

080029e0 <_Z12exitCriticalv>:

void exitCritical()
{
 80029e0:	b508      	push	{r3, lr}
	// Only enable interrupts when not calling from an ISR
	if (!inISR())
 80029e2:	f7ff ffe7 	bl	80029b4 <_Z5inISRv>
 80029e6:	b930      	cbnz	r0, 80029f6 <_Z12exitCriticalv+0x16>
	{
		bOMEnterCriticalRegionNested--;
 80029e8:	4b03      	ldr	r3, [pc, #12]	; (80029f8 <_Z12exitCriticalv+0x18>)
 80029ea:	685a      	ldr	r2, [r3, #4]
 80029ec:	3a01      	subs	r2, #1
 80029ee:	605a      	str	r2, [r3, #4]

		if (!bOMEnterCriticalRegionNested)
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	b903      	cbnz	r3, 80029f6 <_Z12exitCriticalv+0x16>
  __ASM volatile ("cpsie i" : : : "memory");
 80029f4:	b662      	cpsie	i
		{
			// Turn on the interrupts with configurable priority
		    __enable_irq();
		}
	}
}
 80029f6:	bd08      	pop	{r3, pc}
 80029f8:	2000024c 	.word	0x2000024c

080029fc <_ZN4UartD1Ev>:
}

Uart::~Uart()
{

}
 80029fc:	4770      	bx	lr

080029fe <_ZN4UartD0Ev>:
Uart::~Uart()
 80029fe:	b510      	push	{r4, lr}
 8002a00:	4604      	mov	r4, r0
}
 8002a02:	2190      	movs	r1, #144	; 0x90
 8002a04:	f000 fcc8 	bl	8003398 <_ZdlPvj>
 8002a08:	4620      	mov	r0, r4
 8002a0a:	bd10      	pop	{r4, pc}

08002a0c <_ZN4UartC1EhP20__UART_HandleTypeDefb>:
Uart::Uart(const unsigned char uartNbr, UART_HandleTypeDef * uartHandle, bool bTxDMA /* = false */)
 8002a0c:	b510      	push	{r4, lr}
   _bTxDMA(bTxDMA)
 8002a0e:	4c0f      	ldr	r4, [pc, #60]	; (8002a4c <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x40>)
 8002a10:	6004      	str	r4, [r0, #0]
 8002a12:	24ff      	movs	r4, #255	; 0xff
 8002a14:	7104      	strb	r4, [r0, #4]
 8002a16:	2400      	movs	r4, #0
 8002a18:	6084      	str	r4, [r0, #8]
 8002a1a:	7303      	strb	r3, [r0, #12]
	assert(uartNbr < UART_COUNT);
 8002a1c:	2902      	cmp	r1, #2
 8002a1e:	d809      	bhi.n	8002a34 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x28>
        if (!_sUart[uartNbr])
 8002a20:	4b0b      	ldr	r3, [pc, #44]	; (8002a50 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x44>)
 8002a22:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002a26:	b95b      	cbnz	r3, 8002a40 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x34>
            _sUart[uartNbr] = this;
 8002a28:	4b09      	ldr	r3, [pc, #36]	; (8002a50 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x44>)
 8002a2a:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
            _uartNbr = uartNbr;
 8002a2e:	7101      	strb	r1, [r0, #4]
            _pUartHandle = uartHandle;
 8002a30:	6082      	str	r2, [r0, #8]
}
 8002a32:	bd10      	pop	{r4, pc}
	assert(uartNbr < UART_COUNT);
 8002a34:	4b07      	ldr	r3, [pc, #28]	; (8002a54 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x48>)
 8002a36:	4a08      	ldr	r2, [pc, #32]	; (8002a58 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x4c>)
 8002a38:	2111      	movs	r1, #17
 8002a3a:	4808      	ldr	r0, [pc, #32]	; (8002a5c <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x50>)
 8002a3c:	f000 fd08 	bl	8003450 <__assert_func>
            assert(false);  // Error: Instance for specified UART already exists.
 8002a40:	4b07      	ldr	r3, [pc, #28]	; (8002a60 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x54>)
 8002a42:	4a05      	ldr	r2, [pc, #20]	; (8002a58 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x4c>)
 8002a44:	211f      	movs	r1, #31
 8002a46:	4805      	ldr	r0, [pc, #20]	; (8002a5c <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x50>)
 8002a48:	f000 fd02 	bl	8003450 <__assert_func>
 8002a4c:	080049a4 	.word	0x080049a4
 8002a50:	20000254 	.word	0x20000254
 8002a54:	08004c08 	.word	0x08004c08
 8002a58:	08004c20 	.word	0x08004c20
 8002a5c:	08004c58 	.word	0x08004c58
 8002a60:	08004cbc 	.word	0x08004cbc

08002a64 <_ZN4Uart13writeUsingDMAEPKhm>:
        writeUsingDMA((const uint8_t *)str, length);
    }
}

void Uart::writeUsingDMA(const uint8_t * str, uint32_t length)
{
 8002a64:	b570      	push	{r4, r5, r6, lr}
    assert(length <= sizeof(_pTxDmaBuffer));
 8002a66:	2a80      	cmp	r2, #128	; 0x80
 8002a68:	d80f      	bhi.n	8002a8a <_ZN4Uart13writeUsingDMAEPKhm+0x26>
 8002a6a:	4605      	mov	r5, r0
 8002a6c:	4614      	mov	r4, r2

    // Copy data to TX DMA buffer
    ::memcpy(_pTxDmaBuffer, str, length);
 8002a6e:	f100 060d 	add.w	r6, r0, #13
 8002a72:	4630      	mov	r0, r6
 8002a74:	f000 fd56 	bl	8003524 <memcpy>

    // Check that a Tx process is not already ongoing
    // (should never happen, but who knows!)
    while (_pUartHandle->gState != HAL_UART_STATE_READY)
 8002a78:	68a8      	ldr	r0, [r5, #8]
 8002a7a:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8002a7c:	2b20      	cmp	r3, #32
 8002a7e:	d1fb      	bne.n	8002a78 <_ZN4Uart13writeUsingDMAEPKhm+0x14>
    { continue; }

    // Give data to TX DMA
    HAL_UART_Transmit_DMA(_pUartHandle, _pTxDmaBuffer, length);
 8002a80:	b2a2      	uxth	r2, r4
 8002a82:	4631      	mov	r1, r6
 8002a84:	f7ff f9fa 	bl	8001e7c <HAL_UART_Transmit_DMA>
}
 8002a88:	bd70      	pop	{r4, r5, r6, pc}
    assert(length <= sizeof(_pTxDmaBuffer));
 8002a8a:	4b03      	ldr	r3, [pc, #12]	; (8002a98 <_ZN4Uart13writeUsingDMAEPKhm+0x34>)
 8002a8c:	4a03      	ldr	r2, [pc, #12]	; (8002a9c <_ZN4Uart13writeUsingDMAEPKhm+0x38>)
 8002a8e:	2150      	movs	r1, #80	; 0x50
 8002a90:	4803      	ldr	r0, [pc, #12]	; (8002aa0 <_ZN4Uart13writeUsingDMAEPKhm+0x3c>)
 8002a92:	f000 fcdd 	bl	8003450 <__assert_func>
 8002a96:	bf00      	nop
 8002a98:	08004cc4 	.word	0x08004cc4
 8002a9c:	08004ce4 	.word	0x08004ce4
 8002aa0:	08004c58 	.word	0x08004c58

08002aa4 <_ZN4Uart5writeEPKcj>:
{
 8002aa4:	b538      	push	{r3, r4, r5, lr}
 8002aa6:	4604      	mov	r4, r0
 8002aa8:	460d      	mov	r5, r1
	if (!length)
 8002aaa:	4610      	mov	r0, r2
 8002aac:	b912      	cbnz	r2, 8002ab4 <_ZN4Uart5writeEPKcj+0x10>
		length = strlen(str);
 8002aae:	4608      	mov	r0, r1
 8002ab0:	f7fd fbfe 	bl	80002b0 <strlen>
    if (!_bTxDMA)
 8002ab4:	7b23      	ldrb	r3, [r4, #12]
 8002ab6:	b933      	cbnz	r3, 8002ac6 <_ZN4Uart5writeEPKcj+0x22>
        HAL_UART_Transmit(_pUartHandle, (uint8_t *)str, length, 50);
 8002ab8:	2332      	movs	r3, #50	; 0x32
 8002aba:	b282      	uxth	r2, r0
 8002abc:	4629      	mov	r1, r5
 8002abe:	68a0      	ldr	r0, [r4, #8]
 8002ac0:	f7ff fcfe 	bl	80024c0 <HAL_UART_Transmit>
}
 8002ac4:	bd38      	pop	{r3, r4, r5, pc}
        writeUsingDMA((const uint8_t *)str, length);
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	4629      	mov	r1, r5
 8002aca:	4620      	mov	r0, r4
 8002acc:	f7ff ffca 	bl	8002a64 <_ZN4Uart13writeUsingDMAEPKhm>
}
 8002ad0:	e7f8      	b.n	8002ac4 <_ZN4Uart5writeEPKcj+0x20>
	...

08002ad4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002ad4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b0c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002ad8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002ada:	e003      	b.n	8002ae4 <LoopCopyDataInit>

08002adc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002adc:	4b0c      	ldr	r3, [pc, #48]	; (8002b10 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002ade:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002ae0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002ae2:	3104      	adds	r1, #4

08002ae4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002ae4:	480b      	ldr	r0, [pc, #44]	; (8002b14 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002ae6:	4b0c      	ldr	r3, [pc, #48]	; (8002b18 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002ae8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002aea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002aec:	d3f6      	bcc.n	8002adc <CopyDataInit>
  ldr  r2, =_sbss
 8002aee:	4a0b      	ldr	r2, [pc, #44]	; (8002b1c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002af0:	e002      	b.n	8002af8 <LoopFillZerobss>

08002af2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002af2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002af4:	f842 3b04 	str.w	r3, [r2], #4

08002af8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002af8:	4b09      	ldr	r3, [pc, #36]	; (8002b20 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002afa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002afc:	d3f9      	bcc.n	8002af2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002afe:	f7fe f999 	bl	8000e34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b02:	f000 fcdb 	bl	80034bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b06:	f7fe f903 	bl	8000d10 <main>
  bx  lr    
 8002b0a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002b0c:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8002b10:	08004e34 	.word	0x08004e34
  ldr  r0, =_sdata
 8002b14:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002b18:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 8002b1c:	2000007c 	.word	0x2000007c
  ldr  r3, = _ebss
 8002b20:	200003f4 	.word	0x200003f4

08002b24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b24:	e7fe      	b.n	8002b24 <ADC_IRQHandler>

08002b26 <_ZNK10XFBehavior17deleteOnTerminateEv>:
}

bool XFBehavior::deleteOnTerminate() const
{
    return deleteOnTerminate_;
}
 8002b26:	7900      	ldrb	r0, [r0, #4]
 8002b28:	4770      	bx	lr

08002b2a <_ZN10XFBehavior20setDeleteOnTerminateEb>:

void XFBehavior::setDeleteOnTerminate(bool deleteBehaviour)
{
     deleteOnTerminate_=deleteBehaviour;
 8002b2a:	7101      	strb	r1, [r0, #4]
}
 8002b2c:	4770      	bx	lr

08002b2e <_ZN10XFBehavior13startBehaviorEv>:
{
 8002b2e:	b570      	push	{r4, r5, r6, lr}
 8002b30:	4604      	mov	r4, r0
    GEN(XFInitialEvent);
 8002b32:	6803      	ldr	r3, [r0, #0]
 8002b34:	68de      	ldr	r6, [r3, #12]
 8002b36:	2010      	movs	r0, #16
 8002b38:	f000 fc3f 	bl	80033ba <_Znwj>
 8002b3c:	4605      	mov	r5, r0
 8002b3e:	f000 f851 	bl	8002be4 <_ZN14XFInitialEventC1Ev>
 8002b42:	2200      	movs	r2, #0
 8002b44:	4629      	mov	r1, r5
 8002b46:	4620      	mov	r0, r4
 8002b48:	47b0      	blx	r6
}
 8002b4a:	bd70      	pop	{r4, r5, r6, pc}

08002b4c <_ZN10XFBehavior9pushEventEP7XFEventb>:
{
 8002b4c:	b538      	push	{r3, r4, r5, lr}
 8002b4e:	460c      	mov	r4, r1
 8002b50:	4615      	mov	r5, r2
    inline void setBehavior(interface::XFBehavior * pBehavior) { pBehavior_ = pBehavior; }
 8002b52:	60c8      	str	r0, [r1, #12]
    interface::XFDispatcher::getInstance()->pushEvent(pEvent,fromISR);
 8002b54:	f000 f8a0 	bl	8002c98 <_ZN9interface12XFDispatcher11getInstanceEv>
 8002b58:	6803      	ldr	r3, [r0, #0]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	462a      	mov	r2, r5
 8002b5e:	4621      	mov	r1, r4
 8002b60:	4798      	blx	r3
}
 8002b62:	bd38      	pop	{r3, r4, r5, pc}

08002b64 <_ZN10XFBehaviorC1Ev>:
XFBehavior::XFBehavior()
 8002b64:	4b01      	ldr	r3, [pc, #4]	; (8002b6c <_ZN10XFBehaviorC1Ev+0x8>)
 8002b66:	6003      	str	r3, [r0, #0]
}
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	080049b4 	.word	0x080049b4

08002b70 <_ZN10XFBehaviorD1Ev>:
}
 8002b70:	4770      	bx	lr

08002b72 <_ZNK10XFBehavior15getCurrentEventEv>:

const XFEvent *XFBehavior::getCurrentEvent() const
{
    return pCurrentEvent_;
}
 8002b72:	6880      	ldr	r0, [r0, #8]
 8002b74:	4770      	bx	lr

08002b76 <_ZN10XFBehavior13getDispatcherEv>:

interface::XFDispatcher *XFBehavior::getDispatcher()
{
 8002b76:	b508      	push	{r3, lr}
    return interface::XFDispatcher::getInstance();
 8002b78:	f000 f88e 	bl	8002c98 <_ZN9interface12XFDispatcher11getInstanceEv>
}
 8002b7c:	bd08      	pop	{r3, pc}

08002b7e <_ZN10XFBehavior17getCurrentTimeoutEv>:

const XFTimeout *XFBehavior::getCurrentTimeout()
{
    return (XFTimeout *)pCurrentEvent_;
}
 8002b7e:	6880      	ldr	r0, [r0, #8]
 8002b80:	4770      	bx	lr

08002b82 <_ZN10XFBehavior15setCurrentEventEPK7XFEvent>:

void XFBehavior::setCurrentEvent(const XFEvent *pEvent)
{
    pCurrentEvent_=pEvent;
 8002b82:	6081      	str	r1, [r0, #8]
}
 8002b84:	4770      	bx	lr

08002b86 <_ZN10XFBehavior7processEPK7XFEvent>:

XFBehavior::TerminateBehavior XFBehavior::process(const XFEvent *pEvent)
{
 8002b86:	b510      	push	{r4, lr}
 8002b88:	4604      	mov	r4, r0
    setCurrentEvent(pEvent);
 8002b8a:	f7ff fffa 	bl	8002b82 <_ZN10XFBehavior15setCurrentEventEPK7XFEvent>
    XFEventStatus status =processEvent();
 8002b8e:	6823      	ldr	r3, [r4, #0]
 8002b90:	69db      	ldr	r3, [r3, #28]
 8002b92:	4620      	mov	r0, r4
 8002b94:	4798      	blx	r3
 8002b96:	4603      	mov	r3, r0
    return ((deleteOnTerminate_)&&(status==XFEventStatus::Terminate));//return true if we have deleteOnTerminate attribute set and if status is an Terminate Event
 8002b98:	7920      	ldrb	r0, [r4, #4]
 8002b9a:	b118      	cbz	r0, 8002ba4 <_ZN10XFBehavior7processEPK7XFEvent+0x1e>
	/**
	 * Checks if both variables contain the same event status.
	 */
    bool operator == (const XFEventStatus::eEventStatus & eventStatus) const
	{
        return (this->status_ == eventStatus);
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	2b08      	cmp	r3, #8
 8002ba0:	d000      	beq.n	8002ba4 <_ZN10XFBehavior7processEPK7XFEvent+0x1e>
 8002ba2:	2000      	movs	r0, #0
}
 8002ba4:	bd10      	pop	{r4, pc}

08002ba6 <_ZNK19XFDefaultTransition18deleteAfterConsumeEv>:
}

bool XFDefaultTransition::deleteAfterConsume() const
{
	return false;
}
 8002ba6:	2000      	movs	r0, #0
 8002ba8:	4770      	bx	lr

08002baa <_ZN19XFDefaultTransitionD1Ev>:
 * Represents a transition in a state machine having no trigger.
 *
 * In case one wants to directly transition from one state to
 * another (without a trigger) a default transition must be pushed.
 */
class XFDefaultTransition : public XFEvent
 8002baa:	4770      	bx	lr

08002bac <_ZN19XFDefaultTransitionD0Ev>:
 8002bac:	b510      	push	{r4, lr}
 8002bae:	4604      	mov	r4, r0
 8002bb0:	2110      	movs	r1, #16
 8002bb2:	f000 fbf1 	bl	8003398 <_ZdlPvj>
 8002bb6:	4620      	mov	r0, r4
 8002bb8:	bd10      	pop	{r4, pc}
	...

08002bbc <_ZN19XFDefaultTransitionC1EPN9interface10XFBehaviorE>:
    XFEvent(XFEventType eventType, int id=0, interface::XFBehavior * pBehavior=nullptr) : eventType_(eventType), id_(id), pBehavior_(pBehavior) {}
 8002bbc:	2202      	movs	r2, #2
 8002bbe:	7102      	strb	r2, [r0, #4]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	6082      	str	r2, [r0, #8]
 8002bc4:	60c2      	str	r2, [r0, #12]
XFDefaultTransition::XFDefaultTransition(interface::XFBehavior *pBehavior):XFEvent(DefaultTransition)
 8002bc6:	4a01      	ldr	r2, [pc, #4]	; (8002bcc <_ZN19XFDefaultTransitionC1EPN9interface10XFBehaviorE+0x10>)
 8002bc8:	6002      	str	r2, [r0, #0]
}
 8002bca:	4770      	bx	lr
 8002bcc:	080049dc 	.word	0x080049dc

08002bd0 <_ZNK14XFInitialEvent18deleteAfterConsumeEv>:
}

bool XFInitialEvent::deleteAfterConsume() const
{
	return false;
}
 8002bd0:	2000      	movs	r0, #0
 8002bd2:	4770      	bx	lr

08002bd4 <_ZN14XFInitialEventD1Ev>:
 * @brief Initial event to start a behavior.
 *
 * Represents for example the first transition executed
 * in a state machine.
 */
class XFInitialEvent : public XFEvent
 8002bd4:	4770      	bx	lr

08002bd6 <_ZN14XFInitialEventD0Ev>:
 8002bd6:	b510      	push	{r4, lr}
 8002bd8:	4604      	mov	r4, r0
 8002bda:	2110      	movs	r1, #16
 8002bdc:	f000 fbdc 	bl	8003398 <_ZdlPvj>
 8002be0:	4620      	mov	r0, r4
 8002be2:	bd10      	pop	{r4, pc}

08002be4 <_ZN14XFInitialEventC1Ev>:
 8002be4:	2201      	movs	r2, #1
 8002be6:	7102      	strb	r2, [r0, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	6082      	str	r2, [r0, #8]
 8002bec:	60c2      	str	r2, [r0, #12]
XFInitialEvent::XFInitialEvent():XFEvent(Initial)
 8002bee:	4a01      	ldr	r2, [pc, #4]	; (8002bf4 <_ZN14XFInitialEventC1Ev+0x10>)
 8002bf0:	6002      	str	r2, [r0, #0]
}
 8002bf2:	4770      	bx	lr
 8002bf4:	080049f0 	.word	0x080049f0

08002bf8 <_ZNK9XFTimeout18deleteAfterConsumeEv>:
}

bool XFTimeout::deleteAfterConsume() const
{
	return false;
}
 8002bf8:	2000      	movs	r0, #0
 8002bfa:	4770      	bx	lr

08002bfc <_ZN9XFTimeoutD1Ev>:
 * the `getEventType()` method.
 *
 * XFTimeout is inheriting from XFEvent, so every timeout is
 * also an event.
 */
class XFTimeout : public XFEvent
 8002bfc:	4770      	bx	lr

08002bfe <_ZN9XFTimeoutD0Ev>:
 8002bfe:	b510      	push	{r4, lr}
 8002c00:	4604      	mov	r4, r0
 8002c02:	2118      	movs	r1, #24
 8002c04:	f000 fbc8 	bl	8003398 <_ZdlPvj>
 8002c08:	4620      	mov	r0, r4
 8002c0a:	bd10      	pop	{r4, pc}

08002c0c <_ZN9XFTimeoutC1EiiPN9interface10XFBehaviorE>:
XFTimeout::XFTimeout(int id, int interval, interface::XFBehavior *pBehavior):XFEvent(Timeout,id,pBehavior)
 8002c0c:	b430      	push	{r4, r5}
 8002c0e:	2504      	movs	r5, #4
 8002c10:	7105      	strb	r5, [r0, #4]
 8002c12:	6081      	str	r1, [r0, #8]
 8002c14:	60c3      	str	r3, [r0, #12]
 8002c16:	4b03      	ldr	r3, [pc, #12]	; (8002c24 <_ZN9XFTimeoutC1EiiPN9interface10XFBehaviorE+0x18>)
 8002c18:	6003      	str	r3, [r0, #0]
    interval_=interval;
 8002c1a:	6102      	str	r2, [r0, #16]
    relTicks_=interval;
 8002c1c:	6142      	str	r2, [r0, #20]
}
 8002c1e:	bc30      	pop	{r4, r5}
 8002c20:	4770      	bx	lr
 8002c22:	bf00      	nop
 8002c24:	08004a04 	.word	0x08004a04

08002c28 <_ZN12XFDispatcher7executeEPKv>:
        _events.pop();//Pop it of the list
    }
}

int XFDispatcher::execute(const void *param)
{
 8002c28:	b508      	push	{r3, lr}
 8002c2a:	4604      	mov	r4, r0
    while(1)
    {
        executeOnce();
 8002c2c:	6823      	ldr	r3, [r4, #0]
 8002c2e:	699b      	ldr	r3, [r3, #24]
 8002c30:	4620      	mov	r0, r4
 8002c32:	4798      	blx	r3
    while(1)
 8002c34:	e7fa      	b.n	8002c2c <_ZN12XFDispatcher7executeEPKv+0x4>

08002c36 <_ZNK12XFDispatcher13dispatchEventEPK7XFEvent>:
    }
}

void XFDispatcher::dispatchEvent(const XFEvent *pEvent) const
{
 8002c36:	b510      	push	{r4, lr}
 8002c38:	460c      	mov	r4, r1
    inline interface::XFBehavior * getBehavior() const { return pBehavior_; }
 8002c3a:	68c8      	ldr	r0, [r1, #12]
    //Dispatch event that has been pop
    XFBehavior::TerminateBehavior pTerminate=pEvent->getBehavior()->process(pEvent);//Distribute the event that has been pop to the correct stateMachine
 8002c3c:	6803      	ldr	r3, [r0, #0]
 8002c3e:	699b      	ldr	r3, [r3, #24]
 8002c40:	4798      	blx	r3
    if(pTerminate)
 8002c42:	b120      	cbz	r0, 8002c4e <_ZNK12XFDispatcher13dispatchEventEPK7XFEvent+0x18>
 8002c44:	68e0      	ldr	r0, [r4, #12]
    {
        delete pEvent->getBehavior();//Kill the stateMachine if it's in terminate event
 8002c46:	b110      	cbz	r0, 8002c4e <_ZNK12XFDispatcher13dispatchEventEPK7XFEvent+0x18>
 8002c48:	6803      	ldr	r3, [r0, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	4798      	blx	r3
    }

}
 8002c4e:	bd10      	pop	{r4, pc}

08002c50 <_ZN12XFDispatcher15scheduleTimeoutEiiPN9interface10XFBehaviorE>:
{
 8002c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c52:	460c      	mov	r4, r1
 8002c54:	4615      	mov	r5, r2
 8002c56:	461e      	mov	r6, r3
    interface::XFTimeoutManager::getInstance()->scheduleTimeout(timeoutId,interval,pBehavior);//Call scheduleTimeout method from XF::TimeoutManager
 8002c58:	f000 f8a2 	bl	8002da0 <_ZN9interface16XFTimeoutManager11getInstanceEv>
 8002c5c:	6803      	ldr	r3, [r0, #0]
 8002c5e:	695f      	ldr	r7, [r3, #20]
 8002c60:	4633      	mov	r3, r6
 8002c62:	462a      	mov	r2, r5
 8002c64:	4621      	mov	r1, r4
 8002c66:	47b8      	blx	r7
}
 8002c68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002c6a <_ZN12XFDispatcher17unscheduleTimeoutEiPN9interface10XFBehaviorE>:
{
 8002c6a:	b538      	push	{r3, r4, r5, lr}
 8002c6c:	460c      	mov	r4, r1
 8002c6e:	4615      	mov	r5, r2
    interface::XFTimeoutManager::getInstance()->unscheduleTimeout(timeoutId,pBehavior);//Call unscheduleTimeout method from XF::TimeoutManager
 8002c70:	f000 f896 	bl	8002da0 <_ZN9interface16XFTimeoutManager11getInstanceEv>
 8002c74:	6803      	ldr	r3, [r0, #0]
 8002c76:	699b      	ldr	r3, [r3, #24]
 8002c78:	462a      	mov	r2, r5
 8002c7a:	4621      	mov	r1, r4
 8002c7c:	4798      	blx	r3
}
 8002c7e:	bd38      	pop	{r3, r4, r5, pc}

08002c80 <_ZN12XFDispatcherC1Ev>:
XFDispatcher::XFDispatcher()
 8002c80:	b510      	push	{r4, lr}
 8002c82:	4604      	mov	r4, r0
 8002c84:	4b03      	ldr	r3, [pc, #12]	; (8002c94 <_ZN12XFDispatcherC1Ev+0x14>)
 8002c86:	f840 3b04 	str.w	r3, [r0], #4
 8002c8a:	f000 fa47 	bl	800311c <_ZN12XFEventQueueC1Ev>
}
 8002c8e:	4620      	mov	r0, r4
 8002c90:	bd10      	pop	{r4, pc}
 8002c92:	bf00      	nop
 8002c94:	08004a18 	.word	0x08004a18

08002c98 <_ZN9interface12XFDispatcher11getInstanceEv>:
    static ::XFDispatcher dispatcher;
 8002c98:	4b0d      	ldr	r3, [pc, #52]	; (8002cd0 <_ZN9interface12XFDispatcher11getInstanceEv+0x38>)
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	f3bf 8f5b 	dmb	ish
 8002ca0:	f013 0f01 	tst.w	r3, #1
 8002ca4:	d001      	beq.n	8002caa <_ZN9interface12XFDispatcher11getInstanceEv+0x12>
}
 8002ca6:	480b      	ldr	r0, [pc, #44]	; (8002cd4 <_ZN9interface12XFDispatcher11getInstanceEv+0x3c>)
 8002ca8:	4770      	bx	lr
{
 8002caa:	b510      	push	{r4, lr}
    static ::XFDispatcher dispatcher;
 8002cac:	4808      	ldr	r0, [pc, #32]	; (8002cd0 <_ZN9interface12XFDispatcher11getInstanceEv+0x38>)
 8002cae:	f000 fb75 	bl	800339c <__cxa_guard_acquire>
 8002cb2:	b908      	cbnz	r0, 8002cb8 <_ZN9interface12XFDispatcher11getInstanceEv+0x20>
}
 8002cb4:	4807      	ldr	r0, [pc, #28]	; (8002cd4 <_ZN9interface12XFDispatcher11getInstanceEv+0x3c>)
 8002cb6:	bd10      	pop	{r4, pc}
    static ::XFDispatcher dispatcher;
 8002cb8:	4c05      	ldr	r4, [pc, #20]	; (8002cd0 <_ZN9interface12XFDispatcher11getInstanceEv+0x38>)
 8002cba:	1d20      	adds	r0, r4, #4
 8002cbc:	f7ff ffe0 	bl	8002c80 <_ZN12XFDispatcherC1Ev>
 8002cc0:	4620      	mov	r0, r4
 8002cc2:	f000 fb77 	bl	80033b4 <__cxa_guard_release>
 8002cc6:	4804      	ldr	r0, [pc, #16]	; (8002cd8 <_ZN9interface12XFDispatcher11getInstanceEv+0x40>)
 8002cc8:	f000 fbe0 	bl	800348c <atexit>
 8002ccc:	e7f2      	b.n	8002cb4 <_ZN9interface12XFDispatcher11getInstanceEv+0x1c>
 8002cce:	bf00      	nop
 8002cd0:	20000264 	.word	0x20000264
 8002cd4:	20000268 	.word	0x20000268
 8002cd8:	08002cf5 	.word	0x08002cf5

08002cdc <_ZN12XFDispatcherD1Ev>:
XFDispatcher::~XFDispatcher()
 8002cdc:	b510      	push	{r4, lr}
 8002cde:	4604      	mov	r4, r0
 8002ce0:	4b03      	ldr	r3, [pc, #12]	; (8002cf0 <_ZN12XFDispatcherD1Ev+0x14>)
 8002ce2:	f840 3b04 	str.w	r3, [r0], #4
 8002ce6:	f000 f997 	bl	8003018 <_ZN12XFEventQueueD1Ev>
}
 8002cea:	4620      	mov	r0, r4
 8002cec:	bd10      	pop	{r4, pc}
 8002cee:	bf00      	nop
 8002cf0:	08004a18 	.word	0x08004a18

08002cf4 <__tcf_0>:
    static ::XFDispatcher dispatcher;
 8002cf4:	b508      	push	{r3, lr}
 8002cf6:	4802      	ldr	r0, [pc, #8]	; (8002d00 <__tcf_0+0xc>)
 8002cf8:	f7ff fff0 	bl	8002cdc <_ZN12XFDispatcherD1Ev>
 8002cfc:	bd08      	pop	{r3, pc}
 8002cfe:	bf00      	nop
 8002d00:	20000268 	.word	0x20000268

08002d04 <_ZN12XFDispatcherD0Ev>:
XFDispatcher::~XFDispatcher()
 8002d04:	b510      	push	{r4, lr}
 8002d06:	4604      	mov	r4, r0
}
 8002d08:	f7ff ffe8 	bl	8002cdc <_ZN12XFDispatcherD1Ev>
 8002d0c:	2138      	movs	r1, #56	; 0x38
 8002d0e:	4620      	mov	r0, r4
 8002d10:	f000 fb42 	bl	8003398 <_ZdlPvj>
 8002d14:	4620      	mov	r0, r4
 8002d16:	bd10      	pop	{r4, pc}

08002d18 <_ZN12XFDispatcher9pushEventEP7XFEventb>:
{
 8002d18:	b508      	push	{r3, lr}
    _events.push(pEvent,fromISR);//Push an XF event to our event list
 8002d1a:	3004      	adds	r0, #4
 8002d1c:	f000 fac8 	bl	80032b0 <_ZN12XFEventQueue4pushEPK7XFEventb>
}
 8002d20:	bd08      	pop	{r3, pc}

08002d22 <_ZN12XFDispatcher11executeOnceEv>:
{
 8002d22:	b570      	push	{r4, r5, r6, lr}
 8002d24:	4604      	mov	r4, r0
    if(_events.empty()==0)
 8002d26:	1d05      	adds	r5, r0, #4
 8002d28:	4628      	mov	r0, r5
 8002d2a:	f000 f94c 	bl	8002fc6 <_ZNK12XFEventQueue5emptyEv>
 8002d2e:	b100      	cbz	r0, 8002d32 <_ZN12XFDispatcher11executeOnceEv+0x10>
}
 8002d30:	bd70      	pop	{r4, r5, r6, pc}
        dispatchEvent(_events.front());//dispatch first event of the list
 8002d32:	6823      	ldr	r3, [r4, #0]
 8002d34:	69de      	ldr	r6, [r3, #28]
 8002d36:	4628      	mov	r0, r5
 8002d38:	f000 f94c 	bl	8002fd4 <_ZN12XFEventQueue5frontEv>
 8002d3c:	4601      	mov	r1, r0
 8002d3e:	4620      	mov	r0, r4
 8002d40:	47b0      	blx	r6
        _events.pop();//Pop it of the list
 8002d42:	4628      	mov	r0, r5
 8002d44:	f000 f98d 	bl	8003062 <_ZN12XFEventQueue3popEv>
}
 8002d48:	e7f2      	b.n	8002d30 <_ZN12XFDispatcher11executeOnceEv+0xe>

08002d4a <_ZN9interface16XFTimeoutManager10initializeEl>:
     * Sets the time interval in milliseconds in which the timeout manager
     * should handle the timeouts.
     */
    virtual void initialize(int32_t tickInterval)
    {
        tickInterval_ = tickInterval;
 8002d4a:	6041      	str	r1, [r0, #4]
    }
 8002d4c:	4770      	bx	lr

08002d4e <_ZNK9interface16XFTimeoutManager15getTickIntervalEv>:
     * @brief Returns tick interval in milliseconds.
     */
    virtual int32_t getTickInterval() const
    {
        return tickInterval_;
    }
 8002d4e:	6840      	ldr	r0, [r0, #4]
 8002d50:	4770      	bx	lr

08002d52 <_ZN16XFTimeoutManager15scheduleTimeoutEllPN9interface10XFBehaviorE>:
		startTimeoutManagerTimer(tickInterval_);//Start timer wich will tick every tickInterval ms
	}

}
void XFTimeoutManager::scheduleTimeout(int32_t timeoutId, int32_t interval, interface::XFBehavior *pBehavior)
{
 8002d52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d56:	4604      	mov	r4, r0
 8002d58:	460e      	mov	r6, r1
 8002d5a:	4617      	mov	r7, r2
 8002d5c:	4698      	mov	r8, r3
     XFTimeout* pNewTimeOut = new XFTimeout(timeoutId,interval,pBehavior);//Create new XFTimeout with parameters
 8002d5e:	2018      	movs	r0, #24
 8002d60:	f000 fb2b 	bl	80033ba <_Znwj>
 8002d64:	4605      	mov	r5, r0
 8002d66:	4643      	mov	r3, r8
 8002d68:	463a      	mov	r2, r7
 8002d6a:	4631      	mov	r1, r6
 8002d6c:	f7ff ff4e 	bl	8002c0c <_ZN9XFTimeoutC1EiiPN9interface10XFBehaviorE>
     addTimeout(pNewTimeOut);//Add it to the list
 8002d70:	6823      	ldr	r3, [r4, #0]
 8002d72:	6a1b      	ldr	r3, [r3, #32]
 8002d74:	4629      	mov	r1, r5
 8002d76:	4620      	mov	r0, r4
 8002d78:	4798      	blx	r3
}
 8002d7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08002d80 <_ZN16XFTimeoutManagerC1Ev>:
XFTimeoutManager::XFTimeoutManager()
 8002d80:	b410      	push	{r4}
     */
    virtual void tick() = 0;

protected:
    XFTimeoutManager() :
        tickInterval_(0)
 8002d82:	2100      	movs	r1, #0
 8002d84:	6041      	str	r1, [r0, #4]
 8002d86:	4602      	mov	r2, r0
 8002d88:	4c04      	ldr	r4, [pc, #16]	; (8002d9c <_ZN16XFTimeoutManagerC1Ev+0x1c>)
 8002d8a:	f842 4b08 	str.w	r4, [r2], #8
#endif

      void
      _M_init() _GLIBCXX_NOEXCEPT
      {
	this->_M_next = this->_M_prev = this;
 8002d8e:	60c2      	str	r2, [r0, #12]
 8002d90:	6082      	str	r2, [r0, #8]
#if _GLIBCXX_USE_CXX11_ABI
	this->_M_size = 0;
 8002d92:	6101      	str	r1, [r0, #16]
}
 8002d94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	08004a40 	.word	0x08004a40

08002da0 <_ZN9interface16XFTimeoutManager11getInstanceEv>:
    static ::XFTimeoutManager timeoutManager;
 8002da0:	4b0d      	ldr	r3, [pc, #52]	; (8002dd8 <_ZN9interface16XFTimeoutManager11getInstanceEv+0x38>)
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	f3bf 8f5b 	dmb	ish
 8002da8:	f013 0f01 	tst.w	r3, #1
 8002dac:	d001      	beq.n	8002db2 <_ZN9interface16XFTimeoutManager11getInstanceEv+0x12>
}
 8002dae:	480b      	ldr	r0, [pc, #44]	; (8002ddc <_ZN9interface16XFTimeoutManager11getInstanceEv+0x3c>)
 8002db0:	4770      	bx	lr
{
 8002db2:	b510      	push	{r4, lr}
    static ::XFTimeoutManager timeoutManager;
 8002db4:	4808      	ldr	r0, [pc, #32]	; (8002dd8 <_ZN9interface16XFTimeoutManager11getInstanceEv+0x38>)
 8002db6:	f000 faf1 	bl	800339c <__cxa_guard_acquire>
 8002dba:	b908      	cbnz	r0, 8002dc0 <_ZN9interface16XFTimeoutManager11getInstanceEv+0x20>
}
 8002dbc:	4807      	ldr	r0, [pc, #28]	; (8002ddc <_ZN9interface16XFTimeoutManager11getInstanceEv+0x3c>)
 8002dbe:	bd10      	pop	{r4, pc}
    static ::XFTimeoutManager timeoutManager;
 8002dc0:	4c05      	ldr	r4, [pc, #20]	; (8002dd8 <_ZN9interface16XFTimeoutManager11getInstanceEv+0x38>)
 8002dc2:	1d20      	adds	r0, r4, #4
 8002dc4:	f7ff ffdc 	bl	8002d80 <_ZN16XFTimeoutManagerC1Ev>
 8002dc8:	4620      	mov	r0, r4
 8002dca:	f000 faf3 	bl	80033b4 <__cxa_guard_release>
 8002dce:	4804      	ldr	r0, [pc, #16]	; (8002de0 <_ZN9interface16XFTimeoutManager11getInstanceEv+0x40>)
 8002dd0:	f000 fb5c 	bl	800348c <atexit>
 8002dd4:	e7f2      	b.n	8002dbc <_ZN9interface16XFTimeoutManager11getInstanceEv+0x1c>
 8002dd6:	bf00      	nop
 8002dd8:	200002a0 	.word	0x200002a0
 8002ddc:	200002a4 	.word	0x200002a4
 8002de0:	08002f6d 	.word	0x08002f6d

08002de4 <_ZN16XFTimeoutManager13returnTimeoutEP9XFTimeout>:
            timeouts_.push_back(pNewTimeout);//Insert new timer at end of list
        }
    }
}
void XFTimeoutManager::returnTimeout(XFTimeout *pTimeout)
{
 8002de4:	b508      	push	{r3, lr}
 8002de6:	68c8      	ldr	r0, [r1, #12]
    pTimeout->getBehavior()->pushEvent(pTimeout,false);//Push event from the timer that is timeout
 8002de8:	6803      	ldr	r3, [r0, #0]
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	2200      	movs	r2, #0
 8002dee:	4798      	blx	r3
}
 8002df0:	bd08      	pop	{r3, pc}

08002df2 <_ZN16XFTimeoutManager4tickEv>:
       *  Returns true if the %list is empty.  (Thus begin() would equal
       *  end().)
       */
      _GLIBCXX_NODISCARD bool
      empty() const _GLIBCXX_NOEXCEPT
      { return this->_M_impl._M_node._M_next == &this->_M_impl._M_node; }
 8002df2:	4603      	mov	r3, r0
 8002df4:	f853 2f08 	ldr.w	r2, [r3, #8]!
    if(timeouts_.empty()==false)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d01b      	beq.n	8002e34 <_ZN16XFTimeoutManager4tickEv+0x42>
{
 8002dfc:	b510      	push	{r4, lr}
 8002dfe:	4604      	mov	r4, r0
        timeouts_.front()->substractFromRelTicks(tickInterval_);//Substract front timer with tickInterval
 8002e00:	6892      	ldr	r2, [r2, #8]
 8002e02:	6841      	ldr	r1, [r0, #4]

    bool deleteAfterConsume() const override;                                                       ///< Tells the dispatcher if the event must be deleted or not.

    inline void setRelTicks(int relTicks) { relTicks_ = relTicks; }                                 ///< Sets remaining ticks.
    inline int getRelTicks() const { return relTicks_; }                                            ///< Returns remaining ticks.
    inline void substractFromRelTicks(int ticksToSubstract) { relTicks_ -= ticksToSubstract; }      ///< Substracts `ticksToSubstract` from remaining ticks.
 8002e04:	6953      	ldr	r3, [r2, #20]
 8002e06:	1a5b      	subs	r3, r3, r1
 8002e08:	6153      	str	r3, [r2, #20]
      { return iterator(this->_M_impl._M_node._M_next); }
 8002e0a:	6883      	ldr	r3, [r0, #8]
        if(timeouts_.front()->getRelTicks()<=0)//If we reached the cooldown of the first timer
 8002e0c:	6899      	ldr	r1, [r3, #8]
    inline int getRelTicks() const { return relTicks_; }                                            ///< Returns remaining ticks.
 8002e0e:	694b      	ldr	r3, [r1, #20]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	dd00      	ble.n	8002e16 <_ZN16XFTimeoutManager4tickEv+0x24>
}
 8002e14:	bd10      	pop	{r4, pc}
            returnTimeout(timeouts_.front());//Push event of this timer
 8002e16:	f7ff ffe5 	bl	8002de4 <_ZN16XFTimeoutManager13returnTimeoutEP9XFTimeout>
            timeouts_.pop_front();//Pop this timer of the timeouts list
 8002e1a:	f104 0208 	add.w	r2, r4, #8
 8002e1e:	68a4      	ldr	r4, [r4, #8]
      void _M_dec_size(size_t __n) { _M_impl._M_node._M_size -= __n; }
 8002e20:	6893      	ldr	r3, [r2, #8]
 8002e22:	3b01      	subs	r3, #1
 8002e24:	6093      	str	r3, [r2, #8]
      // Erases element at position given.
      void
      _M_erase(iterator __position) _GLIBCXX_NOEXCEPT
      {
	this->_M_dec_size(1);
	__position._M_node->_M_unhook();
 8002e26:	4620      	mov	r0, r4
 8002e28:	f000 fae2 	bl	80033f0 <_ZNSt8__detail15_List_node_base9_M_unhookEv>
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
 8002e2c:	4620      	mov	r0, r4
 8002e2e:	f000 fab1 	bl	8003394 <_ZdlPv>
}
 8002e32:	e7ef      	b.n	8002e14 <_ZN16XFTimeoutManager4tickEv+0x22>
 8002e34:	4770      	bx	lr

08002e36 <_ZNKSt8functionIFvmEEclEm>:
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 8002e36:	b500      	push	{lr}
 8002e38:	b083      	sub	sp, #12
 8002e3a:	9101      	str	r1, [sp, #4]
    bool _M_empty() const { return !_M_manager; }
 8002e3c:	6883      	ldr	r3, [r0, #8]
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8002e3e:	b12b      	cbz	r3, 8002e4c <_ZNKSt8functionIFvmEEclEm+0x16>
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8002e40:	68c3      	ldr	r3, [r0, #12]
 8002e42:	a901      	add	r1, sp, #4
 8002e44:	4798      	blx	r3
    }
 8002e46:	b003      	add	sp, #12
 8002e48:	f85d fb04 	ldr.w	pc, [sp], #4
	__throw_bad_function_call();
 8002e4c:	f000 fadb 	bl	8003406 <_ZSt25__throw_bad_function_callv>

08002e50 <_ZN16XFTimeoutManager5startESt8functionIFvmEE>:
    bool _M_empty() const { return !_M_manager; }
 8002e50:	688a      	ldr	r2, [r1, #8]
	if (startTimeoutManagerTimer != nullptr) {
 8002e52:	b132      	cbz	r2, 8002e62 <_ZN16XFTimeoutManager5startESt8functionIFvmEE+0x12>
{
 8002e54:	b508      	push	{r3, lr}
 8002e56:	4603      	mov	r3, r0
 8002e58:	4608      	mov	r0, r1
		startTimeoutManagerTimer(tickInterval_);//Start timer wich will tick every tickInterval ms
 8002e5a:	6859      	ldr	r1, [r3, #4]
 8002e5c:	f7ff ffeb 	bl	8002e36 <_ZNKSt8functionIFvmEEclEm>
}
 8002e60:	bd08      	pop	{r3, pc}
 8002e62:	4770      	bx	lr

08002e64 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5eraseESt20_List_const_iteratorIS2_E>:
      }
#endif

  template<typename _Tp, typename _Alloc>
    typename list<_Tp, _Alloc>::iterator
    list<_Tp, _Alloc>::
 8002e64:	b538      	push	{r3, r4, r5, lr}
 8002e66:	460c      	mov	r4, r1
    erase(const_iterator __position) noexcept
#else
    erase(iterator __position)
#endif
    {
      iterator __ret = iterator(__position._M_node->_M_next);
 8002e68:	680d      	ldr	r5, [r1, #0]
      void _M_dec_size(size_t __n) { _M_impl._M_node._M_size -= __n; }
 8002e6a:	6883      	ldr	r3, [r0, #8]
 8002e6c:	3b01      	subs	r3, #1
 8002e6e:	6083      	str	r3, [r0, #8]
	__position._M_node->_M_unhook();
 8002e70:	4608      	mov	r0, r1
 8002e72:	f000 fabd 	bl	80033f0 <_ZNSt8__detail15_List_node_base9_M_unhookEv>
 8002e76:	4620      	mov	r0, r4
 8002e78:	f000 fa8c 	bl	8003394 <_ZdlPv>
      _M_erase(__position._M_const_cast());
      return __ret;
    }
 8002e7c:	4628      	mov	r0, r5
 8002e7e:	bd38      	pop	{r3, r4, r5, pc}

08002e80 <_ZN16XFTimeoutManager17unscheduleTimeoutElPN9interface10XFBehaviorE>:
{
 8002e80:	b538      	push	{r3, r4, r5, lr}
 8002e82:	4604      	mov	r4, r0
 8002e84:	460d      	mov	r5, r1
    for(std::list<XFTimeout *>::iterator it=timeouts_.begin();it!=timeouts_.end();it++)//Parcour the list
 8002e86:	6880      	ldr	r0, [r0, #8]
 8002e88:	e004      	b.n	8002e94 <_ZN16XFTimeoutManager17unscheduleTimeoutElPN9interface10XFBehaviorE+0x14>
            it=timeouts_.erase(it);//delete element and update iterator
 8002e8a:	f104 0008 	add.w	r0, r4, #8
 8002e8e:	f7ff ffe9 	bl	8002e64 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5eraseESt20_List_const_iteratorIS2_E>
	_M_node = _M_node->_M_next;
 8002e92:	6800      	ldr	r0, [r0, #0]
      { return iterator(&this->_M_impl._M_node); }
 8002e94:	f104 0308 	add.w	r3, r4, #8
      { return __x._M_node != __y._M_node; }
 8002e98:	4601      	mov	r1, r0
    for(std::list<XFTimeout *>::iterator it=timeouts_.begin();it!=timeouts_.end();it++)//Parcour the list
 8002e9a:	4298      	cmp	r0, r3
 8002e9c:	d004      	beq.n	8002ea8 <_ZN16XFTimeoutManager17unscheduleTimeoutElPN9interface10XFBehaviorE+0x28>
        if((*it)->getId()==timeoutId)//Check current timer id with id to delete
 8002e9e:	6883      	ldr	r3, [r0, #8]
    inline int getId() const { return id_; }		///< Returns #id_ identifying the event in the behaviors context.
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	429d      	cmp	r5, r3
 8002ea4:	d1f5      	bne.n	8002e92 <_ZN16XFTimeoutManager17unscheduleTimeoutElPN9interface10XFBehaviorE+0x12>
 8002ea6:	e7f0      	b.n	8002e8a <_ZN16XFTimeoutManager17unscheduleTimeoutElPN9interface10XFBehaviorE+0xa>
}
 8002ea8:	bd38      	pop	{r3, r4, r5, pc}

08002eaa <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE6insertESt20_List_const_iteratorIS2_ERKS2_>:
    list<_Tp, _Alloc>::
 8002eaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eac:	4605      	mov	r5, r0
 8002eae:	460e      	mov	r6, r1
 8002eb0:	4617      	mov	r7, r2
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8002eb2:	200c      	movs	r0, #12
 8002eb4:	f000 fa81 	bl	80033ba <_Znwj>
 8002eb8:	4604      	mov	r4, r0
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	6083      	str	r3, [r0, #8]
      __tmp->_M_hook(__position._M_const_cast()._M_node);
 8002ebe:	4631      	mov	r1, r6
 8002ec0:	f000 fa8f 	bl	80033e2 <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>
      void _M_inc_size(size_t __n) { _M_impl._M_node._M_size += __n; }
 8002ec4:	68ab      	ldr	r3, [r5, #8]
 8002ec6:	3301      	adds	r3, #1
 8002ec8:	60ab      	str	r3, [r5, #8]
    }
 8002eca:	4620      	mov	r0, r4
 8002ecc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002ece <_ZN16XFTimeoutManager10addTimeoutEP9XFTimeout>:
{
 8002ece:	b570      	push	{r4, r5, r6, lr}
 8002ed0:	b082      	sub	sp, #8
 8002ed2:	9101      	str	r1, [sp, #4]
      { return this->_M_impl._M_node._M_next == &this->_M_impl._M_node; }
 8002ed4:	4605      	mov	r5, r0
 8002ed6:	f855 4f08 	ldr.w	r4, [r5, #8]!
    if(timeouts_.empty())
 8002eda:	42a5      	cmp	r5, r4
 8002edc:	d00c      	beq.n	8002ef8 <_ZN16XFTimeoutManager10addTimeoutEP9XFTimeout+0x2a>
      { return __x._M_node != __y._M_node; }
 8002ede:	4621      	mov	r1, r4
        for(it=timeouts_.begin();it!=timeouts_.end();it++)//Parcour the list
 8002ee0:	42ac      	cmp	r4, r5
 8002ee2:	d01c      	beq.n	8002f1e <_ZN16XFTimeoutManager10addTimeoutEP9XFTimeout+0x50>
            if((*it)->getRelTicks()>(pNewTimeout->getRelTicks()))//Insert in middle of the list
 8002ee4:	68a6      	ldr	r6, [r4, #8]
 8002ee6:	6972      	ldr	r2, [r6, #20]
 8002ee8:	9c01      	ldr	r4, [sp, #4]
 8002eea:	6963      	ldr	r3, [r4, #20]
 8002eec:	4293      	cmp	r3, r2
 8002eee:	db0f      	blt.n	8002f10 <_ZN16XFTimeoutManager10addTimeoutEP9XFTimeout+0x42>
    inline void substractFromRelTicks(int ticksToSubstract) { relTicks_ -= ticksToSubstract; }      ///< Substracts `ticksToSubstract` from remaining ticks.
 8002ef0:	1a9b      	subs	r3, r3, r2
 8002ef2:	6163      	str	r3, [r4, #20]
	_M_node = _M_node->_M_next;
 8002ef4:	680c      	ldr	r4, [r1, #0]
	return __tmp;
 8002ef6:	e7f2      	b.n	8002ede <_ZN16XFTimeoutManager10addTimeoutEP9XFTimeout+0x10>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8002ef8:	200c      	movs	r0, #12
 8002efa:	f000 fa5e 	bl	80033ba <_Znwj>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8002efe:	9b01      	ldr	r3, [sp, #4]
 8002f00:	6083      	str	r3, [r0, #8]
	 __tmp->_M_hook(__position._M_node);
 8002f02:	4621      	mov	r1, r4
 8002f04:	f000 fa6d 	bl	80033e2 <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>
      void _M_inc_size(size_t __n) { _M_impl._M_node._M_size += __n; }
 8002f08:	68ab      	ldr	r3, [r5, #8]
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	60ab      	str	r3, [r5, #8]
      { this->_M_insert(begin(), __x); }
 8002f0e:	e013      	b.n	8002f38 <_ZN16XFTimeoutManager10addTimeoutEP9XFTimeout+0x6a>
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	6173      	str	r3, [r6, #20]
            timeouts_.insert(it,pNewTimeout);//Insert new timer at it position
 8002f14:	aa01      	add	r2, sp, #4
 8002f16:	3008      	adds	r0, #8
 8002f18:	f7ff ffc7 	bl	8002eaa <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE6insertESt20_List_const_iteratorIS2_ERKS2_>
 8002f1c:	e00c      	b.n	8002f38 <_ZN16XFTimeoutManager10addTimeoutEP9XFTimeout+0x6a>
            timeouts_.push_back(pNewTimeout);//Insert new timer at end of list
 8002f1e:	f100 0408 	add.w	r4, r0, #8
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8002f22:	200c      	movs	r0, #12
 8002f24:	f000 fa49 	bl	80033ba <_Znwj>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8002f28:	9b01      	ldr	r3, [sp, #4]
 8002f2a:	6083      	str	r3, [r0, #8]
	 __tmp->_M_hook(__position._M_node);
 8002f2c:	4629      	mov	r1, r5
 8002f2e:	f000 fa58 	bl	80033e2 <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>
      void _M_inc_size(size_t __n) { _M_impl._M_node._M_size += __n; }
 8002f32:	68a3      	ldr	r3, [r4, #8]
 8002f34:	3301      	adds	r3, #1
 8002f36:	60a3      	str	r3, [r4, #8]
}
 8002f38:	b002      	add	sp, #8
 8002f3a:	bd70      	pop	{r4, r5, r6, pc}

08002f3c <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE8_M_clearEv>:
    _List_base<_Tp, _Alloc>::
 8002f3c:	b538      	push	{r3, r4, r5, lr}
 8002f3e:	4605      	mov	r5, r0
      __detail::_List_node_base* __cur = _M_impl._M_node._M_next;
 8002f40:	6800      	ldr	r0, [r0, #0]
      while (__cur != &_M_impl._M_node)
 8002f42:	4285      	cmp	r5, r0
 8002f44:	d004      	beq.n	8002f50 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE8_M_clearEv+0x14>
	  __cur = __tmp->_M_next;
 8002f46:	6804      	ldr	r4, [r0, #0]
	::operator delete(__p);
 8002f48:	f000 fa24 	bl	8003394 <_ZdlPv>
 8002f4c:	4620      	mov	r0, r4
      { _Node_alloc_traits::deallocate(_M_impl, __p, 1); }
 8002f4e:	e7f8      	b.n	8002f42 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE8_M_clearEv+0x6>
    }
 8002f50:	bd38      	pop	{r3, r4, r5, pc}
	...

08002f54 <_ZN16XFTimeoutManagerD1Ev>:
XFTimeoutManager::~XFTimeoutManager()
 8002f54:	b510      	push	{r4, lr}
 8002f56:	4604      	mov	r4, r0
 8002f58:	4b03      	ldr	r3, [pc, #12]	; (8002f68 <_ZN16XFTimeoutManagerD1Ev+0x14>)
 8002f5a:	f840 3b08 	str.w	r3, [r0], #8
      { _M_clear(); }
 8002f5e:	f7ff ffed 	bl	8002f3c <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE8_M_clearEv>
}
 8002f62:	4620      	mov	r0, r4
 8002f64:	bd10      	pop	{r4, pc}
 8002f66:	bf00      	nop
 8002f68:	08004a40 	.word	0x08004a40

08002f6c <__tcf_0>:
    static ::XFTimeoutManager timeoutManager;
 8002f6c:	b508      	push	{r3, lr}
 8002f6e:	4802      	ldr	r0, [pc, #8]	; (8002f78 <__tcf_0+0xc>)
 8002f70:	f7ff fff0 	bl	8002f54 <_ZN16XFTimeoutManagerD1Ev>
 8002f74:	bd08      	pop	{r3, pc}
 8002f76:	bf00      	nop
 8002f78:	200002a4 	.word	0x200002a4

08002f7c <_ZN16XFTimeoutManagerD0Ev>:
XFTimeoutManager::~XFTimeoutManager()
 8002f7c:	b510      	push	{r4, lr}
 8002f7e:	4604      	mov	r4, r0
}
 8002f80:	f7ff ffe8 	bl	8002f54 <_ZN16XFTimeoutManagerD1Ev>
 8002f84:	2118      	movs	r1, #24
 8002f86:	4620      	mov	r0, r4
 8002f88:	f000 fa06 	bl	8003398 <_ZdlPvj>
 8002f8c:	4620      	mov	r0, r4
 8002f8e:	bd10      	pop	{r4, pc}

08002f90 <XF_tick>:
 * SysTick_Handler() function is already implemented in the STM32CubeMX generated
 * code (see Src/stm32fxxx_it.c file). Therefore, we must provide here a function
 * which can be explicitly called in SysTick_Handler() to tick the XF.
 */
void XF_tick()
{
 8002f90:	b508      	push	{r3, lr}
	bInISR = true;                              // Tell critical section we are in an ISR
 8002f92:	4b08      	ldr	r3, [pc, #32]	; (8002fb4 <XF_tick+0x24>)
 8002f94:	2201      	movs	r2, #1
 8002f96:	601a      	str	r2, [r3, #0]
	if (XF::isRunning())                        // Call tick only if XF is running
 8002f98:	f000 f9f6 	bl	8003388 <_ZN2XF9isRunningEv>
 8002f9c:	b918      	cbnz	r0, 8002fa6 <XF_tick+0x16>
	{
	    XFTimeoutManager::getInstance()->tick();    // Call framework hook tick function
	}
	bInISR = false;
 8002f9e:	4b05      	ldr	r3, [pc, #20]	; (8002fb4 <XF_tick+0x24>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	601a      	str	r2, [r3, #0]
}
 8002fa4:	bd08      	pop	{r3, pc}
	    XFTimeoutManager::getInstance()->tick();    // Call framework hook tick function
 8002fa6:	f7ff fefb 	bl	8002da0 <_ZN9interface16XFTimeoutManager11getInstanceEv>
 8002faa:	6803      	ldr	r3, [r0, #0]
 8002fac:	69db      	ldr	r3, [r3, #28]
 8002fae:	4798      	blx	r3
 8002fb0:	e7f5      	b.n	8002f9e <XF_tick+0xe>
 8002fb2:	bf00      	nop
 8002fb4:	2000024c 	.word	0x2000024c

08002fb8 <XF_tickIntervalInMilliseconds>:

/**
 * C function wrapping getTickInterval() method of XFTimeoutManager.
 */
int32_t XF_tickIntervalInMilliseconds()
{
 8002fb8:	b508      	push	{r3, lr}
    return XFTimeoutManager::getInstance()->getTickInterval();
 8002fba:	f7ff fef1 	bl	8002da0 <_ZN9interface16XFTimeoutManager11getInstanceEv>
 8002fbe:	6803      	ldr	r3, [r0, #0]
 8002fc0:	68db      	ldr	r3, [r3, #12]
 8002fc2:	4798      	blx	r3
}
 8002fc4:	bd08      	pop	{r3, pc}

08002fc6 <_ZNK12XFEventQueue5emptyEv>:
  // are in scope (for additional details, see libstdc++/3628)
  template<typename _Tp, typename _Ref, typename _Ptr>
    inline bool
    operator==(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
	       const _Deque_iterator<_Tp, _Ref, _Ptr>& __y) _GLIBCXX_NOEXCEPT
    { return __x._M_cur == __y._M_cur; }
 8002fc6:	6a03      	ldr	r3, [r0, #32]
 8002fc8:	6900      	ldr	r0, [r0, #16]
XFEventQueue::~XFEventQueue() {
}

bool XFEventQueue::empty() const {
	return _queue.empty();
}
 8002fca:	4298      	cmp	r0, r3
 8002fcc:	bf14      	ite	ne
 8002fce:	2000      	movne	r0, #0
 8002fd0:	2001      	moveq	r0, #1
 8002fd2:	4770      	bx	lr

08002fd4 <_ZN12XFEventQueue5frontEv>:
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8002fd4:	6903      	ldr	r3, [r0, #16]
	return true;
}

const XFEvent* XFEventQueue::front() {
	return _queue.front();
}
 8002fd6:	6818      	ldr	r0, [r3, #0]
 8002fd8:	4770      	bx	lr

08002fda <_ZN12XFEventQueue4pendEv>:
    { return __x._M_cur == __y._M_cur; }
 8002fda:	6a02      	ldr	r2, [r0, #32]
 8002fdc:	6900      	ldr	r0, [r0, #16]
	_queue.pop();
}

bool XFEventQueue::pend() {
	return !(_queue.empty());
}
 8002fde:	1a10      	subs	r0, r2, r0
 8002fe0:	bf18      	it	ne
 8002fe2:	2001      	movne	r0, #1
 8002fe4:	4770      	bx	lr

08002fe6 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE16_M_destroy_nodesEPPS2_S6_>:
	}
    }

  template<typename _Tp, typename _Alloc>
    void
    _Deque_base<_Tp, _Alloc>::
 8002fe6:	b538      	push	{r3, r4, r5, lr}
 8002fe8:	460c      	mov	r4, r1
 8002fea:	4615      	mov	r5, r2
    _M_destroy_nodes(_Map_pointer __nstart,
		     _Map_pointer __nfinish) _GLIBCXX_NOEXCEPT
    {
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8002fec:	42ac      	cmp	r4, r5
 8002fee:	d204      	bcs.n	8002ffa <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE16_M_destroy_nodesEPPS2_S6_+0x14>
 8002ff0:	f854 0b04 	ldr.w	r0, [r4], #4
 8002ff4:	f000 f9ce 	bl	8003394 <_ZdlPv>
 8002ff8:	e7f8      	b.n	8002fec <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE16_M_destroy_nodesEPPS2_S6_+0x6>
	_M_deallocate_node(*__n);
    }
 8002ffa:	bd38      	pop	{r3, r4, r5, pc}

08002ffc <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 8002ffc:	b510      	push	{r4, lr}
 8002ffe:	4604      	mov	r4, r0
      if (this->_M_impl._M_map)
 8003000:	6803      	ldr	r3, [r0, #0]
 8003002:	b13b      	cbz	r3, 8003014 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EED1Ev+0x18>
			   this->_M_impl._M_finish._M_node + 1);
 8003004:	6a42      	ldr	r2, [r0, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8003006:	3204      	adds	r2, #4
 8003008:	6941      	ldr	r1, [r0, #20]
 800300a:	f7ff ffec 	bl	8002fe6 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE16_M_destroy_nodesEPPS2_S6_>
 800300e:	6820      	ldr	r0, [r4, #0]
 8003010:	f000 f9c0 	bl	8003394 <_ZdlPv>
    }
 8003014:	4620      	mov	r0, r4
 8003016:	bd10      	pop	{r4, pc}

08003018 <_ZN12XFEventQueueD1Ev>:
XFEventQueue::~XFEventQueue() {
 8003018:	b510      	push	{r4, lr}
 800301a:	4604      	mov	r4, r0
 800301c:	4b03      	ldr	r3, [pc, #12]	; (800302c <_ZN12XFEventQueueD1Ev+0x14>)
 800301e:	f840 3b08 	str.w	r3, [r0], #8
       *  The dtor only erases the elements, and note that if the elements
       *  themselves are pointers, the pointed-to memory is not touched in any
       *  way.  Managing the pointer is the user's responsibility.
       */
      ~deque()
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 8003022:	f7ff ffeb 	bl	8002ffc <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EED1Ev>
}
 8003026:	4620      	mov	r0, r4
 8003028:	bd10      	pop	{r4, pc}
 800302a:	bf00      	nop
 800302c:	08004a6c 	.word	0x08004a6c

08003030 <_ZN12XFEventQueueD0Ev>:
XFEventQueue::~XFEventQueue() {
 8003030:	b510      	push	{r4, lr}
 8003032:	4604      	mov	r4, r0
}
 8003034:	f7ff fff0 	bl	8003018 <_ZN12XFEventQueueD1Ev>
 8003038:	2130      	movs	r1, #48	; 0x30
 800303a:	4620      	mov	r0, r4
 800303c:	f000 f9ac 	bl	8003398 <_ZdlPvj>
 8003040:	4620      	mov	r0, r4
 8003042:	bd10      	pop	{r4, pc}

08003044 <_ZNSt5dequeIPK7XFEventSaIS2_EE16_M_pop_front_auxEv>:
  // Note that if the deque has at least one element (a precondition for this
  // member function), and if
  //   _M_impl._M_start._M_cur == _M_impl._M_start._M_last,
  // then the deque must have at least two nodes.
  template <typename _Tp, typename _Alloc>
    void deque<_Tp, _Alloc>::
 8003044:	b510      	push	{r4, lr}
 8003046:	4604      	mov	r4, r0
 8003048:	68c0      	ldr	r0, [r0, #12]
 800304a:	f000 f9a3 	bl	8003394 <_ZdlPv>
    _M_pop_front_aux()
    {
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
			     this->_M_impl._M_start._M_cur);
      _M_deallocate_node(this->_M_impl._M_start._M_first);
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
 800304e:	6963      	ldr	r3, [r4, #20]
 8003050:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
 8003052:	6162      	str	r2, [r4, #20]
	_M_first = *__new_node;
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	60e3      	str	r3, [r4, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
 8003058:	f503 7200 	add.w	r2, r3, #512	; 0x200
 800305c:	6122      	str	r2, [r4, #16]
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
 800305e:	60a3      	str	r3, [r4, #8]
    }
 8003060:	bd10      	pop	{r4, pc}

08003062 <_ZN12XFEventQueue3popEv>:
void XFEventQueue::pop() {
 8003062:	b508      	push	{r3, lr}
       */
      void
      pop_front() _GLIBCXX_NOEXCEPT
      {
	__glibcxx_requires_nonempty();
	if (this->_M_impl._M_start._M_cur
 8003064:	6903      	ldr	r3, [r0, #16]
	    != this->_M_impl._M_start._M_last - 1)
 8003066:	6982      	ldr	r2, [r0, #24]
 8003068:	3a04      	subs	r2, #4
	if (this->_M_impl._M_start._M_cur
 800306a:	4293      	cmp	r3, r2
 800306c:	d002      	beq.n	8003074 <_ZN12XFEventQueue3popEv+0x12>
	  {
	    _Alloc_traits::destroy(this->_M_impl,
				   this->_M_impl._M_start._M_cur);
	    ++this->_M_impl._M_start._M_cur;
 800306e:	3304      	adds	r3, #4
 8003070:	6103      	str	r3, [r0, #16]
}
 8003072:	bd08      	pop	{r3, pc}
 8003074:	f100 0108 	add.w	r1, r0, #8
	  }
	else
	  _M_pop_front_aux();
 8003078:	4608      	mov	r0, r1
 800307a:	f7ff ffe3 	bl	8003044 <_ZNSt5dequeIPK7XFEventSaIS2_EE16_M_pop_front_auxEv>
 800307e:	e7f8      	b.n	8003072 <_ZN12XFEventQueue3popEv+0x10>

08003080 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE15_M_create_nodesEPPS2_S6_>:
    _Deque_base<_Tp, _Alloc>::
 8003080:	b538      	push	{r3, r4, r5, lr}
 8003082:	460c      	mov	r4, r1
 8003084:	4615      	mov	r5, r2
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8003086:	42ac      	cmp	r4, r5
 8003088:	d206      	bcs.n	8003098 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE15_M_create_nodesEPPS2_S6_+0x18>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800308a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800308e:	f000 f994 	bl	80033ba <_Znwj>
	    *__cur = this->_M_allocate_node();
 8003092:	f844 0b04 	str.w	r0, [r4], #4
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8003096:	e7f6      	b.n	8003086 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE15_M_create_nodesEPPS2_S6_+0x6>
    }
 8003098:	bd38      	pop	{r3, r4, r5, pc}

0800309a <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 800309a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800309e:	b083      	sub	sp, #12
 80030a0:	4604      	mov	r4, r0
 80030a2:	460d      	mov	r5, r1
      const size_t __num_nodes = (__num_elements/ __deque_buf_size(sizeof(_Tp))
 80030a4:	09cb      	lsrs	r3, r1, #7
 80030a6:	1c5e      	adds	r6, r3, #1
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 80030a8:	2208      	movs	r2, #8
 80030aa:	9200      	str	r2, [sp, #0]
					   size_t(__num_nodes + 2));
 80030ac:	3303      	adds	r3, #3
 80030ae:	9301      	str	r3, [sp, #4]
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d82f      	bhi.n	8003114 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE17_M_initialize_mapEj+0x7a>
	return __b;
      return __a;
 80030b4:	466b      	mov	r3, sp
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 80030b6:	6818      	ldr	r0, [r3, #0]
 80030b8:	6060      	str	r0, [r4, #4]
	if (__n > this->max_size())
 80030ba:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
 80030be:	d22b      	bcs.n	8003118 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE17_M_initialize_mapEj+0x7e>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80030c0:	0080      	lsls	r0, r0, #2
 80030c2:	f000 f97a 	bl	80033ba <_Znwj>
 80030c6:	4680      	mov	r8, r0
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 80030c8:	6020      	str	r0, [r4, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 80030ca:	6867      	ldr	r7, [r4, #4]
 80030cc:	1bbf      	subs	r7, r7, r6
 80030ce:	087f      	lsrs	r7, r7, #1
      _Map_pointer __nstart = (this->_M_impl._M_map
 80030d0:	eb00 0987 	add.w	r9, r0, r7, lsl #2
      _Map_pointer __nfinish = __nstart + __num_nodes;
 80030d4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
	{ _M_create_nodes(__nstart, __nfinish); }
 80030d8:	4632      	mov	r2, r6
 80030da:	4649      	mov	r1, r9
 80030dc:	4620      	mov	r0, r4
 80030de:	f7ff ffcf 	bl	8003080 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE15_M_create_nodesEPPS2_S6_>
	_M_node = __new_node;
 80030e2:	f8c4 9014 	str.w	r9, [r4, #20]
	_M_first = *__new_node;
 80030e6:	f858 2027 	ldr.w	r2, [r8, r7, lsl #2]
 80030ea:	60e2      	str	r2, [r4, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
 80030ec:	f502 7300 	add.w	r3, r2, #512	; 0x200
 80030f0:	6123      	str	r3, [r4, #16]
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 80030f2:	1f33      	subs	r3, r6, #4
	_M_node = __new_node;
 80030f4:	6263      	str	r3, [r4, #36]	; 0x24
	_M_first = *__new_node;
 80030f6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80030fa:	61e3      	str	r3, [r4, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
 80030fc:	f503 7100 	add.w	r1, r3, #512	; 0x200
 8003100:	6221      	str	r1, [r4, #32]
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 8003102:	60a2      	str	r2, [r4, #8]
					% __deque_buf_size(sizeof(_Tp)));
 8003104:	f005 057f 	and.w	r5, r5, #127	; 0x7f
					+ __num_elements
 8003108:	eb03 0385 	add.w	r3, r3, r5, lsl #2
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 800310c:	61a3      	str	r3, [r4, #24]
    }
 800310e:	b003      	add	sp, #12
 8003110:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return __b;
 8003114:	ab01      	add	r3, sp, #4
 8003116:	e7ce      	b.n	80030b6 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE17_M_initialize_mapEj+0x1c>
	  std::__throw_bad_alloc();
 8003118:	f000 f96f 	bl	80033fa <_ZSt17__throw_bad_allocv>

0800311c <_ZN12XFEventQueueC1Ev>:
XFEventQueue::XFEventQueue() {
 800311c:	b510      	push	{r4, lr}
 800311e:	4604      	mov	r4, r0
 8003120:	4b09      	ldr	r3, [pc, #36]	; (8003148 <_ZN12XFEventQueueC1Ev+0x2c>)
 8003122:	6003      	str	r3, [r0, #0]
	void unlock() override;

	bool tryLock(int32_t timeout = 0) override;

protected:
    XFMutex() = default;     ///< Do not allow to directly create an object of this class. Call interface::XFMutex::create() instead.
 8003124:	4b09      	ldr	r3, [pc, #36]	; (800314c <_ZN12XFEventQueueC1Ev+0x30>)
 8003126:	6043      	str	r3, [r0, #4]
	  _M_start(), _M_finish()
 8003128:	2100      	movs	r1, #0
 800312a:	6081      	str	r1, [r0, #8]
 800312c:	60c1      	str	r1, [r0, #12]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 800312e:	6101      	str	r1, [r0, #16]
 8003130:	6141      	str	r1, [r0, #20]
 8003132:	6181      	str	r1, [r0, #24]
 8003134:	61c1      	str	r1, [r0, #28]
 8003136:	6201      	str	r1, [r0, #32]
 8003138:	6241      	str	r1, [r0, #36]	; 0x24
 800313a:	6281      	str	r1, [r0, #40]	; 0x28
 800313c:	62c1      	str	r1, [r0, #44]	; 0x2c
      { _M_initialize_map(0); }
 800313e:	3008      	adds	r0, #8
 8003140:	f7ff ffab 	bl	800309a <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE17_M_initialize_mapEj>
}
 8003144:	4620      	mov	r0, r4
 8003146:	bd10      	pop	{r4, pc}
 8003148:	08004a6c 	.word	0x08004a6c
 800314c:	08004a90 	.word	0x08004a90

08003150 <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb>:
        }
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
 8003150:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003154:	b082      	sub	sp, #8
 8003156:	4606      	mov	r6, r0
 8003158:	9101      	str	r1, [sp, #4]
 800315a:	4690      	mov	r8, r2
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 800315c:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800315e:	6940      	ldr	r0, [r0, #20]
 8003160:	1a17      	subs	r7, r2, r0
 8003162:	10bd      	asrs	r5, r7, #2
 8003164:	3501      	adds	r5, #1
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 8003166:	440d      	add	r5, r1

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 8003168:	6873      	ldr	r3, [r6, #4]
 800316a:	ebb3 0f45 	cmp.w	r3, r5, lsl #1
 800316e:	d922      	bls.n	80031b6 <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0x66>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8003170:	f8d6 c000 	ldr.w	ip, [r6]
					 - __new_num_nodes) / 2
 8003174:	1b5c      	subs	r4, r3, r5
 8003176:	0864      	lsrs	r4, r4, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8003178:	00a4      	lsls	r4, r4, #2
	                 + (__add_at_front ? __nodes_to_add : 0);
 800317a:	f1b8 0f00 	cmp.w	r8, #0
 800317e:	d001      	beq.n	8003184 <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0x34>
 8003180:	0089      	lsls	r1, r1, #2
 8003182:	e000      	b.n	8003186 <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0x36>
 8003184:	2100      	movs	r1, #0
 8003186:	440c      	add	r4, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8003188:	4464      	add	r4, ip
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 800318a:	42a0      	cmp	r0, r4
 800318c:	d908      	bls.n	80031a0 <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0x50>
	    std::copy(this->_M_impl._M_start._M_node,
 800318e:	1d13      	adds	r3, r2, #4
					   is_move_assignable<_Tp>,
					   is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
 8003190:	1a1a      	subs	r2, r3, r0
	  if (_Num)
 8003192:	4298      	cmp	r0, r3
 8003194:	d039      	beq.n	800320a <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0xba>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8003196:	4601      	mov	r1, r0
 8003198:	4620      	mov	r0, r4
 800319a:	f000 f9d1 	bl	8003540 <memmove>
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a2<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800319e:	e034      	b.n	800320a <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0xba>
		      this->_M_impl._M_finish._M_node + 1,
		      __new_nstart);
	  else
	    std::copy_backward(this->_M_impl._M_start._M_node,
 80031a0:	1d13      	adds	r3, r2, #4
 80031a2:	1d3a      	adds	r2, r7, #4
 80031a4:	18a5      	adds	r5, r4, r2
					   is_move_assignable<_Tp>,
					   is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
 80031a6:	1a1a      	subs	r2, r3, r0
	  if (_Num)
 80031a8:	4298      	cmp	r0, r3
 80031aa:	d02e      	beq.n	800320a <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0xba>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 80031ac:	4601      	mov	r1, r0
 80031ae:	1aa8      	subs	r0, r5, r2
 80031b0:	f000 f9c6 	bl	8003540 <memmove>
	    typename iterator_traits<_BI1>::value_type,
	    typename iterator_traits<_BI2>::value_type>)
      __glibcxx_requires_can_decrement_range(__first, __last, __result);

      return std::__copy_move_backward_a2<__is_move_iterator<_BI1>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80031b4:	e029      	b.n	800320a <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0xba>
			       __new_nstart + __old_num_nodes);
	}
      else
	{
	  size_type __new_map_size = this->_M_impl._M_map_size
	                             + std::max(this->_M_impl._M_map_size,
 80031b6:	1d32      	adds	r2, r6, #4
      if (__a < __b)
 80031b8:	4299      	cmp	r1, r3
 80031ba:	d836      	bhi.n	800322a <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0xda>
 80031bc:	6812      	ldr	r2, [r2, #0]
 80031be:	4413      	add	r3, r2
	  size_type __new_map_size = this->_M_impl._M_map_size
 80031c0:	f103 0902 	add.w	r9, r3, #2
	if (__n > this->max_size())
 80031c4:	f1b9 5f00 	cmp.w	r9, #536870912	; 0x20000000
 80031c8:	d231      	bcs.n	800322e <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0xde>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80031ca:	ea4f 0089 	mov.w	r0, r9, lsl #2
 80031ce:	f000 f8f4 	bl	80033ba <_Znwj>
 80031d2:	4682      	mov	sl, r0
						__nodes_to_add) + 2;

	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 80031d4:	eba9 0405 	sub.w	r4, r9, r5
 80031d8:	0864      	lsrs	r4, r4, #1
 80031da:	00a4      	lsls	r4, r4, #2
	                 + (__add_at_front ? __nodes_to_add : 0);
 80031dc:	f1b8 0f00 	cmp.w	r8, #0
 80031e0:	d027      	beq.n	8003232 <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0xe2>
 80031e2:	9d01      	ldr	r5, [sp, #4]
 80031e4:	00ad      	lsls	r5, r5, #2
 80031e6:	442c      	add	r4, r5
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 80031e8:	4454      	add	r4, sl
	  std::copy(this->_M_impl._M_start._M_node,
 80031ea:	6971      	ldr	r1, [r6, #20]
		    this->_M_impl._M_finish._M_node + 1,
 80031ec:	6a73      	ldr	r3, [r6, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 80031ee:	3304      	adds	r3, #4
	  const ptrdiff_t _Num = __last - __first;
 80031f0:	1a5a      	subs	r2, r3, r1
	  if (_Num)
 80031f2:	4299      	cmp	r1, r3
 80031f4:	d002      	beq.n	80031fc <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0xac>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80031f6:	4620      	mov	r0, r4
 80031f8:	f000 f9a2 	bl	8003540 <memmove>
	::operator delete(__p);
 80031fc:	6830      	ldr	r0, [r6, #0]
 80031fe:	f000 f8c9 	bl	8003394 <_ZdlPv>
		    __new_nstart);
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);

	  this->_M_impl._M_map = __new_map;
 8003202:	f8c6 a000 	str.w	sl, [r6]
	  this->_M_impl._M_map_size = __new_map_size;
 8003206:	f8c6 9004 	str.w	r9, [r6, #4]
	_M_node = __new_node;
 800320a:	6174      	str	r4, [r6, #20]
	_M_first = *__new_node;
 800320c:	6823      	ldr	r3, [r4, #0]
 800320e:	60f3      	str	r3, [r6, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
 8003210:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003214:	6133      	str	r3, [r6, #16]
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 8003216:	19e3      	adds	r3, r4, r7
	_M_node = __new_node;
 8003218:	6273      	str	r3, [r6, #36]	; 0x24
	_M_first = *__new_node;
 800321a:	59e3      	ldr	r3, [r4, r7]
 800321c:	61f3      	str	r3, [r6, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
 800321e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003222:	6233      	str	r3, [r6, #32]
    }
 8003224:	b002      	add	sp, #8
 8003226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return __b;
 800322a:	aa01      	add	r2, sp, #4
 800322c:	e7c6      	b.n	80031bc <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0x6c>
	  std::__throw_bad_alloc();
 800322e:	f000 f8e4 	bl	80033fa <_ZSt17__throw_bad_allocv>
	                 + (__add_at_front ? __nodes_to_add : 0);
 8003232:	2500      	movs	r5, #0
 8003234:	e7d7      	b.n	80031e6 <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0x96>
	...

08003238 <_ZNSt5dequeIPK7XFEventSaIS2_EE16_M_push_back_auxIJRKS2_EEEvDpOT_>:
      deque<_Tp, _Alloc>::
 8003238:	b570      	push	{r4, r5, r6, lr}
 800323a:	460d      	mov	r5, r1
	* (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 800323c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800323e:	6942      	ldr	r2, [r0, #20]
 8003240:	1a9b      	subs	r3, r3, r2
 8003242:	109b      	asrs	r3, r3, #2
 8003244:	1e5a      	subs	r2, r3, #1
 8003246:	6983      	ldr	r3, [r0, #24]
 8003248:	69c1      	ldr	r1, [r0, #28]
 800324a:	1a5b      	subs	r3, r3, r1
 800324c:	109b      	asrs	r3, r3, #2
 800324e:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
	+ (__y._M_last - __y._M_cur);
 8003252:	6902      	ldr	r2, [r0, #16]
 8003254:	6881      	ldr	r1, [r0, #8]
 8003256:	1a52      	subs	r2, r2, r1
 8003258:	eb03 03a2 	add.w	r3, r3, r2, asr #2
	if (size() == max_size())
 800325c:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 8003260:	4293      	cmp	r3, r2
 8003262:	d01b      	beq.n	800329c <_ZNSt5dequeIPK7XFEventSaIS2_EE16_M_push_back_auxIJRKS2_EEEvDpOT_+0x64>
 8003264:	4604      	mov	r4, r0
       *  (And consequently, %deque iterators.)
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8003266:	6843      	ldr	r3, [r0, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 8003268:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800326a:	6801      	ldr	r1, [r0, #0]
 800326c:	1a52      	subs	r2, r2, r1
 800326e:	eba3 03a2 	sub.w	r3, r3, r2, asr #2
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8003272:	2b01      	cmp	r3, #1
 8003274:	d915      	bls.n	80032a2 <_ZNSt5dequeIPK7XFEventSaIS2_EE16_M_push_back_auxIJRKS2_EEEvDpOT_+0x6a>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 8003276:	6a66      	ldr	r6, [r4, #36]	; 0x24
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8003278:	f44f 7000 	mov.w	r0, #512	; 0x200
 800327c:	f000 f89d 	bl	80033ba <_Znwj>
 8003280:	6070      	str	r0, [r6, #4]
	    _Alloc_traits::construct(this->_M_impl,
 8003282:	69a3      	ldr	r3, [r4, #24]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8003284:	682a      	ldr	r2, [r5, #0]
 8003286:	601a      	str	r2, [r3, #0]
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 8003288:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800328a:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
 800328c:	6262      	str	r2, [r4, #36]	; 0x24
	_M_first = *__new_node;
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	61e3      	str	r3, [r4, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
 8003292:	f503 7200 	add.w	r2, r3, #512	; 0x200
 8003296:	6222      	str	r2, [r4, #32]
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 8003298:	61a3      	str	r3, [r4, #24]
      }
 800329a:	bd70      	pop	{r4, r5, r6, pc}
	  __throw_length_error(
 800329c:	4803      	ldr	r0, [pc, #12]	; (80032ac <_ZNSt5dequeIPK7XFEventSaIS2_EE16_M_push_back_auxIJRKS2_EEEvDpOT_+0x74>)
 800329e:	f000 f8af 	bl	8003400 <_ZSt20__throw_length_errorPKc>
	  _M_reallocate_map(__nodes_to_add, false);
 80032a2:	2200      	movs	r2, #0
 80032a4:	2101      	movs	r1, #1
 80032a6:	f7ff ff53 	bl	8003150 <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb>
 80032aa:	e7e4      	b.n	8003276 <_ZNSt5dequeIPK7XFEventSaIS2_EE16_M_push_back_auxIJRKS2_EEEvDpOT_+0x3e>
 80032ac:	08004d18 	.word	0x08004d18

080032b0 <_ZN12XFEventQueue4pushEPK7XFEventb>:
bool XFEventQueue::push(const XFEvent *pEvent, bool fromISR) {
 80032b0:	b500      	push	{lr}
 80032b2:	b083      	sub	sp, #12
 80032b4:	9101      	str	r1, [sp, #4]
       *  to it.  The time complexity of the operation depends on the
       *  underlying sequence.
       */
      void
      push(const value_type& __x)
      { c.push_back(__x); }
 80032b6:	3008      	adds	r0, #8
	if (this->_M_impl._M_finish._M_cur
 80032b8:	6982      	ldr	r2, [r0, #24]
	    != this->_M_impl._M_finish._M_last - 1)
 80032ba:	6a03      	ldr	r3, [r0, #32]
 80032bc:	3b04      	subs	r3, #4
	if (this->_M_impl._M_finish._M_cur
 80032be:	429a      	cmp	r2, r3
 80032c0:	d007      	beq.n	80032d2 <_ZN12XFEventQueue4pushEPK7XFEventb+0x22>
 80032c2:	6011      	str	r1, [r2, #0]
	    ++this->_M_impl._M_finish._M_cur;
 80032c4:	6983      	ldr	r3, [r0, #24]
 80032c6:	3304      	adds	r3, #4
 80032c8:	6183      	str	r3, [r0, #24]
}
 80032ca:	2001      	movs	r0, #1
 80032cc:	b003      	add	sp, #12
 80032ce:	f85d fb04 	ldr.w	pc, [sp], #4
	  _M_push_back_aux(__x);
 80032d2:	a901      	add	r1, sp, #4
 80032d4:	f7ff ffb0 	bl	8003238 <_ZNSt5dequeIPK7XFEventSaIS2_EE16_M_push_back_auxIJRKS2_EEEvDpOT_>
 80032d8:	e7f7      	b.n	80032ca <_ZN12XFEventQueue4pushEPK7XFEventb+0x1a>

080032da <_ZN7XFMutex7tryLockEl>:
	exitCritical();
}

bool XFMutex::tryLock(int32_t timeout) {
	return false;
}
 80032da:	2000      	movs	r0, #0
 80032dc:	4770      	bx	lr

080032de <_ZN7XFMutexD1Ev>:
class XFMutex : public interface::XFMutex
 80032de:	4770      	bx	lr

080032e0 <_ZN7XFMutex4lockEv>:
void XFMutex::lock() {
 80032e0:	b508      	push	{r3, lr}
	enterCritical();
 80032e2:	f7ff fb6d 	bl	80029c0 <_Z13enterCriticalv>
}
 80032e6:	bd08      	pop	{r3, pc}

080032e8 <_ZN7XFMutex6unlockEv>:
void XFMutex::unlock() {
 80032e8:	b508      	push	{r3, lr}
	exitCritical();
 80032ea:	f7ff fb79 	bl	80029e0 <_Z12exitCriticalv>
}
 80032ee:	bd08      	pop	{r3, pc}

080032f0 <_ZN7XFMutexD0Ev>:
 80032f0:	b510      	push	{r4, lr}
 80032f2:	4604      	mov	r4, r0
 80032f4:	2104      	movs	r1, #4
 80032f6:	f000 f84f 	bl	8003398 <_ZdlPvj>
 80032fa:	4620      	mov	r0, r4
 80032fc:	bd10      	pop	{r4, pc}
	...

08003300 <_ZN9interface7XFMutex6createEv>:
{
 8003300:	b508      	push	{r3, lr}
    return new ::XFMutex;
 8003302:	2004      	movs	r0, #4
 8003304:	f000 f859 	bl	80033ba <_Znwj>
    XFMutex() = default;     ///< Do not allow to directly create an object of this class. Call interface::XFMutex::create() instead.
 8003308:	4b01      	ldr	r3, [pc, #4]	; (8003310 <_ZN9interface7XFMutex6createEv+0x10>)
 800330a:	6003      	str	r3, [r0, #0]
}
 800330c:	bd08      	pop	{r3, pc}
 800330e:	bf00      	nop
 8003310:	08004a90 	.word	0x08004a90

08003314 <_ZN2XF10initializeEiiPPc>:
{
    XF::execOnce();
}

void XF::initialize(int timeInterval, int argc, char *argv[]) {
	if (!isInitialized_)
 8003314:	4b0f      	ldr	r3, [pc, #60]	; (8003354 <_ZN2XF10initializeEiiPPc+0x40>)
 8003316:	781b      	ldrb	r3, [r3, #0]
 8003318:	b103      	cbz	r3, 800331c <_ZN2XF10initializeEiiPPc+0x8>
 800331a:	4770      	bx	lr
void XF::initialize(int timeInterval, int argc, char *argv[]) {
 800331c:	b510      	push	{r4, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	4604      	mov	r4, r0
	    {
	        // Create and initialize TimeoutManager
	        interface::XFTimeoutManager::getInstance()->initialize(timeInterval);
 8003322:	f7ff fd3d 	bl	8002da0 <_ZN9interface16XFTimeoutManager11getInstanceEv>
 8003326:	6803      	ldr	r3, [r0, #0]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	4621      	mov	r1, r4
 800332c:	4798      	blx	r3
	        // Start it
	        interface::XFTimeoutManager::getInstance()->start();
 800332e:	f7ff fd37 	bl	8002da0 <_ZN9interface16XFTimeoutManager11getInstanceEv>
 8003332:	6803      	ldr	r3, [r0, #0]
 8003334:	691b      	ldr	r3, [r3, #16]
    _Function_base() : _M_manager(nullptr) { }
 8003336:	2200      	movs	r2, #0
 8003338:	9202      	str	r2, [sp, #8]
 800333a:	4669      	mov	r1, sp
 800333c:	4798      	blx	r3
      if (_M_manager)
 800333e:	9b02      	ldr	r3, [sp, #8]
 8003340:	b11b      	cbz	r3, 800334a <_ZN2XF10initializeEiiPPc+0x36>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8003342:	2203      	movs	r2, #3
 8003344:	4669      	mov	r1, sp
 8003346:	4668      	mov	r0, sp
 8003348:	4798      	blx	r3

	        isInitialized_ = true;
 800334a:	4b02      	ldr	r3, [pc, #8]	; (8003354 <_ZN2XF10initializeEiiPPc+0x40>)
 800334c:	2201      	movs	r2, #1
 800334e:	701a      	strb	r2, [r3, #0]
	    }
}
 8003350:	b004      	add	sp, #16
 8003352:	bd10      	pop	{r4, pc}
 8003354:	200002bc 	.word	0x200002bc

08003358 <XF_initialize>:
{
 8003358:	b508      	push	{r3, lr}
    XF::initialize(timeInterval);
 800335a:	2200      	movs	r2, #0
 800335c:	4611      	mov	r1, r2
 800335e:	f7ff ffd9 	bl	8003314 <_ZN2XF10initializeEiiPPc>
}
 8003362:	bd08      	pop	{r3, pc}

08003364 <_ZN2XF8execOnceEv>:

	    isRunning_ = true;
	    return 1;
}

int XF::execOnce() {
 8003364:	b510      	push	{r4, lr}
		isRunning_ = true;
 8003366:	2401      	movs	r4, #1
 8003368:	4b04      	ldr	r3, [pc, #16]	; (800337c <_ZN2XF8execOnceEv+0x18>)
 800336a:	705c      	strb	r4, [r3, #1]
		interface::XFDispatcher::getInstance()->executeOnce();
 800336c:	f7ff fc94 	bl	8002c98 <_ZN9interface12XFDispatcher11getInstanceEv>
 8003370:	6803      	ldr	r3, [r0, #0]
 8003372:	699b      	ldr	r3, [r3, #24]
 8003374:	4798      	blx	r3
	    return 1;
}
 8003376:	4620      	mov	r0, r4
 8003378:	bd10      	pop	{r4, pc}
 800337a:	bf00      	nop
 800337c:	200002bc 	.word	0x200002bc

08003380 <XF_execOnce>:
{
 8003380:	b508      	push	{r3, lr}
    XF::execOnce();
 8003382:	f7ff ffef 	bl	8003364 <_ZN2XF8execOnceEv>
}
 8003386:	bd08      	pop	{r3, pc}

08003388 <_ZN2XF9isRunningEv>:

bool XF::isRunning() {
	return isRunning_;
}
 8003388:	4b01      	ldr	r3, [pc, #4]	; (8003390 <_ZN2XF9isRunningEv+0x8>)
 800338a:	7858      	ldrb	r0, [r3, #1]
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop
 8003390:	200002bc 	.word	0x200002bc

08003394 <_ZdlPv>:
 8003394:	f000 b8be 	b.w	8003514 <free>

08003398 <_ZdlPvj>:
 8003398:	f7ff bffc 	b.w	8003394 <_ZdlPv>

0800339c <__cxa_guard_acquire>:
 800339c:	6803      	ldr	r3, [r0, #0]
 800339e:	07db      	lsls	r3, r3, #31
 80033a0:	d406      	bmi.n	80033b0 <__cxa_guard_acquire+0x14>
 80033a2:	7843      	ldrb	r3, [r0, #1]
 80033a4:	b103      	cbz	r3, 80033a8 <__cxa_guard_acquire+0xc>
 80033a6:	deff      	udf	#255	; 0xff
 80033a8:	2301      	movs	r3, #1
 80033aa:	7043      	strb	r3, [r0, #1]
 80033ac:	4618      	mov	r0, r3
 80033ae:	4770      	bx	lr
 80033b0:	2000      	movs	r0, #0
 80033b2:	4770      	bx	lr

080033b4 <__cxa_guard_release>:
 80033b4:	2301      	movs	r3, #1
 80033b6:	6003      	str	r3, [r0, #0]
 80033b8:	4770      	bx	lr

080033ba <_Znwj>:
 80033ba:	2801      	cmp	r0, #1
 80033bc:	bf38      	it	cc
 80033be:	2001      	movcc	r0, #1
 80033c0:	b510      	push	{r4, lr}
 80033c2:	4604      	mov	r4, r0
 80033c4:	4620      	mov	r0, r4
 80033c6:	f000 f89d 	bl	8003504 <malloc>
 80033ca:	b930      	cbnz	r0, 80033da <_Znwj+0x20>
 80033cc:	f000 f830 	bl	8003430 <_ZSt15get_new_handlerv>
 80033d0:	b908      	cbnz	r0, 80033d6 <_Znwj+0x1c>
 80033d2:	f000 f835 	bl	8003440 <abort>
 80033d6:	4780      	blx	r0
 80033d8:	e7f4      	b.n	80033c4 <_Znwj+0xa>
 80033da:	bd10      	pop	{r4, pc}

080033dc <__cxa_pure_virtual>:
 80033dc:	b508      	push	{r3, lr}
 80033de:	f000 f821 	bl	8003424 <_ZSt9terminatev>

080033e2 <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>:
 80033e2:	684b      	ldr	r3, [r1, #4]
 80033e4:	6043      	str	r3, [r0, #4]
 80033e6:	684b      	ldr	r3, [r1, #4]
 80033e8:	6001      	str	r1, [r0, #0]
 80033ea:	6018      	str	r0, [r3, #0]
 80033ec:	6048      	str	r0, [r1, #4]
 80033ee:	4770      	bx	lr

080033f0 <_ZNSt8__detail15_List_node_base9_M_unhookEv>:
 80033f0:	e9d0 3200 	ldrd	r3, r2, [r0]
 80033f4:	6013      	str	r3, [r2, #0]
 80033f6:	605a      	str	r2, [r3, #4]
 80033f8:	4770      	bx	lr

080033fa <_ZSt17__throw_bad_allocv>:
 80033fa:	b508      	push	{r3, lr}
 80033fc:	f000 f820 	bl	8003440 <abort>

08003400 <_ZSt20__throw_length_errorPKc>:
 8003400:	b508      	push	{r3, lr}
 8003402:	f000 f81d 	bl	8003440 <abort>

08003406 <_ZSt25__throw_bad_function_callv>:
 8003406:	b508      	push	{r3, lr}
 8003408:	f000 f81a 	bl	8003440 <abort>

0800340c <_ZN10__cxxabiv111__terminateEPFvvE>:
 800340c:	b508      	push	{r3, lr}
 800340e:	4780      	blx	r0
 8003410:	f000 f816 	bl	8003440 <abort>

08003414 <_ZSt13get_terminatev>:
 8003414:	4b02      	ldr	r3, [pc, #8]	; (8003420 <_ZSt13get_terminatev+0xc>)
 8003416:	6818      	ldr	r0, [r3, #0]
 8003418:	f3bf 8f5b 	dmb	ish
 800341c:	4770      	bx	lr
 800341e:	bf00      	nop
 8003420:	20000010 	.word	0x20000010

08003424 <_ZSt9terminatev>:
 8003424:	b508      	push	{r3, lr}
 8003426:	f7ff fff5 	bl	8003414 <_ZSt13get_terminatev>
 800342a:	f7ff ffef 	bl	800340c <_ZN10__cxxabiv111__terminateEPFvvE>
	...

08003430 <_ZSt15get_new_handlerv>:
 8003430:	4b02      	ldr	r3, [pc, #8]	; (800343c <_ZSt15get_new_handlerv+0xc>)
 8003432:	6818      	ldr	r0, [r3, #0]
 8003434:	f3bf 8f5b 	dmb	ish
 8003438:	4770      	bx	lr
 800343a:	bf00      	nop
 800343c:	200002c0 	.word	0x200002c0

08003440 <abort>:
 8003440:	b508      	push	{r3, lr}
 8003442:	2006      	movs	r0, #6
 8003444:	f000 fc6e 	bl	8003d24 <raise>
 8003448:	2001      	movs	r0, #1
 800344a:	f001 fa79 	bl	8004940 <_exit>
	...

08003450 <__assert_func>:
 8003450:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003452:	4614      	mov	r4, r2
 8003454:	461a      	mov	r2, r3
 8003456:	4b09      	ldr	r3, [pc, #36]	; (800347c <__assert_func+0x2c>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4605      	mov	r5, r0
 800345c:	68d8      	ldr	r0, [r3, #12]
 800345e:	b14c      	cbz	r4, 8003474 <__assert_func+0x24>
 8003460:	4b07      	ldr	r3, [pc, #28]	; (8003480 <__assert_func+0x30>)
 8003462:	9100      	str	r1, [sp, #0]
 8003464:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003468:	4906      	ldr	r1, [pc, #24]	; (8003484 <__assert_func+0x34>)
 800346a:	462b      	mov	r3, r5
 800346c:	f000 f814 	bl	8003498 <fiprintf>
 8003470:	f7ff ffe6 	bl	8003440 <abort>
 8003474:	4b04      	ldr	r3, [pc, #16]	; (8003488 <__assert_func+0x38>)
 8003476:	461c      	mov	r4, r3
 8003478:	e7f3      	b.n	8003462 <__assert_func+0x12>
 800347a:	bf00      	nop
 800347c:	20000014 	.word	0x20000014
 8003480:	08004d48 	.word	0x08004d48
 8003484:	08004d55 	.word	0x08004d55
 8003488:	08004d83 	.word	0x08004d83

0800348c <atexit>:
 800348c:	2300      	movs	r3, #0
 800348e:	4601      	mov	r1, r0
 8003490:	461a      	mov	r2, r3
 8003492:	4618      	mov	r0, r3
 8003494:	f000 bd42 	b.w	8003f1c <__register_exitproc>

08003498 <fiprintf>:
 8003498:	b40e      	push	{r1, r2, r3}
 800349a:	b503      	push	{r0, r1, lr}
 800349c:	4601      	mov	r1, r0
 800349e:	ab03      	add	r3, sp, #12
 80034a0:	4805      	ldr	r0, [pc, #20]	; (80034b8 <fiprintf+0x20>)
 80034a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80034a6:	6800      	ldr	r0, [r0, #0]
 80034a8:	9301      	str	r3, [sp, #4]
 80034aa:	f000 f93f 	bl	800372c <_vfiprintf_r>
 80034ae:	b002      	add	sp, #8
 80034b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80034b4:	b003      	add	sp, #12
 80034b6:	4770      	bx	lr
 80034b8:	20000014 	.word	0x20000014

080034bc <__libc_init_array>:
 80034bc:	b570      	push	{r4, r5, r6, lr}
 80034be:	4d0d      	ldr	r5, [pc, #52]	; (80034f4 <__libc_init_array+0x38>)
 80034c0:	4c0d      	ldr	r4, [pc, #52]	; (80034f8 <__libc_init_array+0x3c>)
 80034c2:	1b64      	subs	r4, r4, r5
 80034c4:	10a4      	asrs	r4, r4, #2
 80034c6:	2600      	movs	r6, #0
 80034c8:	42a6      	cmp	r6, r4
 80034ca:	d109      	bne.n	80034e0 <__libc_init_array+0x24>
 80034cc:	4d0b      	ldr	r5, [pc, #44]	; (80034fc <__libc_init_array+0x40>)
 80034ce:	4c0c      	ldr	r4, [pc, #48]	; (8003500 <__libc_init_array+0x44>)
 80034d0:	f001 fa38 	bl	8004944 <_init>
 80034d4:	1b64      	subs	r4, r4, r5
 80034d6:	10a4      	asrs	r4, r4, #2
 80034d8:	2600      	movs	r6, #0
 80034da:	42a6      	cmp	r6, r4
 80034dc:	d105      	bne.n	80034ea <__libc_init_array+0x2e>
 80034de:	bd70      	pop	{r4, r5, r6, pc}
 80034e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80034e4:	4798      	blx	r3
 80034e6:	3601      	adds	r6, #1
 80034e8:	e7ee      	b.n	80034c8 <__libc_init_array+0xc>
 80034ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80034ee:	4798      	blx	r3
 80034f0:	3601      	adds	r6, #1
 80034f2:	e7f2      	b.n	80034da <__libc_init_array+0x1e>
 80034f4:	08004e24 	.word	0x08004e24
 80034f8:	08004e24 	.word	0x08004e24
 80034fc:	08004e24 	.word	0x08004e24
 8003500:	08004e2c 	.word	0x08004e2c

08003504 <malloc>:
 8003504:	4b02      	ldr	r3, [pc, #8]	; (8003510 <malloc+0xc>)
 8003506:	4601      	mov	r1, r0
 8003508:	6818      	ldr	r0, [r3, #0]
 800350a:	f000 b88b 	b.w	8003624 <_malloc_r>
 800350e:	bf00      	nop
 8003510:	20000014 	.word	0x20000014

08003514 <free>:
 8003514:	4b02      	ldr	r3, [pc, #8]	; (8003520 <free+0xc>)
 8003516:	4601      	mov	r1, r0
 8003518:	6818      	ldr	r0, [r3, #0]
 800351a:	f000 b833 	b.w	8003584 <_free_r>
 800351e:	bf00      	nop
 8003520:	20000014 	.word	0x20000014

08003524 <memcpy>:
 8003524:	440a      	add	r2, r1
 8003526:	4291      	cmp	r1, r2
 8003528:	f100 33ff 	add.w	r3, r0, #4294967295
 800352c:	d100      	bne.n	8003530 <memcpy+0xc>
 800352e:	4770      	bx	lr
 8003530:	b510      	push	{r4, lr}
 8003532:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003536:	f803 4f01 	strb.w	r4, [r3, #1]!
 800353a:	4291      	cmp	r1, r2
 800353c:	d1f9      	bne.n	8003532 <memcpy+0xe>
 800353e:	bd10      	pop	{r4, pc}

08003540 <memmove>:
 8003540:	4288      	cmp	r0, r1
 8003542:	b510      	push	{r4, lr}
 8003544:	eb01 0402 	add.w	r4, r1, r2
 8003548:	d902      	bls.n	8003550 <memmove+0x10>
 800354a:	4284      	cmp	r4, r0
 800354c:	4623      	mov	r3, r4
 800354e:	d807      	bhi.n	8003560 <memmove+0x20>
 8003550:	1e43      	subs	r3, r0, #1
 8003552:	42a1      	cmp	r1, r4
 8003554:	d008      	beq.n	8003568 <memmove+0x28>
 8003556:	f811 2b01 	ldrb.w	r2, [r1], #1
 800355a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800355e:	e7f8      	b.n	8003552 <memmove+0x12>
 8003560:	4402      	add	r2, r0
 8003562:	4601      	mov	r1, r0
 8003564:	428a      	cmp	r2, r1
 8003566:	d100      	bne.n	800356a <memmove+0x2a>
 8003568:	bd10      	pop	{r4, pc}
 800356a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800356e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003572:	e7f7      	b.n	8003564 <memmove+0x24>

08003574 <memset>:
 8003574:	4402      	add	r2, r0
 8003576:	4603      	mov	r3, r0
 8003578:	4293      	cmp	r3, r2
 800357a:	d100      	bne.n	800357e <memset+0xa>
 800357c:	4770      	bx	lr
 800357e:	f803 1b01 	strb.w	r1, [r3], #1
 8003582:	e7f9      	b.n	8003578 <memset+0x4>

08003584 <_free_r>:
 8003584:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003586:	2900      	cmp	r1, #0
 8003588:	d048      	beq.n	800361c <_free_r+0x98>
 800358a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800358e:	9001      	str	r0, [sp, #4]
 8003590:	2b00      	cmp	r3, #0
 8003592:	f1a1 0404 	sub.w	r4, r1, #4
 8003596:	bfb8      	it	lt
 8003598:	18e4      	addlt	r4, r4, r3
 800359a:	f000 ff41 	bl	8004420 <__malloc_lock>
 800359e:	4a20      	ldr	r2, [pc, #128]	; (8003620 <_free_r+0x9c>)
 80035a0:	9801      	ldr	r0, [sp, #4]
 80035a2:	6813      	ldr	r3, [r2, #0]
 80035a4:	4615      	mov	r5, r2
 80035a6:	b933      	cbnz	r3, 80035b6 <_free_r+0x32>
 80035a8:	6063      	str	r3, [r4, #4]
 80035aa:	6014      	str	r4, [r2, #0]
 80035ac:	b003      	add	sp, #12
 80035ae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80035b2:	f000 bf3b 	b.w	800442c <__malloc_unlock>
 80035b6:	42a3      	cmp	r3, r4
 80035b8:	d90b      	bls.n	80035d2 <_free_r+0x4e>
 80035ba:	6821      	ldr	r1, [r4, #0]
 80035bc:	1862      	adds	r2, r4, r1
 80035be:	4293      	cmp	r3, r2
 80035c0:	bf04      	itt	eq
 80035c2:	681a      	ldreq	r2, [r3, #0]
 80035c4:	685b      	ldreq	r3, [r3, #4]
 80035c6:	6063      	str	r3, [r4, #4]
 80035c8:	bf04      	itt	eq
 80035ca:	1852      	addeq	r2, r2, r1
 80035cc:	6022      	streq	r2, [r4, #0]
 80035ce:	602c      	str	r4, [r5, #0]
 80035d0:	e7ec      	b.n	80035ac <_free_r+0x28>
 80035d2:	461a      	mov	r2, r3
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	b10b      	cbz	r3, 80035dc <_free_r+0x58>
 80035d8:	42a3      	cmp	r3, r4
 80035da:	d9fa      	bls.n	80035d2 <_free_r+0x4e>
 80035dc:	6811      	ldr	r1, [r2, #0]
 80035de:	1855      	adds	r5, r2, r1
 80035e0:	42a5      	cmp	r5, r4
 80035e2:	d10b      	bne.n	80035fc <_free_r+0x78>
 80035e4:	6824      	ldr	r4, [r4, #0]
 80035e6:	4421      	add	r1, r4
 80035e8:	1854      	adds	r4, r2, r1
 80035ea:	42a3      	cmp	r3, r4
 80035ec:	6011      	str	r1, [r2, #0]
 80035ee:	d1dd      	bne.n	80035ac <_free_r+0x28>
 80035f0:	681c      	ldr	r4, [r3, #0]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	6053      	str	r3, [r2, #4]
 80035f6:	4421      	add	r1, r4
 80035f8:	6011      	str	r1, [r2, #0]
 80035fa:	e7d7      	b.n	80035ac <_free_r+0x28>
 80035fc:	d902      	bls.n	8003604 <_free_r+0x80>
 80035fe:	230c      	movs	r3, #12
 8003600:	6003      	str	r3, [r0, #0]
 8003602:	e7d3      	b.n	80035ac <_free_r+0x28>
 8003604:	6825      	ldr	r5, [r4, #0]
 8003606:	1961      	adds	r1, r4, r5
 8003608:	428b      	cmp	r3, r1
 800360a:	bf04      	itt	eq
 800360c:	6819      	ldreq	r1, [r3, #0]
 800360e:	685b      	ldreq	r3, [r3, #4]
 8003610:	6063      	str	r3, [r4, #4]
 8003612:	bf04      	itt	eq
 8003614:	1949      	addeq	r1, r1, r5
 8003616:	6021      	streq	r1, [r4, #0]
 8003618:	6054      	str	r4, [r2, #4]
 800361a:	e7c7      	b.n	80035ac <_free_r+0x28>
 800361c:	b003      	add	sp, #12
 800361e:	bd30      	pop	{r4, r5, pc}
 8003620:	200002c4 	.word	0x200002c4

08003624 <_malloc_r>:
 8003624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003626:	1ccd      	adds	r5, r1, #3
 8003628:	f025 0503 	bic.w	r5, r5, #3
 800362c:	3508      	adds	r5, #8
 800362e:	2d0c      	cmp	r5, #12
 8003630:	bf38      	it	cc
 8003632:	250c      	movcc	r5, #12
 8003634:	2d00      	cmp	r5, #0
 8003636:	4606      	mov	r6, r0
 8003638:	db01      	blt.n	800363e <_malloc_r+0x1a>
 800363a:	42a9      	cmp	r1, r5
 800363c:	d903      	bls.n	8003646 <_malloc_r+0x22>
 800363e:	230c      	movs	r3, #12
 8003640:	6033      	str	r3, [r6, #0]
 8003642:	2000      	movs	r0, #0
 8003644:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003646:	f000 feeb 	bl	8004420 <__malloc_lock>
 800364a:	4921      	ldr	r1, [pc, #132]	; (80036d0 <_malloc_r+0xac>)
 800364c:	680a      	ldr	r2, [r1, #0]
 800364e:	4614      	mov	r4, r2
 8003650:	b99c      	cbnz	r4, 800367a <_malloc_r+0x56>
 8003652:	4f20      	ldr	r7, [pc, #128]	; (80036d4 <_malloc_r+0xb0>)
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	b923      	cbnz	r3, 8003662 <_malloc_r+0x3e>
 8003658:	4621      	mov	r1, r4
 800365a:	4630      	mov	r0, r6
 800365c:	f000 fb2a 	bl	8003cb4 <_sbrk_r>
 8003660:	6038      	str	r0, [r7, #0]
 8003662:	4629      	mov	r1, r5
 8003664:	4630      	mov	r0, r6
 8003666:	f000 fb25 	bl	8003cb4 <_sbrk_r>
 800366a:	1c43      	adds	r3, r0, #1
 800366c:	d123      	bne.n	80036b6 <_malloc_r+0x92>
 800366e:	230c      	movs	r3, #12
 8003670:	6033      	str	r3, [r6, #0]
 8003672:	4630      	mov	r0, r6
 8003674:	f000 feda 	bl	800442c <__malloc_unlock>
 8003678:	e7e3      	b.n	8003642 <_malloc_r+0x1e>
 800367a:	6823      	ldr	r3, [r4, #0]
 800367c:	1b5b      	subs	r3, r3, r5
 800367e:	d417      	bmi.n	80036b0 <_malloc_r+0x8c>
 8003680:	2b0b      	cmp	r3, #11
 8003682:	d903      	bls.n	800368c <_malloc_r+0x68>
 8003684:	6023      	str	r3, [r4, #0]
 8003686:	441c      	add	r4, r3
 8003688:	6025      	str	r5, [r4, #0]
 800368a:	e004      	b.n	8003696 <_malloc_r+0x72>
 800368c:	6863      	ldr	r3, [r4, #4]
 800368e:	42a2      	cmp	r2, r4
 8003690:	bf0c      	ite	eq
 8003692:	600b      	streq	r3, [r1, #0]
 8003694:	6053      	strne	r3, [r2, #4]
 8003696:	4630      	mov	r0, r6
 8003698:	f000 fec8 	bl	800442c <__malloc_unlock>
 800369c:	f104 000b 	add.w	r0, r4, #11
 80036a0:	1d23      	adds	r3, r4, #4
 80036a2:	f020 0007 	bic.w	r0, r0, #7
 80036a6:	1ac2      	subs	r2, r0, r3
 80036a8:	d0cc      	beq.n	8003644 <_malloc_r+0x20>
 80036aa:	1a1b      	subs	r3, r3, r0
 80036ac:	50a3      	str	r3, [r4, r2]
 80036ae:	e7c9      	b.n	8003644 <_malloc_r+0x20>
 80036b0:	4622      	mov	r2, r4
 80036b2:	6864      	ldr	r4, [r4, #4]
 80036b4:	e7cc      	b.n	8003650 <_malloc_r+0x2c>
 80036b6:	1cc4      	adds	r4, r0, #3
 80036b8:	f024 0403 	bic.w	r4, r4, #3
 80036bc:	42a0      	cmp	r0, r4
 80036be:	d0e3      	beq.n	8003688 <_malloc_r+0x64>
 80036c0:	1a21      	subs	r1, r4, r0
 80036c2:	4630      	mov	r0, r6
 80036c4:	f000 faf6 	bl	8003cb4 <_sbrk_r>
 80036c8:	3001      	adds	r0, #1
 80036ca:	d1dd      	bne.n	8003688 <_malloc_r+0x64>
 80036cc:	e7cf      	b.n	800366e <_malloc_r+0x4a>
 80036ce:	bf00      	nop
 80036d0:	200002c4 	.word	0x200002c4
 80036d4:	200002c8 	.word	0x200002c8

080036d8 <__sfputc_r>:
 80036d8:	6893      	ldr	r3, [r2, #8]
 80036da:	3b01      	subs	r3, #1
 80036dc:	2b00      	cmp	r3, #0
 80036de:	b410      	push	{r4}
 80036e0:	6093      	str	r3, [r2, #8]
 80036e2:	da08      	bge.n	80036f6 <__sfputc_r+0x1e>
 80036e4:	6994      	ldr	r4, [r2, #24]
 80036e6:	42a3      	cmp	r3, r4
 80036e8:	db01      	blt.n	80036ee <__sfputc_r+0x16>
 80036ea:	290a      	cmp	r1, #10
 80036ec:	d103      	bne.n	80036f6 <__sfputc_r+0x1e>
 80036ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80036f2:	f000 bb53 	b.w	8003d9c <__swbuf_r>
 80036f6:	6813      	ldr	r3, [r2, #0]
 80036f8:	1c58      	adds	r0, r3, #1
 80036fa:	6010      	str	r0, [r2, #0]
 80036fc:	7019      	strb	r1, [r3, #0]
 80036fe:	4608      	mov	r0, r1
 8003700:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003704:	4770      	bx	lr

08003706 <__sfputs_r>:
 8003706:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003708:	4606      	mov	r6, r0
 800370a:	460f      	mov	r7, r1
 800370c:	4614      	mov	r4, r2
 800370e:	18d5      	adds	r5, r2, r3
 8003710:	42ac      	cmp	r4, r5
 8003712:	d101      	bne.n	8003718 <__sfputs_r+0x12>
 8003714:	2000      	movs	r0, #0
 8003716:	e007      	b.n	8003728 <__sfputs_r+0x22>
 8003718:	f814 1b01 	ldrb.w	r1, [r4], #1
 800371c:	463a      	mov	r2, r7
 800371e:	4630      	mov	r0, r6
 8003720:	f7ff ffda 	bl	80036d8 <__sfputc_r>
 8003724:	1c43      	adds	r3, r0, #1
 8003726:	d1f3      	bne.n	8003710 <__sfputs_r+0xa>
 8003728:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800372c <_vfiprintf_r>:
 800372c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003730:	460d      	mov	r5, r1
 8003732:	b09d      	sub	sp, #116	; 0x74
 8003734:	4614      	mov	r4, r2
 8003736:	4698      	mov	r8, r3
 8003738:	4606      	mov	r6, r0
 800373a:	b118      	cbz	r0, 8003744 <_vfiprintf_r+0x18>
 800373c:	6983      	ldr	r3, [r0, #24]
 800373e:	b90b      	cbnz	r3, 8003744 <_vfiprintf_r+0x18>
 8003740:	f000 fd68 	bl	8004214 <__sinit>
 8003744:	4b89      	ldr	r3, [pc, #548]	; (800396c <_vfiprintf_r+0x240>)
 8003746:	429d      	cmp	r5, r3
 8003748:	d11b      	bne.n	8003782 <_vfiprintf_r+0x56>
 800374a:	6875      	ldr	r5, [r6, #4]
 800374c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800374e:	07d9      	lsls	r1, r3, #31
 8003750:	d405      	bmi.n	800375e <_vfiprintf_r+0x32>
 8003752:	89ab      	ldrh	r3, [r5, #12]
 8003754:	059a      	lsls	r2, r3, #22
 8003756:	d402      	bmi.n	800375e <_vfiprintf_r+0x32>
 8003758:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800375a:	f000 fdf9 	bl	8004350 <__retarget_lock_acquire_recursive>
 800375e:	89ab      	ldrh	r3, [r5, #12]
 8003760:	071b      	lsls	r3, r3, #28
 8003762:	d501      	bpl.n	8003768 <_vfiprintf_r+0x3c>
 8003764:	692b      	ldr	r3, [r5, #16]
 8003766:	b9eb      	cbnz	r3, 80037a4 <_vfiprintf_r+0x78>
 8003768:	4629      	mov	r1, r5
 800376a:	4630      	mov	r0, r6
 800376c:	f000 fb68 	bl	8003e40 <__swsetup_r>
 8003770:	b1c0      	cbz	r0, 80037a4 <_vfiprintf_r+0x78>
 8003772:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003774:	07dc      	lsls	r4, r3, #31
 8003776:	d50e      	bpl.n	8003796 <_vfiprintf_r+0x6a>
 8003778:	f04f 30ff 	mov.w	r0, #4294967295
 800377c:	b01d      	add	sp, #116	; 0x74
 800377e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003782:	4b7b      	ldr	r3, [pc, #492]	; (8003970 <_vfiprintf_r+0x244>)
 8003784:	429d      	cmp	r5, r3
 8003786:	d101      	bne.n	800378c <_vfiprintf_r+0x60>
 8003788:	68b5      	ldr	r5, [r6, #8]
 800378a:	e7df      	b.n	800374c <_vfiprintf_r+0x20>
 800378c:	4b79      	ldr	r3, [pc, #484]	; (8003974 <_vfiprintf_r+0x248>)
 800378e:	429d      	cmp	r5, r3
 8003790:	bf08      	it	eq
 8003792:	68f5      	ldreq	r5, [r6, #12]
 8003794:	e7da      	b.n	800374c <_vfiprintf_r+0x20>
 8003796:	89ab      	ldrh	r3, [r5, #12]
 8003798:	0598      	lsls	r0, r3, #22
 800379a:	d4ed      	bmi.n	8003778 <_vfiprintf_r+0x4c>
 800379c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800379e:	f000 fdd9 	bl	8004354 <__retarget_lock_release_recursive>
 80037a2:	e7e9      	b.n	8003778 <_vfiprintf_r+0x4c>
 80037a4:	2300      	movs	r3, #0
 80037a6:	9309      	str	r3, [sp, #36]	; 0x24
 80037a8:	2320      	movs	r3, #32
 80037aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80037ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80037b2:	2330      	movs	r3, #48	; 0x30
 80037b4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003978 <_vfiprintf_r+0x24c>
 80037b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80037bc:	f04f 0901 	mov.w	r9, #1
 80037c0:	4623      	mov	r3, r4
 80037c2:	469a      	mov	sl, r3
 80037c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80037c8:	b10a      	cbz	r2, 80037ce <_vfiprintf_r+0xa2>
 80037ca:	2a25      	cmp	r2, #37	; 0x25
 80037cc:	d1f9      	bne.n	80037c2 <_vfiprintf_r+0x96>
 80037ce:	ebba 0b04 	subs.w	fp, sl, r4
 80037d2:	d00b      	beq.n	80037ec <_vfiprintf_r+0xc0>
 80037d4:	465b      	mov	r3, fp
 80037d6:	4622      	mov	r2, r4
 80037d8:	4629      	mov	r1, r5
 80037da:	4630      	mov	r0, r6
 80037dc:	f7ff ff93 	bl	8003706 <__sfputs_r>
 80037e0:	3001      	adds	r0, #1
 80037e2:	f000 80aa 	beq.w	800393a <_vfiprintf_r+0x20e>
 80037e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80037e8:	445a      	add	r2, fp
 80037ea:	9209      	str	r2, [sp, #36]	; 0x24
 80037ec:	f89a 3000 	ldrb.w	r3, [sl]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	f000 80a2 	beq.w	800393a <_vfiprintf_r+0x20e>
 80037f6:	2300      	movs	r3, #0
 80037f8:	f04f 32ff 	mov.w	r2, #4294967295
 80037fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003800:	f10a 0a01 	add.w	sl, sl, #1
 8003804:	9304      	str	r3, [sp, #16]
 8003806:	9307      	str	r3, [sp, #28]
 8003808:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800380c:	931a      	str	r3, [sp, #104]	; 0x68
 800380e:	4654      	mov	r4, sl
 8003810:	2205      	movs	r2, #5
 8003812:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003816:	4858      	ldr	r0, [pc, #352]	; (8003978 <_vfiprintf_r+0x24c>)
 8003818:	f7fc fcfa 	bl	8000210 <memchr>
 800381c:	9a04      	ldr	r2, [sp, #16]
 800381e:	b9d8      	cbnz	r0, 8003858 <_vfiprintf_r+0x12c>
 8003820:	06d1      	lsls	r1, r2, #27
 8003822:	bf44      	itt	mi
 8003824:	2320      	movmi	r3, #32
 8003826:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800382a:	0713      	lsls	r3, r2, #28
 800382c:	bf44      	itt	mi
 800382e:	232b      	movmi	r3, #43	; 0x2b
 8003830:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003834:	f89a 3000 	ldrb.w	r3, [sl]
 8003838:	2b2a      	cmp	r3, #42	; 0x2a
 800383a:	d015      	beq.n	8003868 <_vfiprintf_r+0x13c>
 800383c:	9a07      	ldr	r2, [sp, #28]
 800383e:	4654      	mov	r4, sl
 8003840:	2000      	movs	r0, #0
 8003842:	f04f 0c0a 	mov.w	ip, #10
 8003846:	4621      	mov	r1, r4
 8003848:	f811 3b01 	ldrb.w	r3, [r1], #1
 800384c:	3b30      	subs	r3, #48	; 0x30
 800384e:	2b09      	cmp	r3, #9
 8003850:	d94e      	bls.n	80038f0 <_vfiprintf_r+0x1c4>
 8003852:	b1b0      	cbz	r0, 8003882 <_vfiprintf_r+0x156>
 8003854:	9207      	str	r2, [sp, #28]
 8003856:	e014      	b.n	8003882 <_vfiprintf_r+0x156>
 8003858:	eba0 0308 	sub.w	r3, r0, r8
 800385c:	fa09 f303 	lsl.w	r3, r9, r3
 8003860:	4313      	orrs	r3, r2
 8003862:	9304      	str	r3, [sp, #16]
 8003864:	46a2      	mov	sl, r4
 8003866:	e7d2      	b.n	800380e <_vfiprintf_r+0xe2>
 8003868:	9b03      	ldr	r3, [sp, #12]
 800386a:	1d19      	adds	r1, r3, #4
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	9103      	str	r1, [sp, #12]
 8003870:	2b00      	cmp	r3, #0
 8003872:	bfbb      	ittet	lt
 8003874:	425b      	neglt	r3, r3
 8003876:	f042 0202 	orrlt.w	r2, r2, #2
 800387a:	9307      	strge	r3, [sp, #28]
 800387c:	9307      	strlt	r3, [sp, #28]
 800387e:	bfb8      	it	lt
 8003880:	9204      	strlt	r2, [sp, #16]
 8003882:	7823      	ldrb	r3, [r4, #0]
 8003884:	2b2e      	cmp	r3, #46	; 0x2e
 8003886:	d10c      	bne.n	80038a2 <_vfiprintf_r+0x176>
 8003888:	7863      	ldrb	r3, [r4, #1]
 800388a:	2b2a      	cmp	r3, #42	; 0x2a
 800388c:	d135      	bne.n	80038fa <_vfiprintf_r+0x1ce>
 800388e:	9b03      	ldr	r3, [sp, #12]
 8003890:	1d1a      	adds	r2, r3, #4
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	9203      	str	r2, [sp, #12]
 8003896:	2b00      	cmp	r3, #0
 8003898:	bfb8      	it	lt
 800389a:	f04f 33ff 	movlt.w	r3, #4294967295
 800389e:	3402      	adds	r4, #2
 80038a0:	9305      	str	r3, [sp, #20]
 80038a2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003988 <_vfiprintf_r+0x25c>
 80038a6:	7821      	ldrb	r1, [r4, #0]
 80038a8:	2203      	movs	r2, #3
 80038aa:	4650      	mov	r0, sl
 80038ac:	f7fc fcb0 	bl	8000210 <memchr>
 80038b0:	b140      	cbz	r0, 80038c4 <_vfiprintf_r+0x198>
 80038b2:	2340      	movs	r3, #64	; 0x40
 80038b4:	eba0 000a 	sub.w	r0, r0, sl
 80038b8:	fa03 f000 	lsl.w	r0, r3, r0
 80038bc:	9b04      	ldr	r3, [sp, #16]
 80038be:	4303      	orrs	r3, r0
 80038c0:	3401      	adds	r4, #1
 80038c2:	9304      	str	r3, [sp, #16]
 80038c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80038c8:	482c      	ldr	r0, [pc, #176]	; (800397c <_vfiprintf_r+0x250>)
 80038ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80038ce:	2206      	movs	r2, #6
 80038d0:	f7fc fc9e 	bl	8000210 <memchr>
 80038d4:	2800      	cmp	r0, #0
 80038d6:	d03f      	beq.n	8003958 <_vfiprintf_r+0x22c>
 80038d8:	4b29      	ldr	r3, [pc, #164]	; (8003980 <_vfiprintf_r+0x254>)
 80038da:	bb1b      	cbnz	r3, 8003924 <_vfiprintf_r+0x1f8>
 80038dc:	9b03      	ldr	r3, [sp, #12]
 80038de:	3307      	adds	r3, #7
 80038e0:	f023 0307 	bic.w	r3, r3, #7
 80038e4:	3308      	adds	r3, #8
 80038e6:	9303      	str	r3, [sp, #12]
 80038e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80038ea:	443b      	add	r3, r7
 80038ec:	9309      	str	r3, [sp, #36]	; 0x24
 80038ee:	e767      	b.n	80037c0 <_vfiprintf_r+0x94>
 80038f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80038f4:	460c      	mov	r4, r1
 80038f6:	2001      	movs	r0, #1
 80038f8:	e7a5      	b.n	8003846 <_vfiprintf_r+0x11a>
 80038fa:	2300      	movs	r3, #0
 80038fc:	3401      	adds	r4, #1
 80038fe:	9305      	str	r3, [sp, #20]
 8003900:	4619      	mov	r1, r3
 8003902:	f04f 0c0a 	mov.w	ip, #10
 8003906:	4620      	mov	r0, r4
 8003908:	f810 2b01 	ldrb.w	r2, [r0], #1
 800390c:	3a30      	subs	r2, #48	; 0x30
 800390e:	2a09      	cmp	r2, #9
 8003910:	d903      	bls.n	800391a <_vfiprintf_r+0x1ee>
 8003912:	2b00      	cmp	r3, #0
 8003914:	d0c5      	beq.n	80038a2 <_vfiprintf_r+0x176>
 8003916:	9105      	str	r1, [sp, #20]
 8003918:	e7c3      	b.n	80038a2 <_vfiprintf_r+0x176>
 800391a:	fb0c 2101 	mla	r1, ip, r1, r2
 800391e:	4604      	mov	r4, r0
 8003920:	2301      	movs	r3, #1
 8003922:	e7f0      	b.n	8003906 <_vfiprintf_r+0x1da>
 8003924:	ab03      	add	r3, sp, #12
 8003926:	9300      	str	r3, [sp, #0]
 8003928:	462a      	mov	r2, r5
 800392a:	4b16      	ldr	r3, [pc, #88]	; (8003984 <_vfiprintf_r+0x258>)
 800392c:	a904      	add	r1, sp, #16
 800392e:	4630      	mov	r0, r6
 8003930:	f3af 8000 	nop.w
 8003934:	4607      	mov	r7, r0
 8003936:	1c78      	adds	r0, r7, #1
 8003938:	d1d6      	bne.n	80038e8 <_vfiprintf_r+0x1bc>
 800393a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800393c:	07d9      	lsls	r1, r3, #31
 800393e:	d405      	bmi.n	800394c <_vfiprintf_r+0x220>
 8003940:	89ab      	ldrh	r3, [r5, #12]
 8003942:	059a      	lsls	r2, r3, #22
 8003944:	d402      	bmi.n	800394c <_vfiprintf_r+0x220>
 8003946:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003948:	f000 fd04 	bl	8004354 <__retarget_lock_release_recursive>
 800394c:	89ab      	ldrh	r3, [r5, #12]
 800394e:	065b      	lsls	r3, r3, #25
 8003950:	f53f af12 	bmi.w	8003778 <_vfiprintf_r+0x4c>
 8003954:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003956:	e711      	b.n	800377c <_vfiprintf_r+0x50>
 8003958:	ab03      	add	r3, sp, #12
 800395a:	9300      	str	r3, [sp, #0]
 800395c:	462a      	mov	r2, r5
 800395e:	4b09      	ldr	r3, [pc, #36]	; (8003984 <_vfiprintf_r+0x258>)
 8003960:	a904      	add	r1, sp, #16
 8003962:	4630      	mov	r0, r6
 8003964:	f000 f880 	bl	8003a68 <_printf_i>
 8003968:	e7e4      	b.n	8003934 <_vfiprintf_r+0x208>
 800396a:	bf00      	nop
 800396c:	08004ddc 	.word	0x08004ddc
 8003970:	08004dfc 	.word	0x08004dfc
 8003974:	08004dbc 	.word	0x08004dbc
 8003978:	08004d88 	.word	0x08004d88
 800397c:	08004d92 	.word	0x08004d92
 8003980:	00000000 	.word	0x00000000
 8003984:	08003707 	.word	0x08003707
 8003988:	08004d8e 	.word	0x08004d8e

0800398c <_printf_common>:
 800398c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003990:	4616      	mov	r6, r2
 8003992:	4699      	mov	r9, r3
 8003994:	688a      	ldr	r2, [r1, #8]
 8003996:	690b      	ldr	r3, [r1, #16]
 8003998:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800399c:	4293      	cmp	r3, r2
 800399e:	bfb8      	it	lt
 80039a0:	4613      	movlt	r3, r2
 80039a2:	6033      	str	r3, [r6, #0]
 80039a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80039a8:	4607      	mov	r7, r0
 80039aa:	460c      	mov	r4, r1
 80039ac:	b10a      	cbz	r2, 80039b2 <_printf_common+0x26>
 80039ae:	3301      	adds	r3, #1
 80039b0:	6033      	str	r3, [r6, #0]
 80039b2:	6823      	ldr	r3, [r4, #0]
 80039b4:	0699      	lsls	r1, r3, #26
 80039b6:	bf42      	ittt	mi
 80039b8:	6833      	ldrmi	r3, [r6, #0]
 80039ba:	3302      	addmi	r3, #2
 80039bc:	6033      	strmi	r3, [r6, #0]
 80039be:	6825      	ldr	r5, [r4, #0]
 80039c0:	f015 0506 	ands.w	r5, r5, #6
 80039c4:	d106      	bne.n	80039d4 <_printf_common+0x48>
 80039c6:	f104 0a19 	add.w	sl, r4, #25
 80039ca:	68e3      	ldr	r3, [r4, #12]
 80039cc:	6832      	ldr	r2, [r6, #0]
 80039ce:	1a9b      	subs	r3, r3, r2
 80039d0:	42ab      	cmp	r3, r5
 80039d2:	dc26      	bgt.n	8003a22 <_printf_common+0x96>
 80039d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80039d8:	1e13      	subs	r3, r2, #0
 80039da:	6822      	ldr	r2, [r4, #0]
 80039dc:	bf18      	it	ne
 80039de:	2301      	movne	r3, #1
 80039e0:	0692      	lsls	r2, r2, #26
 80039e2:	d42b      	bmi.n	8003a3c <_printf_common+0xb0>
 80039e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80039e8:	4649      	mov	r1, r9
 80039ea:	4638      	mov	r0, r7
 80039ec:	47c0      	blx	r8
 80039ee:	3001      	adds	r0, #1
 80039f0:	d01e      	beq.n	8003a30 <_printf_common+0xa4>
 80039f2:	6823      	ldr	r3, [r4, #0]
 80039f4:	68e5      	ldr	r5, [r4, #12]
 80039f6:	6832      	ldr	r2, [r6, #0]
 80039f8:	f003 0306 	and.w	r3, r3, #6
 80039fc:	2b04      	cmp	r3, #4
 80039fe:	bf08      	it	eq
 8003a00:	1aad      	subeq	r5, r5, r2
 8003a02:	68a3      	ldr	r3, [r4, #8]
 8003a04:	6922      	ldr	r2, [r4, #16]
 8003a06:	bf0c      	ite	eq
 8003a08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003a0c:	2500      	movne	r5, #0
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	bfc4      	itt	gt
 8003a12:	1a9b      	subgt	r3, r3, r2
 8003a14:	18ed      	addgt	r5, r5, r3
 8003a16:	2600      	movs	r6, #0
 8003a18:	341a      	adds	r4, #26
 8003a1a:	42b5      	cmp	r5, r6
 8003a1c:	d11a      	bne.n	8003a54 <_printf_common+0xc8>
 8003a1e:	2000      	movs	r0, #0
 8003a20:	e008      	b.n	8003a34 <_printf_common+0xa8>
 8003a22:	2301      	movs	r3, #1
 8003a24:	4652      	mov	r2, sl
 8003a26:	4649      	mov	r1, r9
 8003a28:	4638      	mov	r0, r7
 8003a2a:	47c0      	blx	r8
 8003a2c:	3001      	adds	r0, #1
 8003a2e:	d103      	bne.n	8003a38 <_printf_common+0xac>
 8003a30:	f04f 30ff 	mov.w	r0, #4294967295
 8003a34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a38:	3501      	adds	r5, #1
 8003a3a:	e7c6      	b.n	80039ca <_printf_common+0x3e>
 8003a3c:	18e1      	adds	r1, r4, r3
 8003a3e:	1c5a      	adds	r2, r3, #1
 8003a40:	2030      	movs	r0, #48	; 0x30
 8003a42:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003a46:	4422      	add	r2, r4
 8003a48:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003a4c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003a50:	3302      	adds	r3, #2
 8003a52:	e7c7      	b.n	80039e4 <_printf_common+0x58>
 8003a54:	2301      	movs	r3, #1
 8003a56:	4622      	mov	r2, r4
 8003a58:	4649      	mov	r1, r9
 8003a5a:	4638      	mov	r0, r7
 8003a5c:	47c0      	blx	r8
 8003a5e:	3001      	adds	r0, #1
 8003a60:	d0e6      	beq.n	8003a30 <_printf_common+0xa4>
 8003a62:	3601      	adds	r6, #1
 8003a64:	e7d9      	b.n	8003a1a <_printf_common+0x8e>
	...

08003a68 <_printf_i>:
 8003a68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003a6c:	460c      	mov	r4, r1
 8003a6e:	4691      	mov	r9, r2
 8003a70:	7e27      	ldrb	r7, [r4, #24]
 8003a72:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003a74:	2f78      	cmp	r7, #120	; 0x78
 8003a76:	4680      	mov	r8, r0
 8003a78:	469a      	mov	sl, r3
 8003a7a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003a7e:	d807      	bhi.n	8003a90 <_printf_i+0x28>
 8003a80:	2f62      	cmp	r7, #98	; 0x62
 8003a82:	d80a      	bhi.n	8003a9a <_printf_i+0x32>
 8003a84:	2f00      	cmp	r7, #0
 8003a86:	f000 80d8 	beq.w	8003c3a <_printf_i+0x1d2>
 8003a8a:	2f58      	cmp	r7, #88	; 0x58
 8003a8c:	f000 80a3 	beq.w	8003bd6 <_printf_i+0x16e>
 8003a90:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003a94:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003a98:	e03a      	b.n	8003b10 <_printf_i+0xa8>
 8003a9a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003a9e:	2b15      	cmp	r3, #21
 8003aa0:	d8f6      	bhi.n	8003a90 <_printf_i+0x28>
 8003aa2:	a001      	add	r0, pc, #4	; (adr r0, 8003aa8 <_printf_i+0x40>)
 8003aa4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003aa8:	08003b01 	.word	0x08003b01
 8003aac:	08003b15 	.word	0x08003b15
 8003ab0:	08003a91 	.word	0x08003a91
 8003ab4:	08003a91 	.word	0x08003a91
 8003ab8:	08003a91 	.word	0x08003a91
 8003abc:	08003a91 	.word	0x08003a91
 8003ac0:	08003b15 	.word	0x08003b15
 8003ac4:	08003a91 	.word	0x08003a91
 8003ac8:	08003a91 	.word	0x08003a91
 8003acc:	08003a91 	.word	0x08003a91
 8003ad0:	08003a91 	.word	0x08003a91
 8003ad4:	08003c21 	.word	0x08003c21
 8003ad8:	08003b45 	.word	0x08003b45
 8003adc:	08003c03 	.word	0x08003c03
 8003ae0:	08003a91 	.word	0x08003a91
 8003ae4:	08003a91 	.word	0x08003a91
 8003ae8:	08003c43 	.word	0x08003c43
 8003aec:	08003a91 	.word	0x08003a91
 8003af0:	08003b45 	.word	0x08003b45
 8003af4:	08003a91 	.word	0x08003a91
 8003af8:	08003a91 	.word	0x08003a91
 8003afc:	08003c0b 	.word	0x08003c0b
 8003b00:	680b      	ldr	r3, [r1, #0]
 8003b02:	1d1a      	adds	r2, r3, #4
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	600a      	str	r2, [r1, #0]
 8003b08:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003b0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003b10:	2301      	movs	r3, #1
 8003b12:	e0a3      	b.n	8003c5c <_printf_i+0x1f4>
 8003b14:	6825      	ldr	r5, [r4, #0]
 8003b16:	6808      	ldr	r0, [r1, #0]
 8003b18:	062e      	lsls	r6, r5, #24
 8003b1a:	f100 0304 	add.w	r3, r0, #4
 8003b1e:	d50a      	bpl.n	8003b36 <_printf_i+0xce>
 8003b20:	6805      	ldr	r5, [r0, #0]
 8003b22:	600b      	str	r3, [r1, #0]
 8003b24:	2d00      	cmp	r5, #0
 8003b26:	da03      	bge.n	8003b30 <_printf_i+0xc8>
 8003b28:	232d      	movs	r3, #45	; 0x2d
 8003b2a:	426d      	negs	r5, r5
 8003b2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b30:	485e      	ldr	r0, [pc, #376]	; (8003cac <_printf_i+0x244>)
 8003b32:	230a      	movs	r3, #10
 8003b34:	e019      	b.n	8003b6a <_printf_i+0x102>
 8003b36:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003b3a:	6805      	ldr	r5, [r0, #0]
 8003b3c:	600b      	str	r3, [r1, #0]
 8003b3e:	bf18      	it	ne
 8003b40:	b22d      	sxthne	r5, r5
 8003b42:	e7ef      	b.n	8003b24 <_printf_i+0xbc>
 8003b44:	680b      	ldr	r3, [r1, #0]
 8003b46:	6825      	ldr	r5, [r4, #0]
 8003b48:	1d18      	adds	r0, r3, #4
 8003b4a:	6008      	str	r0, [r1, #0]
 8003b4c:	0628      	lsls	r0, r5, #24
 8003b4e:	d501      	bpl.n	8003b54 <_printf_i+0xec>
 8003b50:	681d      	ldr	r5, [r3, #0]
 8003b52:	e002      	b.n	8003b5a <_printf_i+0xf2>
 8003b54:	0669      	lsls	r1, r5, #25
 8003b56:	d5fb      	bpl.n	8003b50 <_printf_i+0xe8>
 8003b58:	881d      	ldrh	r5, [r3, #0]
 8003b5a:	4854      	ldr	r0, [pc, #336]	; (8003cac <_printf_i+0x244>)
 8003b5c:	2f6f      	cmp	r7, #111	; 0x6f
 8003b5e:	bf0c      	ite	eq
 8003b60:	2308      	moveq	r3, #8
 8003b62:	230a      	movne	r3, #10
 8003b64:	2100      	movs	r1, #0
 8003b66:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003b6a:	6866      	ldr	r6, [r4, #4]
 8003b6c:	60a6      	str	r6, [r4, #8]
 8003b6e:	2e00      	cmp	r6, #0
 8003b70:	bfa2      	ittt	ge
 8003b72:	6821      	ldrge	r1, [r4, #0]
 8003b74:	f021 0104 	bicge.w	r1, r1, #4
 8003b78:	6021      	strge	r1, [r4, #0]
 8003b7a:	b90d      	cbnz	r5, 8003b80 <_printf_i+0x118>
 8003b7c:	2e00      	cmp	r6, #0
 8003b7e:	d04d      	beq.n	8003c1c <_printf_i+0x1b4>
 8003b80:	4616      	mov	r6, r2
 8003b82:	fbb5 f1f3 	udiv	r1, r5, r3
 8003b86:	fb03 5711 	mls	r7, r3, r1, r5
 8003b8a:	5dc7      	ldrb	r7, [r0, r7]
 8003b8c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003b90:	462f      	mov	r7, r5
 8003b92:	42bb      	cmp	r3, r7
 8003b94:	460d      	mov	r5, r1
 8003b96:	d9f4      	bls.n	8003b82 <_printf_i+0x11a>
 8003b98:	2b08      	cmp	r3, #8
 8003b9a:	d10b      	bne.n	8003bb4 <_printf_i+0x14c>
 8003b9c:	6823      	ldr	r3, [r4, #0]
 8003b9e:	07df      	lsls	r7, r3, #31
 8003ba0:	d508      	bpl.n	8003bb4 <_printf_i+0x14c>
 8003ba2:	6923      	ldr	r3, [r4, #16]
 8003ba4:	6861      	ldr	r1, [r4, #4]
 8003ba6:	4299      	cmp	r1, r3
 8003ba8:	bfde      	ittt	le
 8003baa:	2330      	movle	r3, #48	; 0x30
 8003bac:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003bb0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003bb4:	1b92      	subs	r2, r2, r6
 8003bb6:	6122      	str	r2, [r4, #16]
 8003bb8:	f8cd a000 	str.w	sl, [sp]
 8003bbc:	464b      	mov	r3, r9
 8003bbe:	aa03      	add	r2, sp, #12
 8003bc0:	4621      	mov	r1, r4
 8003bc2:	4640      	mov	r0, r8
 8003bc4:	f7ff fee2 	bl	800398c <_printf_common>
 8003bc8:	3001      	adds	r0, #1
 8003bca:	d14c      	bne.n	8003c66 <_printf_i+0x1fe>
 8003bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8003bd0:	b004      	add	sp, #16
 8003bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bd6:	4835      	ldr	r0, [pc, #212]	; (8003cac <_printf_i+0x244>)
 8003bd8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003bdc:	6823      	ldr	r3, [r4, #0]
 8003bde:	680e      	ldr	r6, [r1, #0]
 8003be0:	061f      	lsls	r7, r3, #24
 8003be2:	f856 5b04 	ldr.w	r5, [r6], #4
 8003be6:	600e      	str	r6, [r1, #0]
 8003be8:	d514      	bpl.n	8003c14 <_printf_i+0x1ac>
 8003bea:	07d9      	lsls	r1, r3, #31
 8003bec:	bf44      	itt	mi
 8003bee:	f043 0320 	orrmi.w	r3, r3, #32
 8003bf2:	6023      	strmi	r3, [r4, #0]
 8003bf4:	b91d      	cbnz	r5, 8003bfe <_printf_i+0x196>
 8003bf6:	6823      	ldr	r3, [r4, #0]
 8003bf8:	f023 0320 	bic.w	r3, r3, #32
 8003bfc:	6023      	str	r3, [r4, #0]
 8003bfe:	2310      	movs	r3, #16
 8003c00:	e7b0      	b.n	8003b64 <_printf_i+0xfc>
 8003c02:	6823      	ldr	r3, [r4, #0]
 8003c04:	f043 0320 	orr.w	r3, r3, #32
 8003c08:	6023      	str	r3, [r4, #0]
 8003c0a:	2378      	movs	r3, #120	; 0x78
 8003c0c:	4828      	ldr	r0, [pc, #160]	; (8003cb0 <_printf_i+0x248>)
 8003c0e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003c12:	e7e3      	b.n	8003bdc <_printf_i+0x174>
 8003c14:	065e      	lsls	r6, r3, #25
 8003c16:	bf48      	it	mi
 8003c18:	b2ad      	uxthmi	r5, r5
 8003c1a:	e7e6      	b.n	8003bea <_printf_i+0x182>
 8003c1c:	4616      	mov	r6, r2
 8003c1e:	e7bb      	b.n	8003b98 <_printf_i+0x130>
 8003c20:	680b      	ldr	r3, [r1, #0]
 8003c22:	6826      	ldr	r6, [r4, #0]
 8003c24:	6960      	ldr	r0, [r4, #20]
 8003c26:	1d1d      	adds	r5, r3, #4
 8003c28:	600d      	str	r5, [r1, #0]
 8003c2a:	0635      	lsls	r5, r6, #24
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	d501      	bpl.n	8003c34 <_printf_i+0x1cc>
 8003c30:	6018      	str	r0, [r3, #0]
 8003c32:	e002      	b.n	8003c3a <_printf_i+0x1d2>
 8003c34:	0671      	lsls	r1, r6, #25
 8003c36:	d5fb      	bpl.n	8003c30 <_printf_i+0x1c8>
 8003c38:	8018      	strh	r0, [r3, #0]
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	6123      	str	r3, [r4, #16]
 8003c3e:	4616      	mov	r6, r2
 8003c40:	e7ba      	b.n	8003bb8 <_printf_i+0x150>
 8003c42:	680b      	ldr	r3, [r1, #0]
 8003c44:	1d1a      	adds	r2, r3, #4
 8003c46:	600a      	str	r2, [r1, #0]
 8003c48:	681e      	ldr	r6, [r3, #0]
 8003c4a:	6862      	ldr	r2, [r4, #4]
 8003c4c:	2100      	movs	r1, #0
 8003c4e:	4630      	mov	r0, r6
 8003c50:	f7fc fade 	bl	8000210 <memchr>
 8003c54:	b108      	cbz	r0, 8003c5a <_printf_i+0x1f2>
 8003c56:	1b80      	subs	r0, r0, r6
 8003c58:	6060      	str	r0, [r4, #4]
 8003c5a:	6863      	ldr	r3, [r4, #4]
 8003c5c:	6123      	str	r3, [r4, #16]
 8003c5e:	2300      	movs	r3, #0
 8003c60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c64:	e7a8      	b.n	8003bb8 <_printf_i+0x150>
 8003c66:	6923      	ldr	r3, [r4, #16]
 8003c68:	4632      	mov	r2, r6
 8003c6a:	4649      	mov	r1, r9
 8003c6c:	4640      	mov	r0, r8
 8003c6e:	47d0      	blx	sl
 8003c70:	3001      	adds	r0, #1
 8003c72:	d0ab      	beq.n	8003bcc <_printf_i+0x164>
 8003c74:	6823      	ldr	r3, [r4, #0]
 8003c76:	079b      	lsls	r3, r3, #30
 8003c78:	d413      	bmi.n	8003ca2 <_printf_i+0x23a>
 8003c7a:	68e0      	ldr	r0, [r4, #12]
 8003c7c:	9b03      	ldr	r3, [sp, #12]
 8003c7e:	4298      	cmp	r0, r3
 8003c80:	bfb8      	it	lt
 8003c82:	4618      	movlt	r0, r3
 8003c84:	e7a4      	b.n	8003bd0 <_printf_i+0x168>
 8003c86:	2301      	movs	r3, #1
 8003c88:	4632      	mov	r2, r6
 8003c8a:	4649      	mov	r1, r9
 8003c8c:	4640      	mov	r0, r8
 8003c8e:	47d0      	blx	sl
 8003c90:	3001      	adds	r0, #1
 8003c92:	d09b      	beq.n	8003bcc <_printf_i+0x164>
 8003c94:	3501      	adds	r5, #1
 8003c96:	68e3      	ldr	r3, [r4, #12]
 8003c98:	9903      	ldr	r1, [sp, #12]
 8003c9a:	1a5b      	subs	r3, r3, r1
 8003c9c:	42ab      	cmp	r3, r5
 8003c9e:	dcf2      	bgt.n	8003c86 <_printf_i+0x21e>
 8003ca0:	e7eb      	b.n	8003c7a <_printf_i+0x212>
 8003ca2:	2500      	movs	r5, #0
 8003ca4:	f104 0619 	add.w	r6, r4, #25
 8003ca8:	e7f5      	b.n	8003c96 <_printf_i+0x22e>
 8003caa:	bf00      	nop
 8003cac:	08004d99 	.word	0x08004d99
 8003cb0:	08004daa 	.word	0x08004daa

08003cb4 <_sbrk_r>:
 8003cb4:	b538      	push	{r3, r4, r5, lr}
 8003cb6:	4d06      	ldr	r5, [pc, #24]	; (8003cd0 <_sbrk_r+0x1c>)
 8003cb8:	2300      	movs	r3, #0
 8003cba:	4604      	mov	r4, r0
 8003cbc:	4608      	mov	r0, r1
 8003cbe:	602b      	str	r3, [r5, #0]
 8003cc0:	f000 fe28 	bl	8004914 <_sbrk>
 8003cc4:	1c43      	adds	r3, r0, #1
 8003cc6:	d102      	bne.n	8003cce <_sbrk_r+0x1a>
 8003cc8:	682b      	ldr	r3, [r5, #0]
 8003cca:	b103      	cbz	r3, 8003cce <_sbrk_r+0x1a>
 8003ccc:	6023      	str	r3, [r4, #0]
 8003cce:	bd38      	pop	{r3, r4, r5, pc}
 8003cd0:	200003f0 	.word	0x200003f0

08003cd4 <_raise_r>:
 8003cd4:	291f      	cmp	r1, #31
 8003cd6:	b538      	push	{r3, r4, r5, lr}
 8003cd8:	4604      	mov	r4, r0
 8003cda:	460d      	mov	r5, r1
 8003cdc:	d904      	bls.n	8003ce8 <_raise_r+0x14>
 8003cde:	2316      	movs	r3, #22
 8003ce0:	6003      	str	r3, [r0, #0]
 8003ce2:	f04f 30ff 	mov.w	r0, #4294967295
 8003ce6:	bd38      	pop	{r3, r4, r5, pc}
 8003ce8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003cea:	b112      	cbz	r2, 8003cf2 <_raise_r+0x1e>
 8003cec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003cf0:	b94b      	cbnz	r3, 8003d06 <_raise_r+0x32>
 8003cf2:	4620      	mov	r0, r4
 8003cf4:	f000 f830 	bl	8003d58 <_getpid_r>
 8003cf8:	462a      	mov	r2, r5
 8003cfa:	4601      	mov	r1, r0
 8003cfc:	4620      	mov	r0, r4
 8003cfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d02:	f000 b817 	b.w	8003d34 <_kill_r>
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d00a      	beq.n	8003d20 <_raise_r+0x4c>
 8003d0a:	1c59      	adds	r1, r3, #1
 8003d0c:	d103      	bne.n	8003d16 <_raise_r+0x42>
 8003d0e:	2316      	movs	r3, #22
 8003d10:	6003      	str	r3, [r0, #0]
 8003d12:	2001      	movs	r0, #1
 8003d14:	e7e7      	b.n	8003ce6 <_raise_r+0x12>
 8003d16:	2400      	movs	r4, #0
 8003d18:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8003d1c:	4628      	mov	r0, r5
 8003d1e:	4798      	blx	r3
 8003d20:	2000      	movs	r0, #0
 8003d22:	e7e0      	b.n	8003ce6 <_raise_r+0x12>

08003d24 <raise>:
 8003d24:	4b02      	ldr	r3, [pc, #8]	; (8003d30 <raise+0xc>)
 8003d26:	4601      	mov	r1, r0
 8003d28:	6818      	ldr	r0, [r3, #0]
 8003d2a:	f7ff bfd3 	b.w	8003cd4 <_raise_r>
 8003d2e:	bf00      	nop
 8003d30:	20000014 	.word	0x20000014

08003d34 <_kill_r>:
 8003d34:	b538      	push	{r3, r4, r5, lr}
 8003d36:	4d07      	ldr	r5, [pc, #28]	; (8003d54 <_kill_r+0x20>)
 8003d38:	2300      	movs	r3, #0
 8003d3a:	4604      	mov	r4, r0
 8003d3c:	4608      	mov	r0, r1
 8003d3e:	4611      	mov	r1, r2
 8003d40:	602b      	str	r3, [r5, #0]
 8003d42:	f000 fdcf 	bl	80048e4 <_kill>
 8003d46:	1c43      	adds	r3, r0, #1
 8003d48:	d102      	bne.n	8003d50 <_kill_r+0x1c>
 8003d4a:	682b      	ldr	r3, [r5, #0]
 8003d4c:	b103      	cbz	r3, 8003d50 <_kill_r+0x1c>
 8003d4e:	6023      	str	r3, [r4, #0]
 8003d50:	bd38      	pop	{r3, r4, r5, pc}
 8003d52:	bf00      	nop
 8003d54:	200003f0 	.word	0x200003f0

08003d58 <_getpid_r>:
 8003d58:	f000 bdb4 	b.w	80048c4 <_getpid>

08003d5c <_vsiprintf_r>:
 8003d5c:	b500      	push	{lr}
 8003d5e:	b09b      	sub	sp, #108	; 0x6c
 8003d60:	9100      	str	r1, [sp, #0]
 8003d62:	9104      	str	r1, [sp, #16]
 8003d64:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003d68:	9105      	str	r1, [sp, #20]
 8003d6a:	9102      	str	r1, [sp, #8]
 8003d6c:	4905      	ldr	r1, [pc, #20]	; (8003d84 <_vsiprintf_r+0x28>)
 8003d6e:	9103      	str	r1, [sp, #12]
 8003d70:	4669      	mov	r1, sp
 8003d72:	f000 fbe3 	bl	800453c <_svfiprintf_r>
 8003d76:	9b00      	ldr	r3, [sp, #0]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	701a      	strb	r2, [r3, #0]
 8003d7c:	b01b      	add	sp, #108	; 0x6c
 8003d7e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003d82:	bf00      	nop
 8003d84:	ffff0208 	.word	0xffff0208

08003d88 <vsiprintf>:
 8003d88:	4613      	mov	r3, r2
 8003d8a:	460a      	mov	r2, r1
 8003d8c:	4601      	mov	r1, r0
 8003d8e:	4802      	ldr	r0, [pc, #8]	; (8003d98 <vsiprintf+0x10>)
 8003d90:	6800      	ldr	r0, [r0, #0]
 8003d92:	f7ff bfe3 	b.w	8003d5c <_vsiprintf_r>
 8003d96:	bf00      	nop
 8003d98:	20000014 	.word	0x20000014

08003d9c <__swbuf_r>:
 8003d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d9e:	460e      	mov	r6, r1
 8003da0:	4614      	mov	r4, r2
 8003da2:	4605      	mov	r5, r0
 8003da4:	b118      	cbz	r0, 8003dae <__swbuf_r+0x12>
 8003da6:	6983      	ldr	r3, [r0, #24]
 8003da8:	b90b      	cbnz	r3, 8003dae <__swbuf_r+0x12>
 8003daa:	f000 fa33 	bl	8004214 <__sinit>
 8003dae:	4b21      	ldr	r3, [pc, #132]	; (8003e34 <__swbuf_r+0x98>)
 8003db0:	429c      	cmp	r4, r3
 8003db2:	d12b      	bne.n	8003e0c <__swbuf_r+0x70>
 8003db4:	686c      	ldr	r4, [r5, #4]
 8003db6:	69a3      	ldr	r3, [r4, #24]
 8003db8:	60a3      	str	r3, [r4, #8]
 8003dba:	89a3      	ldrh	r3, [r4, #12]
 8003dbc:	071a      	lsls	r2, r3, #28
 8003dbe:	d52f      	bpl.n	8003e20 <__swbuf_r+0x84>
 8003dc0:	6923      	ldr	r3, [r4, #16]
 8003dc2:	b36b      	cbz	r3, 8003e20 <__swbuf_r+0x84>
 8003dc4:	6923      	ldr	r3, [r4, #16]
 8003dc6:	6820      	ldr	r0, [r4, #0]
 8003dc8:	1ac0      	subs	r0, r0, r3
 8003dca:	6963      	ldr	r3, [r4, #20]
 8003dcc:	b2f6      	uxtb	r6, r6
 8003dce:	4283      	cmp	r3, r0
 8003dd0:	4637      	mov	r7, r6
 8003dd2:	dc04      	bgt.n	8003dde <__swbuf_r+0x42>
 8003dd4:	4621      	mov	r1, r4
 8003dd6:	4628      	mov	r0, r5
 8003dd8:	f000 f988 	bl	80040ec <_fflush_r>
 8003ddc:	bb30      	cbnz	r0, 8003e2c <__swbuf_r+0x90>
 8003dde:	68a3      	ldr	r3, [r4, #8]
 8003de0:	3b01      	subs	r3, #1
 8003de2:	60a3      	str	r3, [r4, #8]
 8003de4:	6823      	ldr	r3, [r4, #0]
 8003de6:	1c5a      	adds	r2, r3, #1
 8003de8:	6022      	str	r2, [r4, #0]
 8003dea:	701e      	strb	r6, [r3, #0]
 8003dec:	6963      	ldr	r3, [r4, #20]
 8003dee:	3001      	adds	r0, #1
 8003df0:	4283      	cmp	r3, r0
 8003df2:	d004      	beq.n	8003dfe <__swbuf_r+0x62>
 8003df4:	89a3      	ldrh	r3, [r4, #12]
 8003df6:	07db      	lsls	r3, r3, #31
 8003df8:	d506      	bpl.n	8003e08 <__swbuf_r+0x6c>
 8003dfa:	2e0a      	cmp	r6, #10
 8003dfc:	d104      	bne.n	8003e08 <__swbuf_r+0x6c>
 8003dfe:	4621      	mov	r1, r4
 8003e00:	4628      	mov	r0, r5
 8003e02:	f000 f973 	bl	80040ec <_fflush_r>
 8003e06:	b988      	cbnz	r0, 8003e2c <__swbuf_r+0x90>
 8003e08:	4638      	mov	r0, r7
 8003e0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e0c:	4b0a      	ldr	r3, [pc, #40]	; (8003e38 <__swbuf_r+0x9c>)
 8003e0e:	429c      	cmp	r4, r3
 8003e10:	d101      	bne.n	8003e16 <__swbuf_r+0x7a>
 8003e12:	68ac      	ldr	r4, [r5, #8]
 8003e14:	e7cf      	b.n	8003db6 <__swbuf_r+0x1a>
 8003e16:	4b09      	ldr	r3, [pc, #36]	; (8003e3c <__swbuf_r+0xa0>)
 8003e18:	429c      	cmp	r4, r3
 8003e1a:	bf08      	it	eq
 8003e1c:	68ec      	ldreq	r4, [r5, #12]
 8003e1e:	e7ca      	b.n	8003db6 <__swbuf_r+0x1a>
 8003e20:	4621      	mov	r1, r4
 8003e22:	4628      	mov	r0, r5
 8003e24:	f000 f80c 	bl	8003e40 <__swsetup_r>
 8003e28:	2800      	cmp	r0, #0
 8003e2a:	d0cb      	beq.n	8003dc4 <__swbuf_r+0x28>
 8003e2c:	f04f 37ff 	mov.w	r7, #4294967295
 8003e30:	e7ea      	b.n	8003e08 <__swbuf_r+0x6c>
 8003e32:	bf00      	nop
 8003e34:	08004ddc 	.word	0x08004ddc
 8003e38:	08004dfc 	.word	0x08004dfc
 8003e3c:	08004dbc 	.word	0x08004dbc

08003e40 <__swsetup_r>:
 8003e40:	4b32      	ldr	r3, [pc, #200]	; (8003f0c <__swsetup_r+0xcc>)
 8003e42:	b570      	push	{r4, r5, r6, lr}
 8003e44:	681d      	ldr	r5, [r3, #0]
 8003e46:	4606      	mov	r6, r0
 8003e48:	460c      	mov	r4, r1
 8003e4a:	b125      	cbz	r5, 8003e56 <__swsetup_r+0x16>
 8003e4c:	69ab      	ldr	r3, [r5, #24]
 8003e4e:	b913      	cbnz	r3, 8003e56 <__swsetup_r+0x16>
 8003e50:	4628      	mov	r0, r5
 8003e52:	f000 f9df 	bl	8004214 <__sinit>
 8003e56:	4b2e      	ldr	r3, [pc, #184]	; (8003f10 <__swsetup_r+0xd0>)
 8003e58:	429c      	cmp	r4, r3
 8003e5a:	d10f      	bne.n	8003e7c <__swsetup_r+0x3c>
 8003e5c:	686c      	ldr	r4, [r5, #4]
 8003e5e:	89a3      	ldrh	r3, [r4, #12]
 8003e60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003e64:	0719      	lsls	r1, r3, #28
 8003e66:	d42c      	bmi.n	8003ec2 <__swsetup_r+0x82>
 8003e68:	06dd      	lsls	r5, r3, #27
 8003e6a:	d411      	bmi.n	8003e90 <__swsetup_r+0x50>
 8003e6c:	2309      	movs	r3, #9
 8003e6e:	6033      	str	r3, [r6, #0]
 8003e70:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003e74:	81a3      	strh	r3, [r4, #12]
 8003e76:	f04f 30ff 	mov.w	r0, #4294967295
 8003e7a:	e03e      	b.n	8003efa <__swsetup_r+0xba>
 8003e7c:	4b25      	ldr	r3, [pc, #148]	; (8003f14 <__swsetup_r+0xd4>)
 8003e7e:	429c      	cmp	r4, r3
 8003e80:	d101      	bne.n	8003e86 <__swsetup_r+0x46>
 8003e82:	68ac      	ldr	r4, [r5, #8]
 8003e84:	e7eb      	b.n	8003e5e <__swsetup_r+0x1e>
 8003e86:	4b24      	ldr	r3, [pc, #144]	; (8003f18 <__swsetup_r+0xd8>)
 8003e88:	429c      	cmp	r4, r3
 8003e8a:	bf08      	it	eq
 8003e8c:	68ec      	ldreq	r4, [r5, #12]
 8003e8e:	e7e6      	b.n	8003e5e <__swsetup_r+0x1e>
 8003e90:	0758      	lsls	r0, r3, #29
 8003e92:	d512      	bpl.n	8003eba <__swsetup_r+0x7a>
 8003e94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003e96:	b141      	cbz	r1, 8003eaa <__swsetup_r+0x6a>
 8003e98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003e9c:	4299      	cmp	r1, r3
 8003e9e:	d002      	beq.n	8003ea6 <__swsetup_r+0x66>
 8003ea0:	4630      	mov	r0, r6
 8003ea2:	f7ff fb6f 	bl	8003584 <_free_r>
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	6363      	str	r3, [r4, #52]	; 0x34
 8003eaa:	89a3      	ldrh	r3, [r4, #12]
 8003eac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003eb0:	81a3      	strh	r3, [r4, #12]
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	6063      	str	r3, [r4, #4]
 8003eb6:	6923      	ldr	r3, [r4, #16]
 8003eb8:	6023      	str	r3, [r4, #0]
 8003eba:	89a3      	ldrh	r3, [r4, #12]
 8003ebc:	f043 0308 	orr.w	r3, r3, #8
 8003ec0:	81a3      	strh	r3, [r4, #12]
 8003ec2:	6923      	ldr	r3, [r4, #16]
 8003ec4:	b94b      	cbnz	r3, 8003eda <__swsetup_r+0x9a>
 8003ec6:	89a3      	ldrh	r3, [r4, #12]
 8003ec8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003ecc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ed0:	d003      	beq.n	8003eda <__swsetup_r+0x9a>
 8003ed2:	4621      	mov	r1, r4
 8003ed4:	4630      	mov	r0, r6
 8003ed6:	f000 fa63 	bl	80043a0 <__smakebuf_r>
 8003eda:	89a0      	ldrh	r0, [r4, #12]
 8003edc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003ee0:	f010 0301 	ands.w	r3, r0, #1
 8003ee4:	d00a      	beq.n	8003efc <__swsetup_r+0xbc>
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	60a3      	str	r3, [r4, #8]
 8003eea:	6963      	ldr	r3, [r4, #20]
 8003eec:	425b      	negs	r3, r3
 8003eee:	61a3      	str	r3, [r4, #24]
 8003ef0:	6923      	ldr	r3, [r4, #16]
 8003ef2:	b943      	cbnz	r3, 8003f06 <__swsetup_r+0xc6>
 8003ef4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003ef8:	d1ba      	bne.n	8003e70 <__swsetup_r+0x30>
 8003efa:	bd70      	pop	{r4, r5, r6, pc}
 8003efc:	0781      	lsls	r1, r0, #30
 8003efe:	bf58      	it	pl
 8003f00:	6963      	ldrpl	r3, [r4, #20]
 8003f02:	60a3      	str	r3, [r4, #8]
 8003f04:	e7f4      	b.n	8003ef0 <__swsetup_r+0xb0>
 8003f06:	2000      	movs	r0, #0
 8003f08:	e7f7      	b.n	8003efa <__swsetup_r+0xba>
 8003f0a:	bf00      	nop
 8003f0c:	20000014 	.word	0x20000014
 8003f10:	08004ddc 	.word	0x08004ddc
 8003f14:	08004dfc 	.word	0x08004dfc
 8003f18:	08004dbc 	.word	0x08004dbc

08003f1c <__register_exitproc>:
 8003f1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f20:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8003fdc <__register_exitproc+0xc0>
 8003f24:	4606      	mov	r6, r0
 8003f26:	f8d8 0000 	ldr.w	r0, [r8]
 8003f2a:	461f      	mov	r7, r3
 8003f2c:	460d      	mov	r5, r1
 8003f2e:	4691      	mov	r9, r2
 8003f30:	f000 fa0e 	bl	8004350 <__retarget_lock_acquire_recursive>
 8003f34:	4b25      	ldr	r3, [pc, #148]	; (8003fcc <__register_exitproc+0xb0>)
 8003f36:	681c      	ldr	r4, [r3, #0]
 8003f38:	b934      	cbnz	r4, 8003f48 <__register_exitproc+0x2c>
 8003f3a:	4c25      	ldr	r4, [pc, #148]	; (8003fd0 <__register_exitproc+0xb4>)
 8003f3c:	601c      	str	r4, [r3, #0]
 8003f3e:	4b25      	ldr	r3, [pc, #148]	; (8003fd4 <__register_exitproc+0xb8>)
 8003f40:	b113      	cbz	r3, 8003f48 <__register_exitproc+0x2c>
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8003f48:	6863      	ldr	r3, [r4, #4]
 8003f4a:	2b1f      	cmp	r3, #31
 8003f4c:	dd07      	ble.n	8003f5e <__register_exitproc+0x42>
 8003f4e:	f8d8 0000 	ldr.w	r0, [r8]
 8003f52:	f000 f9ff 	bl	8004354 <__retarget_lock_release_recursive>
 8003f56:	f04f 30ff 	mov.w	r0, #4294967295
 8003f5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f5e:	b34e      	cbz	r6, 8003fb4 <__register_exitproc+0x98>
 8003f60:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8003f64:	b988      	cbnz	r0, 8003f8a <__register_exitproc+0x6e>
 8003f66:	4b1c      	ldr	r3, [pc, #112]	; (8003fd8 <__register_exitproc+0xbc>)
 8003f68:	b923      	cbnz	r3, 8003f74 <__register_exitproc+0x58>
 8003f6a:	f8d8 0000 	ldr.w	r0, [r8]
 8003f6e:	f000 f9f0 	bl	8004352 <__retarget_lock_release>
 8003f72:	e7f0      	b.n	8003f56 <__register_exitproc+0x3a>
 8003f74:	f44f 7084 	mov.w	r0, #264	; 0x108
 8003f78:	f7ff fac4 	bl	8003504 <malloc>
 8003f7c:	2800      	cmp	r0, #0
 8003f7e:	d0f4      	beq.n	8003f6a <__register_exitproc+0x4e>
 8003f80:	2300      	movs	r3, #0
 8003f82:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8003f86:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8003f8a:	6863      	ldr	r3, [r4, #4]
 8003f8c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8003f90:	2201      	movs	r2, #1
 8003f92:	409a      	lsls	r2, r3
 8003f94:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8003f98:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	2e02      	cmp	r6, #2
 8003fa0:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8003fa4:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8003fa8:	bf02      	ittt	eq
 8003faa:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8003fae:	431a      	orreq	r2, r3
 8003fb0:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 8003fb4:	6863      	ldr	r3, [r4, #4]
 8003fb6:	f8d8 0000 	ldr.w	r0, [r8]
 8003fba:	1c5a      	adds	r2, r3, #1
 8003fbc:	3302      	adds	r3, #2
 8003fbe:	6062      	str	r2, [r4, #4]
 8003fc0:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8003fc4:	f000 f9c6 	bl	8004354 <__retarget_lock_release_recursive>
 8003fc8:	2000      	movs	r0, #0
 8003fca:	e7c6      	b.n	8003f5a <__register_exitproc+0x3e>
 8003fcc:	20000358 	.word	0x20000358
 8003fd0:	200002cc 	.word	0x200002cc
 8003fd4:	00000000 	.word	0x00000000
 8003fd8:	08003505 	.word	0x08003505
 8003fdc:	20000078 	.word	0x20000078

08003fe0 <__sflush_r>:
 8003fe0:	898a      	ldrh	r2, [r1, #12]
 8003fe2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fe6:	4605      	mov	r5, r0
 8003fe8:	0710      	lsls	r0, r2, #28
 8003fea:	460c      	mov	r4, r1
 8003fec:	d458      	bmi.n	80040a0 <__sflush_r+0xc0>
 8003fee:	684b      	ldr	r3, [r1, #4]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	dc05      	bgt.n	8004000 <__sflush_r+0x20>
 8003ff4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	dc02      	bgt.n	8004000 <__sflush_r+0x20>
 8003ffa:	2000      	movs	r0, #0
 8003ffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004000:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004002:	2e00      	cmp	r6, #0
 8004004:	d0f9      	beq.n	8003ffa <__sflush_r+0x1a>
 8004006:	2300      	movs	r3, #0
 8004008:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800400c:	682f      	ldr	r7, [r5, #0]
 800400e:	602b      	str	r3, [r5, #0]
 8004010:	d032      	beq.n	8004078 <__sflush_r+0x98>
 8004012:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004014:	89a3      	ldrh	r3, [r4, #12]
 8004016:	075a      	lsls	r2, r3, #29
 8004018:	d505      	bpl.n	8004026 <__sflush_r+0x46>
 800401a:	6863      	ldr	r3, [r4, #4]
 800401c:	1ac0      	subs	r0, r0, r3
 800401e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004020:	b10b      	cbz	r3, 8004026 <__sflush_r+0x46>
 8004022:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004024:	1ac0      	subs	r0, r0, r3
 8004026:	2300      	movs	r3, #0
 8004028:	4602      	mov	r2, r0
 800402a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800402c:	6a21      	ldr	r1, [r4, #32]
 800402e:	4628      	mov	r0, r5
 8004030:	47b0      	blx	r6
 8004032:	1c43      	adds	r3, r0, #1
 8004034:	89a3      	ldrh	r3, [r4, #12]
 8004036:	d106      	bne.n	8004046 <__sflush_r+0x66>
 8004038:	6829      	ldr	r1, [r5, #0]
 800403a:	291d      	cmp	r1, #29
 800403c:	d82c      	bhi.n	8004098 <__sflush_r+0xb8>
 800403e:	4a2a      	ldr	r2, [pc, #168]	; (80040e8 <__sflush_r+0x108>)
 8004040:	40ca      	lsrs	r2, r1
 8004042:	07d6      	lsls	r6, r2, #31
 8004044:	d528      	bpl.n	8004098 <__sflush_r+0xb8>
 8004046:	2200      	movs	r2, #0
 8004048:	6062      	str	r2, [r4, #4]
 800404a:	04d9      	lsls	r1, r3, #19
 800404c:	6922      	ldr	r2, [r4, #16]
 800404e:	6022      	str	r2, [r4, #0]
 8004050:	d504      	bpl.n	800405c <__sflush_r+0x7c>
 8004052:	1c42      	adds	r2, r0, #1
 8004054:	d101      	bne.n	800405a <__sflush_r+0x7a>
 8004056:	682b      	ldr	r3, [r5, #0]
 8004058:	b903      	cbnz	r3, 800405c <__sflush_r+0x7c>
 800405a:	6560      	str	r0, [r4, #84]	; 0x54
 800405c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800405e:	602f      	str	r7, [r5, #0]
 8004060:	2900      	cmp	r1, #0
 8004062:	d0ca      	beq.n	8003ffa <__sflush_r+0x1a>
 8004064:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004068:	4299      	cmp	r1, r3
 800406a:	d002      	beq.n	8004072 <__sflush_r+0x92>
 800406c:	4628      	mov	r0, r5
 800406e:	f7ff fa89 	bl	8003584 <_free_r>
 8004072:	2000      	movs	r0, #0
 8004074:	6360      	str	r0, [r4, #52]	; 0x34
 8004076:	e7c1      	b.n	8003ffc <__sflush_r+0x1c>
 8004078:	6a21      	ldr	r1, [r4, #32]
 800407a:	2301      	movs	r3, #1
 800407c:	4628      	mov	r0, r5
 800407e:	47b0      	blx	r6
 8004080:	1c41      	adds	r1, r0, #1
 8004082:	d1c7      	bne.n	8004014 <__sflush_r+0x34>
 8004084:	682b      	ldr	r3, [r5, #0]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d0c4      	beq.n	8004014 <__sflush_r+0x34>
 800408a:	2b1d      	cmp	r3, #29
 800408c:	d001      	beq.n	8004092 <__sflush_r+0xb2>
 800408e:	2b16      	cmp	r3, #22
 8004090:	d101      	bne.n	8004096 <__sflush_r+0xb6>
 8004092:	602f      	str	r7, [r5, #0]
 8004094:	e7b1      	b.n	8003ffa <__sflush_r+0x1a>
 8004096:	89a3      	ldrh	r3, [r4, #12]
 8004098:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800409c:	81a3      	strh	r3, [r4, #12]
 800409e:	e7ad      	b.n	8003ffc <__sflush_r+0x1c>
 80040a0:	690f      	ldr	r7, [r1, #16]
 80040a2:	2f00      	cmp	r7, #0
 80040a4:	d0a9      	beq.n	8003ffa <__sflush_r+0x1a>
 80040a6:	0793      	lsls	r3, r2, #30
 80040a8:	680e      	ldr	r6, [r1, #0]
 80040aa:	bf08      	it	eq
 80040ac:	694b      	ldreq	r3, [r1, #20]
 80040ae:	600f      	str	r7, [r1, #0]
 80040b0:	bf18      	it	ne
 80040b2:	2300      	movne	r3, #0
 80040b4:	eba6 0807 	sub.w	r8, r6, r7
 80040b8:	608b      	str	r3, [r1, #8]
 80040ba:	f1b8 0f00 	cmp.w	r8, #0
 80040be:	dd9c      	ble.n	8003ffa <__sflush_r+0x1a>
 80040c0:	6a21      	ldr	r1, [r4, #32]
 80040c2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80040c4:	4643      	mov	r3, r8
 80040c6:	463a      	mov	r2, r7
 80040c8:	4628      	mov	r0, r5
 80040ca:	47b0      	blx	r6
 80040cc:	2800      	cmp	r0, #0
 80040ce:	dc06      	bgt.n	80040de <__sflush_r+0xfe>
 80040d0:	89a3      	ldrh	r3, [r4, #12]
 80040d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040d6:	81a3      	strh	r3, [r4, #12]
 80040d8:	f04f 30ff 	mov.w	r0, #4294967295
 80040dc:	e78e      	b.n	8003ffc <__sflush_r+0x1c>
 80040de:	4407      	add	r7, r0
 80040e0:	eba8 0800 	sub.w	r8, r8, r0
 80040e4:	e7e9      	b.n	80040ba <__sflush_r+0xda>
 80040e6:	bf00      	nop
 80040e8:	20400001 	.word	0x20400001

080040ec <_fflush_r>:
 80040ec:	b538      	push	{r3, r4, r5, lr}
 80040ee:	690b      	ldr	r3, [r1, #16]
 80040f0:	4605      	mov	r5, r0
 80040f2:	460c      	mov	r4, r1
 80040f4:	b913      	cbnz	r3, 80040fc <_fflush_r+0x10>
 80040f6:	2500      	movs	r5, #0
 80040f8:	4628      	mov	r0, r5
 80040fa:	bd38      	pop	{r3, r4, r5, pc}
 80040fc:	b118      	cbz	r0, 8004106 <_fflush_r+0x1a>
 80040fe:	6983      	ldr	r3, [r0, #24]
 8004100:	b90b      	cbnz	r3, 8004106 <_fflush_r+0x1a>
 8004102:	f000 f887 	bl	8004214 <__sinit>
 8004106:	4b14      	ldr	r3, [pc, #80]	; (8004158 <_fflush_r+0x6c>)
 8004108:	429c      	cmp	r4, r3
 800410a:	d11b      	bne.n	8004144 <_fflush_r+0x58>
 800410c:	686c      	ldr	r4, [r5, #4]
 800410e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d0ef      	beq.n	80040f6 <_fflush_r+0xa>
 8004116:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004118:	07d0      	lsls	r0, r2, #31
 800411a:	d404      	bmi.n	8004126 <_fflush_r+0x3a>
 800411c:	0599      	lsls	r1, r3, #22
 800411e:	d402      	bmi.n	8004126 <_fflush_r+0x3a>
 8004120:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004122:	f000 f915 	bl	8004350 <__retarget_lock_acquire_recursive>
 8004126:	4628      	mov	r0, r5
 8004128:	4621      	mov	r1, r4
 800412a:	f7ff ff59 	bl	8003fe0 <__sflush_r>
 800412e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004130:	07da      	lsls	r2, r3, #31
 8004132:	4605      	mov	r5, r0
 8004134:	d4e0      	bmi.n	80040f8 <_fflush_r+0xc>
 8004136:	89a3      	ldrh	r3, [r4, #12]
 8004138:	059b      	lsls	r3, r3, #22
 800413a:	d4dd      	bmi.n	80040f8 <_fflush_r+0xc>
 800413c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800413e:	f000 f909 	bl	8004354 <__retarget_lock_release_recursive>
 8004142:	e7d9      	b.n	80040f8 <_fflush_r+0xc>
 8004144:	4b05      	ldr	r3, [pc, #20]	; (800415c <_fflush_r+0x70>)
 8004146:	429c      	cmp	r4, r3
 8004148:	d101      	bne.n	800414e <_fflush_r+0x62>
 800414a:	68ac      	ldr	r4, [r5, #8]
 800414c:	e7df      	b.n	800410e <_fflush_r+0x22>
 800414e:	4b04      	ldr	r3, [pc, #16]	; (8004160 <_fflush_r+0x74>)
 8004150:	429c      	cmp	r4, r3
 8004152:	bf08      	it	eq
 8004154:	68ec      	ldreq	r4, [r5, #12]
 8004156:	e7da      	b.n	800410e <_fflush_r+0x22>
 8004158:	08004ddc 	.word	0x08004ddc
 800415c:	08004dfc 	.word	0x08004dfc
 8004160:	08004dbc 	.word	0x08004dbc

08004164 <std>:
 8004164:	2300      	movs	r3, #0
 8004166:	b510      	push	{r4, lr}
 8004168:	4604      	mov	r4, r0
 800416a:	e9c0 3300 	strd	r3, r3, [r0]
 800416e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004172:	6083      	str	r3, [r0, #8]
 8004174:	8181      	strh	r1, [r0, #12]
 8004176:	6643      	str	r3, [r0, #100]	; 0x64
 8004178:	81c2      	strh	r2, [r0, #14]
 800417a:	6183      	str	r3, [r0, #24]
 800417c:	4619      	mov	r1, r3
 800417e:	2208      	movs	r2, #8
 8004180:	305c      	adds	r0, #92	; 0x5c
 8004182:	f7ff f9f7 	bl	8003574 <memset>
 8004186:	4b05      	ldr	r3, [pc, #20]	; (800419c <std+0x38>)
 8004188:	6263      	str	r3, [r4, #36]	; 0x24
 800418a:	4b05      	ldr	r3, [pc, #20]	; (80041a0 <std+0x3c>)
 800418c:	62a3      	str	r3, [r4, #40]	; 0x28
 800418e:	4b05      	ldr	r3, [pc, #20]	; (80041a4 <std+0x40>)
 8004190:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004192:	4b05      	ldr	r3, [pc, #20]	; (80041a8 <std+0x44>)
 8004194:	6224      	str	r4, [r4, #32]
 8004196:	6323      	str	r3, [r4, #48]	; 0x30
 8004198:	bd10      	pop	{r4, pc}
 800419a:	bf00      	nop
 800419c:	0800473d 	.word	0x0800473d
 80041a0:	0800475f 	.word	0x0800475f
 80041a4:	08004797 	.word	0x08004797
 80041a8:	080047bb 	.word	0x080047bb

080041ac <_cleanup_r>:
 80041ac:	4901      	ldr	r1, [pc, #4]	; (80041b4 <_cleanup_r+0x8>)
 80041ae:	f000 b8af 	b.w	8004310 <_fwalk_reent>
 80041b2:	bf00      	nop
 80041b4:	080040ed 	.word	0x080040ed

080041b8 <__sfmoreglue>:
 80041b8:	b570      	push	{r4, r5, r6, lr}
 80041ba:	1e4a      	subs	r2, r1, #1
 80041bc:	2568      	movs	r5, #104	; 0x68
 80041be:	4355      	muls	r5, r2
 80041c0:	460e      	mov	r6, r1
 80041c2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80041c6:	f7ff fa2d 	bl	8003624 <_malloc_r>
 80041ca:	4604      	mov	r4, r0
 80041cc:	b140      	cbz	r0, 80041e0 <__sfmoreglue+0x28>
 80041ce:	2100      	movs	r1, #0
 80041d0:	e9c0 1600 	strd	r1, r6, [r0]
 80041d4:	300c      	adds	r0, #12
 80041d6:	60a0      	str	r0, [r4, #8]
 80041d8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80041dc:	f7ff f9ca 	bl	8003574 <memset>
 80041e0:	4620      	mov	r0, r4
 80041e2:	bd70      	pop	{r4, r5, r6, pc}

080041e4 <__sfp_lock_acquire>:
 80041e4:	4801      	ldr	r0, [pc, #4]	; (80041ec <__sfp_lock_acquire+0x8>)
 80041e6:	f000 b8b3 	b.w	8004350 <__retarget_lock_acquire_recursive>
 80041ea:	bf00      	nop
 80041ec:	200003ec 	.word	0x200003ec

080041f0 <__sfp_lock_release>:
 80041f0:	4801      	ldr	r0, [pc, #4]	; (80041f8 <__sfp_lock_release+0x8>)
 80041f2:	f000 b8af 	b.w	8004354 <__retarget_lock_release_recursive>
 80041f6:	bf00      	nop
 80041f8:	200003ec 	.word	0x200003ec

080041fc <__sinit_lock_acquire>:
 80041fc:	4801      	ldr	r0, [pc, #4]	; (8004204 <__sinit_lock_acquire+0x8>)
 80041fe:	f000 b8a7 	b.w	8004350 <__retarget_lock_acquire_recursive>
 8004202:	bf00      	nop
 8004204:	200003e7 	.word	0x200003e7

08004208 <__sinit_lock_release>:
 8004208:	4801      	ldr	r0, [pc, #4]	; (8004210 <__sinit_lock_release+0x8>)
 800420a:	f000 b8a3 	b.w	8004354 <__retarget_lock_release_recursive>
 800420e:	bf00      	nop
 8004210:	200003e7 	.word	0x200003e7

08004214 <__sinit>:
 8004214:	b510      	push	{r4, lr}
 8004216:	4604      	mov	r4, r0
 8004218:	f7ff fff0 	bl	80041fc <__sinit_lock_acquire>
 800421c:	69a3      	ldr	r3, [r4, #24]
 800421e:	b11b      	cbz	r3, 8004228 <__sinit+0x14>
 8004220:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004224:	f7ff bff0 	b.w	8004208 <__sinit_lock_release>
 8004228:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800422c:	6523      	str	r3, [r4, #80]	; 0x50
 800422e:	4b13      	ldr	r3, [pc, #76]	; (800427c <__sinit+0x68>)
 8004230:	4a13      	ldr	r2, [pc, #76]	; (8004280 <__sinit+0x6c>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	62a2      	str	r2, [r4, #40]	; 0x28
 8004236:	42a3      	cmp	r3, r4
 8004238:	bf04      	itt	eq
 800423a:	2301      	moveq	r3, #1
 800423c:	61a3      	streq	r3, [r4, #24]
 800423e:	4620      	mov	r0, r4
 8004240:	f000 f820 	bl	8004284 <__sfp>
 8004244:	6060      	str	r0, [r4, #4]
 8004246:	4620      	mov	r0, r4
 8004248:	f000 f81c 	bl	8004284 <__sfp>
 800424c:	60a0      	str	r0, [r4, #8]
 800424e:	4620      	mov	r0, r4
 8004250:	f000 f818 	bl	8004284 <__sfp>
 8004254:	2200      	movs	r2, #0
 8004256:	60e0      	str	r0, [r4, #12]
 8004258:	2104      	movs	r1, #4
 800425a:	6860      	ldr	r0, [r4, #4]
 800425c:	f7ff ff82 	bl	8004164 <std>
 8004260:	68a0      	ldr	r0, [r4, #8]
 8004262:	2201      	movs	r2, #1
 8004264:	2109      	movs	r1, #9
 8004266:	f7ff ff7d 	bl	8004164 <std>
 800426a:	68e0      	ldr	r0, [r4, #12]
 800426c:	2202      	movs	r2, #2
 800426e:	2112      	movs	r1, #18
 8004270:	f7ff ff78 	bl	8004164 <std>
 8004274:	2301      	movs	r3, #1
 8004276:	61a3      	str	r3, [r4, #24]
 8004278:	e7d2      	b.n	8004220 <__sinit+0xc>
 800427a:	bf00      	nop
 800427c:	08004d84 	.word	0x08004d84
 8004280:	080041ad 	.word	0x080041ad

08004284 <__sfp>:
 8004284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004286:	4607      	mov	r7, r0
 8004288:	f7ff ffac 	bl	80041e4 <__sfp_lock_acquire>
 800428c:	4b1e      	ldr	r3, [pc, #120]	; (8004308 <__sfp+0x84>)
 800428e:	681e      	ldr	r6, [r3, #0]
 8004290:	69b3      	ldr	r3, [r6, #24]
 8004292:	b913      	cbnz	r3, 800429a <__sfp+0x16>
 8004294:	4630      	mov	r0, r6
 8004296:	f7ff ffbd 	bl	8004214 <__sinit>
 800429a:	3648      	adds	r6, #72	; 0x48
 800429c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80042a0:	3b01      	subs	r3, #1
 80042a2:	d503      	bpl.n	80042ac <__sfp+0x28>
 80042a4:	6833      	ldr	r3, [r6, #0]
 80042a6:	b30b      	cbz	r3, 80042ec <__sfp+0x68>
 80042a8:	6836      	ldr	r6, [r6, #0]
 80042aa:	e7f7      	b.n	800429c <__sfp+0x18>
 80042ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80042b0:	b9d5      	cbnz	r5, 80042e8 <__sfp+0x64>
 80042b2:	4b16      	ldr	r3, [pc, #88]	; (800430c <__sfp+0x88>)
 80042b4:	60e3      	str	r3, [r4, #12]
 80042b6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80042ba:	6665      	str	r5, [r4, #100]	; 0x64
 80042bc:	f000 f847 	bl	800434e <__retarget_lock_init_recursive>
 80042c0:	f7ff ff96 	bl	80041f0 <__sfp_lock_release>
 80042c4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80042c8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80042cc:	6025      	str	r5, [r4, #0]
 80042ce:	61a5      	str	r5, [r4, #24]
 80042d0:	2208      	movs	r2, #8
 80042d2:	4629      	mov	r1, r5
 80042d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80042d8:	f7ff f94c 	bl	8003574 <memset>
 80042dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80042e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80042e4:	4620      	mov	r0, r4
 80042e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042e8:	3468      	adds	r4, #104	; 0x68
 80042ea:	e7d9      	b.n	80042a0 <__sfp+0x1c>
 80042ec:	2104      	movs	r1, #4
 80042ee:	4638      	mov	r0, r7
 80042f0:	f7ff ff62 	bl	80041b8 <__sfmoreglue>
 80042f4:	4604      	mov	r4, r0
 80042f6:	6030      	str	r0, [r6, #0]
 80042f8:	2800      	cmp	r0, #0
 80042fa:	d1d5      	bne.n	80042a8 <__sfp+0x24>
 80042fc:	f7ff ff78 	bl	80041f0 <__sfp_lock_release>
 8004300:	230c      	movs	r3, #12
 8004302:	603b      	str	r3, [r7, #0]
 8004304:	e7ee      	b.n	80042e4 <__sfp+0x60>
 8004306:	bf00      	nop
 8004308:	08004d84 	.word	0x08004d84
 800430c:	ffff0001 	.word	0xffff0001

08004310 <_fwalk_reent>:
 8004310:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004314:	4606      	mov	r6, r0
 8004316:	4688      	mov	r8, r1
 8004318:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800431c:	2700      	movs	r7, #0
 800431e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004322:	f1b9 0901 	subs.w	r9, r9, #1
 8004326:	d505      	bpl.n	8004334 <_fwalk_reent+0x24>
 8004328:	6824      	ldr	r4, [r4, #0]
 800432a:	2c00      	cmp	r4, #0
 800432c:	d1f7      	bne.n	800431e <_fwalk_reent+0xe>
 800432e:	4638      	mov	r0, r7
 8004330:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004334:	89ab      	ldrh	r3, [r5, #12]
 8004336:	2b01      	cmp	r3, #1
 8004338:	d907      	bls.n	800434a <_fwalk_reent+0x3a>
 800433a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800433e:	3301      	adds	r3, #1
 8004340:	d003      	beq.n	800434a <_fwalk_reent+0x3a>
 8004342:	4629      	mov	r1, r5
 8004344:	4630      	mov	r0, r6
 8004346:	47c0      	blx	r8
 8004348:	4307      	orrs	r7, r0
 800434a:	3568      	adds	r5, #104	; 0x68
 800434c:	e7e9      	b.n	8004322 <_fwalk_reent+0x12>

0800434e <__retarget_lock_init_recursive>:
 800434e:	4770      	bx	lr

08004350 <__retarget_lock_acquire_recursive>:
 8004350:	4770      	bx	lr

08004352 <__retarget_lock_release>:
 8004352:	4770      	bx	lr

08004354 <__retarget_lock_release_recursive>:
 8004354:	4770      	bx	lr

08004356 <__swhatbuf_r>:
 8004356:	b570      	push	{r4, r5, r6, lr}
 8004358:	460e      	mov	r6, r1
 800435a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800435e:	2900      	cmp	r1, #0
 8004360:	b096      	sub	sp, #88	; 0x58
 8004362:	4614      	mov	r4, r2
 8004364:	461d      	mov	r5, r3
 8004366:	da07      	bge.n	8004378 <__swhatbuf_r+0x22>
 8004368:	2300      	movs	r3, #0
 800436a:	602b      	str	r3, [r5, #0]
 800436c:	89b3      	ldrh	r3, [r6, #12]
 800436e:	061a      	lsls	r2, r3, #24
 8004370:	d410      	bmi.n	8004394 <__swhatbuf_r+0x3e>
 8004372:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004376:	e00e      	b.n	8004396 <__swhatbuf_r+0x40>
 8004378:	466a      	mov	r2, sp
 800437a:	f000 fa45 	bl	8004808 <_fstat_r>
 800437e:	2800      	cmp	r0, #0
 8004380:	dbf2      	blt.n	8004368 <__swhatbuf_r+0x12>
 8004382:	9a01      	ldr	r2, [sp, #4]
 8004384:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004388:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800438c:	425a      	negs	r2, r3
 800438e:	415a      	adcs	r2, r3
 8004390:	602a      	str	r2, [r5, #0]
 8004392:	e7ee      	b.n	8004372 <__swhatbuf_r+0x1c>
 8004394:	2340      	movs	r3, #64	; 0x40
 8004396:	2000      	movs	r0, #0
 8004398:	6023      	str	r3, [r4, #0]
 800439a:	b016      	add	sp, #88	; 0x58
 800439c:	bd70      	pop	{r4, r5, r6, pc}
	...

080043a0 <__smakebuf_r>:
 80043a0:	898b      	ldrh	r3, [r1, #12]
 80043a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80043a4:	079d      	lsls	r5, r3, #30
 80043a6:	4606      	mov	r6, r0
 80043a8:	460c      	mov	r4, r1
 80043aa:	d507      	bpl.n	80043bc <__smakebuf_r+0x1c>
 80043ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80043b0:	6023      	str	r3, [r4, #0]
 80043b2:	6123      	str	r3, [r4, #16]
 80043b4:	2301      	movs	r3, #1
 80043b6:	6163      	str	r3, [r4, #20]
 80043b8:	b002      	add	sp, #8
 80043ba:	bd70      	pop	{r4, r5, r6, pc}
 80043bc:	ab01      	add	r3, sp, #4
 80043be:	466a      	mov	r2, sp
 80043c0:	f7ff ffc9 	bl	8004356 <__swhatbuf_r>
 80043c4:	9900      	ldr	r1, [sp, #0]
 80043c6:	4605      	mov	r5, r0
 80043c8:	4630      	mov	r0, r6
 80043ca:	f7ff f92b 	bl	8003624 <_malloc_r>
 80043ce:	b948      	cbnz	r0, 80043e4 <__smakebuf_r+0x44>
 80043d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80043d4:	059a      	lsls	r2, r3, #22
 80043d6:	d4ef      	bmi.n	80043b8 <__smakebuf_r+0x18>
 80043d8:	f023 0303 	bic.w	r3, r3, #3
 80043dc:	f043 0302 	orr.w	r3, r3, #2
 80043e0:	81a3      	strh	r3, [r4, #12]
 80043e2:	e7e3      	b.n	80043ac <__smakebuf_r+0xc>
 80043e4:	4b0d      	ldr	r3, [pc, #52]	; (800441c <__smakebuf_r+0x7c>)
 80043e6:	62b3      	str	r3, [r6, #40]	; 0x28
 80043e8:	89a3      	ldrh	r3, [r4, #12]
 80043ea:	6020      	str	r0, [r4, #0]
 80043ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043f0:	81a3      	strh	r3, [r4, #12]
 80043f2:	9b00      	ldr	r3, [sp, #0]
 80043f4:	6163      	str	r3, [r4, #20]
 80043f6:	9b01      	ldr	r3, [sp, #4]
 80043f8:	6120      	str	r0, [r4, #16]
 80043fa:	b15b      	cbz	r3, 8004414 <__smakebuf_r+0x74>
 80043fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004400:	4630      	mov	r0, r6
 8004402:	f000 fa13 	bl	800482c <_isatty_r>
 8004406:	b128      	cbz	r0, 8004414 <__smakebuf_r+0x74>
 8004408:	89a3      	ldrh	r3, [r4, #12]
 800440a:	f023 0303 	bic.w	r3, r3, #3
 800440e:	f043 0301 	orr.w	r3, r3, #1
 8004412:	81a3      	strh	r3, [r4, #12]
 8004414:	89a0      	ldrh	r0, [r4, #12]
 8004416:	4305      	orrs	r5, r0
 8004418:	81a5      	strh	r5, [r4, #12]
 800441a:	e7cd      	b.n	80043b8 <__smakebuf_r+0x18>
 800441c:	080041ad 	.word	0x080041ad

08004420 <__malloc_lock>:
 8004420:	4801      	ldr	r0, [pc, #4]	; (8004428 <__malloc_lock+0x8>)
 8004422:	f7ff bf95 	b.w	8004350 <__retarget_lock_acquire_recursive>
 8004426:	bf00      	nop
 8004428:	200003e8 	.word	0x200003e8

0800442c <__malloc_unlock>:
 800442c:	4801      	ldr	r0, [pc, #4]	; (8004434 <__malloc_unlock+0x8>)
 800442e:	f7ff bf91 	b.w	8004354 <__retarget_lock_release_recursive>
 8004432:	bf00      	nop
 8004434:	200003e8 	.word	0x200003e8

08004438 <_realloc_r>:
 8004438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800443a:	4607      	mov	r7, r0
 800443c:	4614      	mov	r4, r2
 800443e:	460e      	mov	r6, r1
 8004440:	b921      	cbnz	r1, 800444c <_realloc_r+0x14>
 8004442:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004446:	4611      	mov	r1, r2
 8004448:	f7ff b8ec 	b.w	8003624 <_malloc_r>
 800444c:	b922      	cbnz	r2, 8004458 <_realloc_r+0x20>
 800444e:	f7ff f899 	bl	8003584 <_free_r>
 8004452:	4625      	mov	r5, r4
 8004454:	4628      	mov	r0, r5
 8004456:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004458:	f000 fa0a 	bl	8004870 <_malloc_usable_size_r>
 800445c:	42a0      	cmp	r0, r4
 800445e:	d20f      	bcs.n	8004480 <_realloc_r+0x48>
 8004460:	4621      	mov	r1, r4
 8004462:	4638      	mov	r0, r7
 8004464:	f7ff f8de 	bl	8003624 <_malloc_r>
 8004468:	4605      	mov	r5, r0
 800446a:	2800      	cmp	r0, #0
 800446c:	d0f2      	beq.n	8004454 <_realloc_r+0x1c>
 800446e:	4631      	mov	r1, r6
 8004470:	4622      	mov	r2, r4
 8004472:	f7ff f857 	bl	8003524 <memcpy>
 8004476:	4631      	mov	r1, r6
 8004478:	4638      	mov	r0, r7
 800447a:	f7ff f883 	bl	8003584 <_free_r>
 800447e:	e7e9      	b.n	8004454 <_realloc_r+0x1c>
 8004480:	4635      	mov	r5, r6
 8004482:	e7e7      	b.n	8004454 <_realloc_r+0x1c>

08004484 <__ssputs_r>:
 8004484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004488:	688e      	ldr	r6, [r1, #8]
 800448a:	429e      	cmp	r6, r3
 800448c:	4682      	mov	sl, r0
 800448e:	460c      	mov	r4, r1
 8004490:	4690      	mov	r8, r2
 8004492:	461f      	mov	r7, r3
 8004494:	d838      	bhi.n	8004508 <__ssputs_r+0x84>
 8004496:	898a      	ldrh	r2, [r1, #12]
 8004498:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800449c:	d032      	beq.n	8004504 <__ssputs_r+0x80>
 800449e:	6825      	ldr	r5, [r4, #0]
 80044a0:	6909      	ldr	r1, [r1, #16]
 80044a2:	eba5 0901 	sub.w	r9, r5, r1
 80044a6:	6965      	ldr	r5, [r4, #20]
 80044a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80044ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80044b0:	3301      	adds	r3, #1
 80044b2:	444b      	add	r3, r9
 80044b4:	106d      	asrs	r5, r5, #1
 80044b6:	429d      	cmp	r5, r3
 80044b8:	bf38      	it	cc
 80044ba:	461d      	movcc	r5, r3
 80044bc:	0553      	lsls	r3, r2, #21
 80044be:	d531      	bpl.n	8004524 <__ssputs_r+0xa0>
 80044c0:	4629      	mov	r1, r5
 80044c2:	f7ff f8af 	bl	8003624 <_malloc_r>
 80044c6:	4606      	mov	r6, r0
 80044c8:	b950      	cbnz	r0, 80044e0 <__ssputs_r+0x5c>
 80044ca:	230c      	movs	r3, #12
 80044cc:	f8ca 3000 	str.w	r3, [sl]
 80044d0:	89a3      	ldrh	r3, [r4, #12]
 80044d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044d6:	81a3      	strh	r3, [r4, #12]
 80044d8:	f04f 30ff 	mov.w	r0, #4294967295
 80044dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044e0:	6921      	ldr	r1, [r4, #16]
 80044e2:	464a      	mov	r2, r9
 80044e4:	f7ff f81e 	bl	8003524 <memcpy>
 80044e8:	89a3      	ldrh	r3, [r4, #12]
 80044ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80044ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044f2:	81a3      	strh	r3, [r4, #12]
 80044f4:	6126      	str	r6, [r4, #16]
 80044f6:	6165      	str	r5, [r4, #20]
 80044f8:	444e      	add	r6, r9
 80044fa:	eba5 0509 	sub.w	r5, r5, r9
 80044fe:	6026      	str	r6, [r4, #0]
 8004500:	60a5      	str	r5, [r4, #8]
 8004502:	463e      	mov	r6, r7
 8004504:	42be      	cmp	r6, r7
 8004506:	d900      	bls.n	800450a <__ssputs_r+0x86>
 8004508:	463e      	mov	r6, r7
 800450a:	4632      	mov	r2, r6
 800450c:	6820      	ldr	r0, [r4, #0]
 800450e:	4641      	mov	r1, r8
 8004510:	f7ff f816 	bl	8003540 <memmove>
 8004514:	68a3      	ldr	r3, [r4, #8]
 8004516:	6822      	ldr	r2, [r4, #0]
 8004518:	1b9b      	subs	r3, r3, r6
 800451a:	4432      	add	r2, r6
 800451c:	60a3      	str	r3, [r4, #8]
 800451e:	6022      	str	r2, [r4, #0]
 8004520:	2000      	movs	r0, #0
 8004522:	e7db      	b.n	80044dc <__ssputs_r+0x58>
 8004524:	462a      	mov	r2, r5
 8004526:	f7ff ff87 	bl	8004438 <_realloc_r>
 800452a:	4606      	mov	r6, r0
 800452c:	2800      	cmp	r0, #0
 800452e:	d1e1      	bne.n	80044f4 <__ssputs_r+0x70>
 8004530:	6921      	ldr	r1, [r4, #16]
 8004532:	4650      	mov	r0, sl
 8004534:	f7ff f826 	bl	8003584 <_free_r>
 8004538:	e7c7      	b.n	80044ca <__ssputs_r+0x46>
	...

0800453c <_svfiprintf_r>:
 800453c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004540:	4698      	mov	r8, r3
 8004542:	898b      	ldrh	r3, [r1, #12]
 8004544:	061b      	lsls	r3, r3, #24
 8004546:	b09d      	sub	sp, #116	; 0x74
 8004548:	4607      	mov	r7, r0
 800454a:	460d      	mov	r5, r1
 800454c:	4614      	mov	r4, r2
 800454e:	d50e      	bpl.n	800456e <_svfiprintf_r+0x32>
 8004550:	690b      	ldr	r3, [r1, #16]
 8004552:	b963      	cbnz	r3, 800456e <_svfiprintf_r+0x32>
 8004554:	2140      	movs	r1, #64	; 0x40
 8004556:	f7ff f865 	bl	8003624 <_malloc_r>
 800455a:	6028      	str	r0, [r5, #0]
 800455c:	6128      	str	r0, [r5, #16]
 800455e:	b920      	cbnz	r0, 800456a <_svfiprintf_r+0x2e>
 8004560:	230c      	movs	r3, #12
 8004562:	603b      	str	r3, [r7, #0]
 8004564:	f04f 30ff 	mov.w	r0, #4294967295
 8004568:	e0d1      	b.n	800470e <_svfiprintf_r+0x1d2>
 800456a:	2340      	movs	r3, #64	; 0x40
 800456c:	616b      	str	r3, [r5, #20]
 800456e:	2300      	movs	r3, #0
 8004570:	9309      	str	r3, [sp, #36]	; 0x24
 8004572:	2320      	movs	r3, #32
 8004574:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004578:	f8cd 800c 	str.w	r8, [sp, #12]
 800457c:	2330      	movs	r3, #48	; 0x30
 800457e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004728 <_svfiprintf_r+0x1ec>
 8004582:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004586:	f04f 0901 	mov.w	r9, #1
 800458a:	4623      	mov	r3, r4
 800458c:	469a      	mov	sl, r3
 800458e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004592:	b10a      	cbz	r2, 8004598 <_svfiprintf_r+0x5c>
 8004594:	2a25      	cmp	r2, #37	; 0x25
 8004596:	d1f9      	bne.n	800458c <_svfiprintf_r+0x50>
 8004598:	ebba 0b04 	subs.w	fp, sl, r4
 800459c:	d00b      	beq.n	80045b6 <_svfiprintf_r+0x7a>
 800459e:	465b      	mov	r3, fp
 80045a0:	4622      	mov	r2, r4
 80045a2:	4629      	mov	r1, r5
 80045a4:	4638      	mov	r0, r7
 80045a6:	f7ff ff6d 	bl	8004484 <__ssputs_r>
 80045aa:	3001      	adds	r0, #1
 80045ac:	f000 80aa 	beq.w	8004704 <_svfiprintf_r+0x1c8>
 80045b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80045b2:	445a      	add	r2, fp
 80045b4:	9209      	str	r2, [sp, #36]	; 0x24
 80045b6:	f89a 3000 	ldrb.w	r3, [sl]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	f000 80a2 	beq.w	8004704 <_svfiprintf_r+0x1c8>
 80045c0:	2300      	movs	r3, #0
 80045c2:	f04f 32ff 	mov.w	r2, #4294967295
 80045c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80045ca:	f10a 0a01 	add.w	sl, sl, #1
 80045ce:	9304      	str	r3, [sp, #16]
 80045d0:	9307      	str	r3, [sp, #28]
 80045d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80045d6:	931a      	str	r3, [sp, #104]	; 0x68
 80045d8:	4654      	mov	r4, sl
 80045da:	2205      	movs	r2, #5
 80045dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045e0:	4851      	ldr	r0, [pc, #324]	; (8004728 <_svfiprintf_r+0x1ec>)
 80045e2:	f7fb fe15 	bl	8000210 <memchr>
 80045e6:	9a04      	ldr	r2, [sp, #16]
 80045e8:	b9d8      	cbnz	r0, 8004622 <_svfiprintf_r+0xe6>
 80045ea:	06d0      	lsls	r0, r2, #27
 80045ec:	bf44      	itt	mi
 80045ee:	2320      	movmi	r3, #32
 80045f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80045f4:	0711      	lsls	r1, r2, #28
 80045f6:	bf44      	itt	mi
 80045f8:	232b      	movmi	r3, #43	; 0x2b
 80045fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80045fe:	f89a 3000 	ldrb.w	r3, [sl]
 8004602:	2b2a      	cmp	r3, #42	; 0x2a
 8004604:	d015      	beq.n	8004632 <_svfiprintf_r+0xf6>
 8004606:	9a07      	ldr	r2, [sp, #28]
 8004608:	4654      	mov	r4, sl
 800460a:	2000      	movs	r0, #0
 800460c:	f04f 0c0a 	mov.w	ip, #10
 8004610:	4621      	mov	r1, r4
 8004612:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004616:	3b30      	subs	r3, #48	; 0x30
 8004618:	2b09      	cmp	r3, #9
 800461a:	d94e      	bls.n	80046ba <_svfiprintf_r+0x17e>
 800461c:	b1b0      	cbz	r0, 800464c <_svfiprintf_r+0x110>
 800461e:	9207      	str	r2, [sp, #28]
 8004620:	e014      	b.n	800464c <_svfiprintf_r+0x110>
 8004622:	eba0 0308 	sub.w	r3, r0, r8
 8004626:	fa09 f303 	lsl.w	r3, r9, r3
 800462a:	4313      	orrs	r3, r2
 800462c:	9304      	str	r3, [sp, #16]
 800462e:	46a2      	mov	sl, r4
 8004630:	e7d2      	b.n	80045d8 <_svfiprintf_r+0x9c>
 8004632:	9b03      	ldr	r3, [sp, #12]
 8004634:	1d19      	adds	r1, r3, #4
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	9103      	str	r1, [sp, #12]
 800463a:	2b00      	cmp	r3, #0
 800463c:	bfbb      	ittet	lt
 800463e:	425b      	neglt	r3, r3
 8004640:	f042 0202 	orrlt.w	r2, r2, #2
 8004644:	9307      	strge	r3, [sp, #28]
 8004646:	9307      	strlt	r3, [sp, #28]
 8004648:	bfb8      	it	lt
 800464a:	9204      	strlt	r2, [sp, #16]
 800464c:	7823      	ldrb	r3, [r4, #0]
 800464e:	2b2e      	cmp	r3, #46	; 0x2e
 8004650:	d10c      	bne.n	800466c <_svfiprintf_r+0x130>
 8004652:	7863      	ldrb	r3, [r4, #1]
 8004654:	2b2a      	cmp	r3, #42	; 0x2a
 8004656:	d135      	bne.n	80046c4 <_svfiprintf_r+0x188>
 8004658:	9b03      	ldr	r3, [sp, #12]
 800465a:	1d1a      	adds	r2, r3, #4
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	9203      	str	r2, [sp, #12]
 8004660:	2b00      	cmp	r3, #0
 8004662:	bfb8      	it	lt
 8004664:	f04f 33ff 	movlt.w	r3, #4294967295
 8004668:	3402      	adds	r4, #2
 800466a:	9305      	str	r3, [sp, #20]
 800466c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004738 <_svfiprintf_r+0x1fc>
 8004670:	7821      	ldrb	r1, [r4, #0]
 8004672:	2203      	movs	r2, #3
 8004674:	4650      	mov	r0, sl
 8004676:	f7fb fdcb 	bl	8000210 <memchr>
 800467a:	b140      	cbz	r0, 800468e <_svfiprintf_r+0x152>
 800467c:	2340      	movs	r3, #64	; 0x40
 800467e:	eba0 000a 	sub.w	r0, r0, sl
 8004682:	fa03 f000 	lsl.w	r0, r3, r0
 8004686:	9b04      	ldr	r3, [sp, #16]
 8004688:	4303      	orrs	r3, r0
 800468a:	3401      	adds	r4, #1
 800468c:	9304      	str	r3, [sp, #16]
 800468e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004692:	4826      	ldr	r0, [pc, #152]	; (800472c <_svfiprintf_r+0x1f0>)
 8004694:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004698:	2206      	movs	r2, #6
 800469a:	f7fb fdb9 	bl	8000210 <memchr>
 800469e:	2800      	cmp	r0, #0
 80046a0:	d038      	beq.n	8004714 <_svfiprintf_r+0x1d8>
 80046a2:	4b23      	ldr	r3, [pc, #140]	; (8004730 <_svfiprintf_r+0x1f4>)
 80046a4:	bb1b      	cbnz	r3, 80046ee <_svfiprintf_r+0x1b2>
 80046a6:	9b03      	ldr	r3, [sp, #12]
 80046a8:	3307      	adds	r3, #7
 80046aa:	f023 0307 	bic.w	r3, r3, #7
 80046ae:	3308      	adds	r3, #8
 80046b0:	9303      	str	r3, [sp, #12]
 80046b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046b4:	4433      	add	r3, r6
 80046b6:	9309      	str	r3, [sp, #36]	; 0x24
 80046b8:	e767      	b.n	800458a <_svfiprintf_r+0x4e>
 80046ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80046be:	460c      	mov	r4, r1
 80046c0:	2001      	movs	r0, #1
 80046c2:	e7a5      	b.n	8004610 <_svfiprintf_r+0xd4>
 80046c4:	2300      	movs	r3, #0
 80046c6:	3401      	adds	r4, #1
 80046c8:	9305      	str	r3, [sp, #20]
 80046ca:	4619      	mov	r1, r3
 80046cc:	f04f 0c0a 	mov.w	ip, #10
 80046d0:	4620      	mov	r0, r4
 80046d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80046d6:	3a30      	subs	r2, #48	; 0x30
 80046d8:	2a09      	cmp	r2, #9
 80046da:	d903      	bls.n	80046e4 <_svfiprintf_r+0x1a8>
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d0c5      	beq.n	800466c <_svfiprintf_r+0x130>
 80046e0:	9105      	str	r1, [sp, #20]
 80046e2:	e7c3      	b.n	800466c <_svfiprintf_r+0x130>
 80046e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80046e8:	4604      	mov	r4, r0
 80046ea:	2301      	movs	r3, #1
 80046ec:	e7f0      	b.n	80046d0 <_svfiprintf_r+0x194>
 80046ee:	ab03      	add	r3, sp, #12
 80046f0:	9300      	str	r3, [sp, #0]
 80046f2:	462a      	mov	r2, r5
 80046f4:	4b0f      	ldr	r3, [pc, #60]	; (8004734 <_svfiprintf_r+0x1f8>)
 80046f6:	a904      	add	r1, sp, #16
 80046f8:	4638      	mov	r0, r7
 80046fa:	f3af 8000 	nop.w
 80046fe:	1c42      	adds	r2, r0, #1
 8004700:	4606      	mov	r6, r0
 8004702:	d1d6      	bne.n	80046b2 <_svfiprintf_r+0x176>
 8004704:	89ab      	ldrh	r3, [r5, #12]
 8004706:	065b      	lsls	r3, r3, #25
 8004708:	f53f af2c 	bmi.w	8004564 <_svfiprintf_r+0x28>
 800470c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800470e:	b01d      	add	sp, #116	; 0x74
 8004710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004714:	ab03      	add	r3, sp, #12
 8004716:	9300      	str	r3, [sp, #0]
 8004718:	462a      	mov	r2, r5
 800471a:	4b06      	ldr	r3, [pc, #24]	; (8004734 <_svfiprintf_r+0x1f8>)
 800471c:	a904      	add	r1, sp, #16
 800471e:	4638      	mov	r0, r7
 8004720:	f7ff f9a2 	bl	8003a68 <_printf_i>
 8004724:	e7eb      	b.n	80046fe <_svfiprintf_r+0x1c2>
 8004726:	bf00      	nop
 8004728:	08004d88 	.word	0x08004d88
 800472c:	08004d92 	.word	0x08004d92
 8004730:	00000000 	.word	0x00000000
 8004734:	08004485 	.word	0x08004485
 8004738:	08004d8e 	.word	0x08004d8e

0800473c <__sread>:
 800473c:	b510      	push	{r4, lr}
 800473e:	460c      	mov	r4, r1
 8004740:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004744:	f000 f89c 	bl	8004880 <_read_r>
 8004748:	2800      	cmp	r0, #0
 800474a:	bfab      	itete	ge
 800474c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800474e:	89a3      	ldrhlt	r3, [r4, #12]
 8004750:	181b      	addge	r3, r3, r0
 8004752:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004756:	bfac      	ite	ge
 8004758:	6563      	strge	r3, [r4, #84]	; 0x54
 800475a:	81a3      	strhlt	r3, [r4, #12]
 800475c:	bd10      	pop	{r4, pc}

0800475e <__swrite>:
 800475e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004762:	461f      	mov	r7, r3
 8004764:	898b      	ldrh	r3, [r1, #12]
 8004766:	05db      	lsls	r3, r3, #23
 8004768:	4605      	mov	r5, r0
 800476a:	460c      	mov	r4, r1
 800476c:	4616      	mov	r6, r2
 800476e:	d505      	bpl.n	800477c <__swrite+0x1e>
 8004770:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004774:	2302      	movs	r3, #2
 8004776:	2200      	movs	r2, #0
 8004778:	f000 f868 	bl	800484c <_lseek_r>
 800477c:	89a3      	ldrh	r3, [r4, #12]
 800477e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004782:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004786:	81a3      	strh	r3, [r4, #12]
 8004788:	4632      	mov	r2, r6
 800478a:	463b      	mov	r3, r7
 800478c:	4628      	mov	r0, r5
 800478e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004792:	f000 b817 	b.w	80047c4 <_write_r>

08004796 <__sseek>:
 8004796:	b510      	push	{r4, lr}
 8004798:	460c      	mov	r4, r1
 800479a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800479e:	f000 f855 	bl	800484c <_lseek_r>
 80047a2:	1c43      	adds	r3, r0, #1
 80047a4:	89a3      	ldrh	r3, [r4, #12]
 80047a6:	bf15      	itete	ne
 80047a8:	6560      	strne	r0, [r4, #84]	; 0x54
 80047aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80047ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80047b2:	81a3      	strheq	r3, [r4, #12]
 80047b4:	bf18      	it	ne
 80047b6:	81a3      	strhne	r3, [r4, #12]
 80047b8:	bd10      	pop	{r4, pc}

080047ba <__sclose>:
 80047ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047be:	f000 b813 	b.w	80047e8 <_close_r>
	...

080047c4 <_write_r>:
 80047c4:	b538      	push	{r3, r4, r5, lr}
 80047c6:	4d07      	ldr	r5, [pc, #28]	; (80047e4 <_write_r+0x20>)
 80047c8:	4604      	mov	r4, r0
 80047ca:	4608      	mov	r0, r1
 80047cc:	4611      	mov	r1, r2
 80047ce:	2200      	movs	r2, #0
 80047d0:	602a      	str	r2, [r5, #0]
 80047d2:	461a      	mov	r2, r3
 80047d4:	f000 f8ac 	bl	8004930 <_write>
 80047d8:	1c43      	adds	r3, r0, #1
 80047da:	d102      	bne.n	80047e2 <_write_r+0x1e>
 80047dc:	682b      	ldr	r3, [r5, #0]
 80047de:	b103      	cbz	r3, 80047e2 <_write_r+0x1e>
 80047e0:	6023      	str	r3, [r4, #0]
 80047e2:	bd38      	pop	{r3, r4, r5, pc}
 80047e4:	200003f0 	.word	0x200003f0

080047e8 <_close_r>:
 80047e8:	b538      	push	{r3, r4, r5, lr}
 80047ea:	4d06      	ldr	r5, [pc, #24]	; (8004804 <_close_r+0x1c>)
 80047ec:	2300      	movs	r3, #0
 80047ee:	4604      	mov	r4, r0
 80047f0:	4608      	mov	r0, r1
 80047f2:	602b      	str	r3, [r5, #0]
 80047f4:	f000 f856 	bl	80048a4 <_close>
 80047f8:	1c43      	adds	r3, r0, #1
 80047fa:	d102      	bne.n	8004802 <_close_r+0x1a>
 80047fc:	682b      	ldr	r3, [r5, #0]
 80047fe:	b103      	cbz	r3, 8004802 <_close_r+0x1a>
 8004800:	6023      	str	r3, [r4, #0]
 8004802:	bd38      	pop	{r3, r4, r5, pc}
 8004804:	200003f0 	.word	0x200003f0

08004808 <_fstat_r>:
 8004808:	b538      	push	{r3, r4, r5, lr}
 800480a:	4d07      	ldr	r5, [pc, #28]	; (8004828 <_fstat_r+0x20>)
 800480c:	2300      	movs	r3, #0
 800480e:	4604      	mov	r4, r0
 8004810:	4608      	mov	r0, r1
 8004812:	4611      	mov	r1, r2
 8004814:	602b      	str	r3, [r5, #0]
 8004816:	f000 f84d 	bl	80048b4 <_fstat>
 800481a:	1c43      	adds	r3, r0, #1
 800481c:	d102      	bne.n	8004824 <_fstat_r+0x1c>
 800481e:	682b      	ldr	r3, [r5, #0]
 8004820:	b103      	cbz	r3, 8004824 <_fstat_r+0x1c>
 8004822:	6023      	str	r3, [r4, #0]
 8004824:	bd38      	pop	{r3, r4, r5, pc}
 8004826:	bf00      	nop
 8004828:	200003f0 	.word	0x200003f0

0800482c <_isatty_r>:
 800482c:	b538      	push	{r3, r4, r5, lr}
 800482e:	4d06      	ldr	r5, [pc, #24]	; (8004848 <_isatty_r+0x1c>)
 8004830:	2300      	movs	r3, #0
 8004832:	4604      	mov	r4, r0
 8004834:	4608      	mov	r0, r1
 8004836:	602b      	str	r3, [r5, #0]
 8004838:	f000 f84c 	bl	80048d4 <_isatty>
 800483c:	1c43      	adds	r3, r0, #1
 800483e:	d102      	bne.n	8004846 <_isatty_r+0x1a>
 8004840:	682b      	ldr	r3, [r5, #0]
 8004842:	b103      	cbz	r3, 8004846 <_isatty_r+0x1a>
 8004844:	6023      	str	r3, [r4, #0]
 8004846:	bd38      	pop	{r3, r4, r5, pc}
 8004848:	200003f0 	.word	0x200003f0

0800484c <_lseek_r>:
 800484c:	b538      	push	{r3, r4, r5, lr}
 800484e:	4d07      	ldr	r5, [pc, #28]	; (800486c <_lseek_r+0x20>)
 8004850:	4604      	mov	r4, r0
 8004852:	4608      	mov	r0, r1
 8004854:	4611      	mov	r1, r2
 8004856:	2200      	movs	r2, #0
 8004858:	602a      	str	r2, [r5, #0]
 800485a:	461a      	mov	r2, r3
 800485c:	f000 f84a 	bl	80048f4 <_lseek>
 8004860:	1c43      	adds	r3, r0, #1
 8004862:	d102      	bne.n	800486a <_lseek_r+0x1e>
 8004864:	682b      	ldr	r3, [r5, #0]
 8004866:	b103      	cbz	r3, 800486a <_lseek_r+0x1e>
 8004868:	6023      	str	r3, [r4, #0]
 800486a:	bd38      	pop	{r3, r4, r5, pc}
 800486c:	200003f0 	.word	0x200003f0

08004870 <_malloc_usable_size_r>:
 8004870:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004874:	1f18      	subs	r0, r3, #4
 8004876:	2b00      	cmp	r3, #0
 8004878:	bfbc      	itt	lt
 800487a:	580b      	ldrlt	r3, [r1, r0]
 800487c:	18c0      	addlt	r0, r0, r3
 800487e:	4770      	bx	lr

08004880 <_read_r>:
 8004880:	b538      	push	{r3, r4, r5, lr}
 8004882:	4d07      	ldr	r5, [pc, #28]	; (80048a0 <_read_r+0x20>)
 8004884:	4604      	mov	r4, r0
 8004886:	4608      	mov	r0, r1
 8004888:	4611      	mov	r1, r2
 800488a:	2200      	movs	r2, #0
 800488c:	602a      	str	r2, [r5, #0]
 800488e:	461a      	mov	r2, r3
 8004890:	f000 f838 	bl	8004904 <_read>
 8004894:	1c43      	adds	r3, r0, #1
 8004896:	d102      	bne.n	800489e <_read_r+0x1e>
 8004898:	682b      	ldr	r3, [r5, #0]
 800489a:	b103      	cbz	r3, 800489e <_read_r+0x1e>
 800489c:	6023      	str	r3, [r4, #0]
 800489e:	bd38      	pop	{r3, r4, r5, pc}
 80048a0:	200003f0 	.word	0x200003f0

080048a4 <_close>:
 80048a4:	4b02      	ldr	r3, [pc, #8]	; (80048b0 <_close+0xc>)
 80048a6:	2258      	movs	r2, #88	; 0x58
 80048a8:	601a      	str	r2, [r3, #0]
 80048aa:	f04f 30ff 	mov.w	r0, #4294967295
 80048ae:	4770      	bx	lr
 80048b0:	200003f0 	.word	0x200003f0

080048b4 <_fstat>:
 80048b4:	4b02      	ldr	r3, [pc, #8]	; (80048c0 <_fstat+0xc>)
 80048b6:	2258      	movs	r2, #88	; 0x58
 80048b8:	601a      	str	r2, [r3, #0]
 80048ba:	f04f 30ff 	mov.w	r0, #4294967295
 80048be:	4770      	bx	lr
 80048c0:	200003f0 	.word	0x200003f0

080048c4 <_getpid>:
 80048c4:	4b02      	ldr	r3, [pc, #8]	; (80048d0 <_getpid+0xc>)
 80048c6:	2258      	movs	r2, #88	; 0x58
 80048c8:	601a      	str	r2, [r3, #0]
 80048ca:	f04f 30ff 	mov.w	r0, #4294967295
 80048ce:	4770      	bx	lr
 80048d0:	200003f0 	.word	0x200003f0

080048d4 <_isatty>:
 80048d4:	4b02      	ldr	r3, [pc, #8]	; (80048e0 <_isatty+0xc>)
 80048d6:	2258      	movs	r2, #88	; 0x58
 80048d8:	601a      	str	r2, [r3, #0]
 80048da:	2000      	movs	r0, #0
 80048dc:	4770      	bx	lr
 80048de:	bf00      	nop
 80048e0:	200003f0 	.word	0x200003f0

080048e4 <_kill>:
 80048e4:	4b02      	ldr	r3, [pc, #8]	; (80048f0 <_kill+0xc>)
 80048e6:	2258      	movs	r2, #88	; 0x58
 80048e8:	601a      	str	r2, [r3, #0]
 80048ea:	f04f 30ff 	mov.w	r0, #4294967295
 80048ee:	4770      	bx	lr
 80048f0:	200003f0 	.word	0x200003f0

080048f4 <_lseek>:
 80048f4:	4b02      	ldr	r3, [pc, #8]	; (8004900 <_lseek+0xc>)
 80048f6:	2258      	movs	r2, #88	; 0x58
 80048f8:	601a      	str	r2, [r3, #0]
 80048fa:	f04f 30ff 	mov.w	r0, #4294967295
 80048fe:	4770      	bx	lr
 8004900:	200003f0 	.word	0x200003f0

08004904 <_read>:
 8004904:	4b02      	ldr	r3, [pc, #8]	; (8004910 <_read+0xc>)
 8004906:	2258      	movs	r2, #88	; 0x58
 8004908:	601a      	str	r2, [r3, #0]
 800490a:	f04f 30ff 	mov.w	r0, #4294967295
 800490e:	4770      	bx	lr
 8004910:	200003f0 	.word	0x200003f0

08004914 <_sbrk>:
 8004914:	4b04      	ldr	r3, [pc, #16]	; (8004928 <_sbrk+0x14>)
 8004916:	6819      	ldr	r1, [r3, #0]
 8004918:	4602      	mov	r2, r0
 800491a:	b909      	cbnz	r1, 8004920 <_sbrk+0xc>
 800491c:	4903      	ldr	r1, [pc, #12]	; (800492c <_sbrk+0x18>)
 800491e:	6019      	str	r1, [r3, #0]
 8004920:	6818      	ldr	r0, [r3, #0]
 8004922:	4402      	add	r2, r0
 8004924:	601a      	str	r2, [r3, #0]
 8004926:	4770      	bx	lr
 8004928:	2000035c 	.word	0x2000035c
 800492c:	200003f8 	.word	0x200003f8

08004930 <_write>:
 8004930:	4b02      	ldr	r3, [pc, #8]	; (800493c <_write+0xc>)
 8004932:	2258      	movs	r2, #88	; 0x58
 8004934:	601a      	str	r2, [r3, #0]
 8004936:	f04f 30ff 	mov.w	r0, #4294967295
 800493a:	4770      	bx	lr
 800493c:	200003f0 	.word	0x200003f0

08004940 <_exit>:
 8004940:	e7fe      	b.n	8004940 <_exit>
	...

08004944 <_init>:
 8004944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004946:	bf00      	nop
 8004948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800494a:	bc08      	pop	{r3}
 800494c:	469e      	mov	lr, r3
 800494e:	4770      	bx	lr

08004950 <_fini>:
 8004950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004952:	bf00      	nop
 8004954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004956:	bc08      	pop	{r3}
 8004958:	469e      	mov	lr, r3
 800495a:	4770      	bx	lr
